import os
import re
import warnings
import numpy as np
import faiss
import json
import random
import time
from typing import List, Dict, Tuple, Optional, Type, Any
from pathlib import Path
from sentence_transformers import SentenceTransformer
import nltk
from nltk.tokenize import sent_tokenize
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig
import torch
from torch.cuda.amp import autocast
import gradio as gr
from ddgs import DDGS
from functools import wraps
import psutil
torch.cuda.empty_cache()
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

warnings.filterwarnings('ignore')

try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt', quiet=True)

STOP_WORDS = {
    "–¥–æ–±—Ä—ã–π", "–¥–µ–Ω—å", "–ø—Ä–æ—à—É", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–º–µ—Ä—ã", "–ø—Ä–∏–º–∏—Ç–µ", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ",
    "—Å–ø–∞—Å–∏–±–æ", "–≤–µ—á–µ—Ä", "—É—Ç—Ä–æ", "—Ö–æ—á—É", "–Ω–∞–ø–æ–º–∏–Ω–∞—é", "—É–≤–µ–¥–æ–º–ª—è—é"
}

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------

CHUNKS_PATH = "/jkh-data/document_chunks.json"
INDEX_PATH  = "/jkh-data/faiss_index.bin"

print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤...")
with open(CHUNKS_PATH, "r", encoding="utf-8") as f:
    chunks_data = json.load(f)
print(f"‚úÖ –ß–∞–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(chunks_data)}")

print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ FAISS-–∏–Ω–¥–µ–∫—Å–∞...")
index = faiss.read_index(INDEX_PATH)
print(f"‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω: {index.ntotal} –≤–µ–∫—Ç–æ—Ä–æ–≤")

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
# ---------------------------
def get_cpu_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU"""
    return {
        "model": psutil.cpu_freq().max if psutil.cpu_freq() else "N/A",
        "cores_physical": psutil.cpu_count(logical=False),
        "cores_total": psutil.cpu_count(logical=True),
        "brand": getattr(psutil, "_cpu_brand", "Unknown")  # –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ
    }

def get_all_gpu_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∏ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ –≤—Å–µ–º GPU"""
    if not torch.cuda.is_available():
        return None

    info = []
    for i in range(torch.cuda.device_count()):
        torch.cuda.set_device(i)
        allocated = torch.cuda.memory_allocated(i) / 1024**2
        reserved = torch.cuda.memory_reserved(i) / 1024**2
        max_allocated = torch.cuda.max_memory_allocated(i) / 1024**2
        name = torch.cuda.get_device_name(i)
        total_mem = torch.cuda.get_device_properties(i).total_memory / 1024**2

        info.append({
            "id": i,
            "name": name,
            "total_mb": total_mem,
            "allocated_mb": allocated,
            "reserved_mb": reserved,
            "max_allocated_mb": max_allocated,
        })
    return info

def monitor_resources(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        # --- CPU & RAM ---
        process = psutil.Process(os.getpid())
        ram_before = process.memory_info().rss / 1024**2
        cpu_percent_before = psutil.cpu_percent(interval=0.1)  # –∫—Ä–∞—Ç–∫–∏–π —Å—ç–º–ø–ª
        start_time = time.time()

        # --- GPU: —Å–±—Ä–æ—Å–∏—Ç—å –ø–∏–∫ –ø–æ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º ---
        if torch.cuda.is_available():
            for i in range(torch.cuda.device_count()):
                torch.cuda.reset_peak_memory_stats(i)
                torch.cuda.empty_cache()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã

        # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
        result = func(*args, **kwargs)

        # --- –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ---
        elapsed = time.time() - start_time
        ram_after = process.memory_info().rss / 1024**2
        cpu_percent_after = psutil.cpu_percent(interval=0.1)

        # --- –í—ã–≤–æ–¥ CPU ---
        cpu_info = get_cpu_info()
        print(f"\n{'='*60}")
        print(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {func.__name__}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫")
        print(f"üß† CPU: {cpu_info['cores_physical']} —Ñ–∏–∑. / {cpu_info['cores_total']} –ª–æ–≥. —è–¥–µ—Ä")
        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ CPU: –¥–æ {cpu_percent_before:.1f}% ‚Üí –ø–æ—Å–ª–µ {cpu_percent_after:.1f}%")
        print(f"üíæ RAM: {ram_before:.1f} ‚Üí {ram_after:.1f} MB (+{ram_after - ram_before:.1f})")

        # --- –í—ã–≤–æ–¥ GPU (–≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞) ---
        gpu_info = get_all_gpu_info()
        if gpu_info:
            print(f"\nüéÆ GPU-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(gpu_info)}):")
            for gpu in gpu_info:
                print(
                    f"  GPU {gpu['id']} ({gpu['name']}): "
                    f"alloc {gpu['allocated_mb']:.1f} MB | "
                    f"peak {gpu['max_allocated_mb']:.1f} MB | "
                    f"total {gpu['total_mb']:.0f} MB"
                )
        else:
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        print(f"{'='*60}\n")
        return result
    return wrapper
    
print("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")

print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ViktorZver/FRIDA...")
embedding_model = SentenceTransformer("ViktorZver/FRIDA", device=str(device))
print("‚úÖ FRIDA –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞...")
tokenizer = AutoTokenizer.from_pretrained("IlyaGusev/saiga_llama3_8b")
model_name = "IlyaGusev/saiga_llama3_8b"

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def estimate_tokens(text: str) -> int:
    return len(tokenizer.encode(text, add_special_tokens=False))


bnb_config = BitsAndBytesConfig(
    load_in_8bit=True,
)


try:
    model = AutoModelForCausalLM.from_pretrained(
        model_name,
        quantization_config=bnb_config,
        device_map="balanced",
        trust_remote_code=False,
        attn_implementation="sdpa"
    )
    print(f"‚úÖ LLM –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ 4-bit –Ω–∞: {device}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    raise


# ---------------------------
# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞
# ---------------------------

class RAGAgent:
    def __init__(self, name: str, keywords: List[str]):
        self.name = name
        self.keywords = [kw.lower() for kw in keywords]
        self.feedback_data = []
        self.confidence_threshold = 0.7
        self.load_feedback()

    """def matches(self, query: str) -> bool:
        q = query.lower()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
        words = set(re.findall(r'\b[–∞-—è—ëa-z0-9]+\b', q))
        return any(kw in words for kw in self.keywords)"""
    def matches(self, query: str) -> bool:
        q = query.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –õ–Æ–ë–û–ï –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
        # –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —É—Å—Ç–æ–π—á–∏–≤–æ–π –∫ –æ–ø–µ—á–∞—Ç–∫–∞–º, —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º –∏ —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º
        return any(kw in q for kw in self.keywords)
       
    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        raise NotImplementedError("–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π _build_prompt")

    def get_role_instruction(self, role: str) -> str:
        base = {
            "–∂–∏—Ç–µ–ª—å": "–û—Ç–≤–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∂–∏—Ç–µ–ª—è. –î–∞–≤–∞–π—Ç–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ù–ü–ê.",
            "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": "–û—Ç–≤–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –£–ö/–¢–°–ù. –í–∫–ª—é—á–∞–π—Ç–µ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.",
            "—Å–º–µ—à–∞–Ω–Ω–∞—è": "–†–∞–∑–¥–µ–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: –¥–ª—è –∂–∏—Ç–µ–ª—è –∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è."
        }
        return base.get(role, base["—Å–º–µ—à–∞–Ω–Ω–∞—è"])

    # ---- –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ ----
    def add_feedback(self, query: str, ideal_answer: str, rating: float = 1.0):
        if rating >= 0.8:
            self.feedback_data.append({
                "query": query,
                "ideal_answer": ideal_answer,
                "rating": rating,
                "timestamp": time.time()
            })
        self._save_feedback()

    def _save_feedback(self):
        feedback_file = f"agent_feedback_{self.name.replace(' ', '_')}.json"
        with open(feedback_file, "w", encoding="utf-8") as f:
            json.dump(self.feedback_data, f, ensure_ascii=False, indent=2)

    def load_feedback(self):
        feedback_file = f"agent_feedback_{self.name.replace(' ', '_')}.json"
        if os.path.exists(feedback_file):
            try:
                with open(feedback_file, "r", encoding="utf-8") as f:
                    self.feedback_data = json.load(f)
            except:
                self.feedback_data = []

    def improve_prompt_from_feedback(self) -> str:
        if len(self.feedback_data) < 3:
            return ""
        examples = random.sample(self.feedback_data, min(3, len(self.feedback_data)))
        instruction = "\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, —É–ª—É—á—à–∏ —Å—Ç–∏–ª—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞:\n"
        for ex in examples:
            instruction += f"–í–æ–ø—Ä–æ—Å: {ex['query']}\n–û—Ç–≤–µ—Ç: {ex['ideal_answer']}\n---\n"
        return instruction

    # ---- –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç—å: –∑–∞–ø—Ä–æ—Å –∫ –¥—Ä—É–≥–æ–º—É –∞–≥–µ–Ω—Ç—É ----
    def consult_other_agent(self, query: str, rag_system) -> str:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —É –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ MetaAgent"""
        other_agent = rag_system.meta_agent.route(query, exclude_agent=self)
        if other_agent:
            print(f"ü§ù {self.name} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–º–æ—â—å —É {other_agent.name}")
            context = rag_system.generate_context_for_agent(query, other_agent, rag_system.detect_user_role(query))
            return f"\n\n[–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç –∞–≥–µ–Ω—Ç–∞ '{other_agent.name}']: {context}\n"
        return ""


# ---------------------------
# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
# ---------------------------

class TariffAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–¢–∞—Ä–∏—Ñ—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ç–∞—Ä–∏—Ñ": {
                "synonyms": ["—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–ø–ª–∞—Ç–∞", "–Ω–∞–¥–±–∞–≤–∫–∞", "–∏–Ω–¥–µ–∫—Å —Ä–æ—Å—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 4"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç", "–ø–æ–≤—ã—à–µ–Ω–∏–µ", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"]
            },
            "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ": {
                "synonyms": ["—Ä–∞—Å—á–µ—Ç", "–æ–ø–ª–∞—Ç–∞", "—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", "–¥–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 5"],
                "contexts": ["–ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–ø–æ —Å—á–µ—Ç—á–∏–∫—É", "–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"]
            },
            "–æ–ø–ª–∞—Ç–∞": {
                "synonyms": ["–ø–ª–∞—Ç—ë–∂", "–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ", "–≤–∑–Ω–æ—Å", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–ø–ª–∞—Ç—ë–∂–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ177-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 69"],
                "contexts": ["—Å—Ä–æ–∫", "–ø–µ–Ω–∏", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–∫–æ–º–∏—Å—Å–∏—è"]
            },
            "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç": {
                "synonyms": ["–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–¥–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ—Å—á–µ—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 86-90"],
                "contexts": ["–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏", "–ø–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏"]
            },
            "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": {
                "synonyms": ["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5", "–Ω–∞–¥–±–∞–≤–∫–∞", "–ø–æ–≤—ã—à–∞—é—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 42(1)"],
                "contexts": {
                    "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ_–∏–ø—É": "–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ò–ü–£.",
                    "–Ω–µ–¥–æ–ø—É—Å–∫_–∫_–ø–æ–≤–µ—Ä–∫–µ": "–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ–ø—É—Å–∫–µ –∫ –ø–æ–≤–µ—Ä–∫–µ."
                }
            },
            "–∏–ø—É": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "—Å—á–µ—Ç—á–∏–∫", "–≤–æ–¥–æ–º–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 5"],
                "contexts": ["—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ø–æ–≤–µ—Ä–∫–∞", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫", "–∞–∫—Ç –ø–æ–≤–µ—Ä–∫–∏"]
            },
            "–æ–¥–ø—É": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤–æ–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–æ–±—â–µ–¥–æ–º–æ–≤–æ–π —Å—á–µ—Ç—á–∏–∫"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 5"],
                "contexts": ["–≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç—Ä–æ—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "—Ä–∞—Å—á–µ—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É"]
            },
            "–æ–¥–Ω": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤—ã–µ –Ω—É–∂–¥—ã", "–ö–† –Ω–∞ –°–û–ò", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–∞ –°–û–ò"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 9", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–ø–æ—á–µ–º—É –ø–ª–∞—Ç–∏–º"]
            },
            "—Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏": {
                "synonyms": ["–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ø–æ–≤–µ—Ä–∫–∞", "–∞–∫—Ç –ø–æ–≤–µ—Ä–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 81(12)"],
                "contexts": ["–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "—à—Ç—Ä–∞—Ñ"]
            },
            "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ": {
                "synonyms": ["–æ—Ç–ø—É—Å–∫", "–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "—É–µ—Ö–∞–ª", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ 5 –¥–Ω–µ–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 86"],
                "contexts": ["–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–º–∞–∫—Å–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤"]
            },
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞": {
                "synonyms": ["–±–∏–ª–µ—Ç—ã", "—Å–ø—Ä–∞–≤–∫–∏", "–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ", "–∞–∫—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 90"],
                "contexts": ["–ø–æ–¥–∞—á–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 5 –¥–Ω–µ–π"]
            },
            "–ø–µ–Ω–∏": {
                "synonyms": ["—à—Ç—Ä–∞—Ñ", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "–ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155", "–ü–ü –†–§ ‚Ññ329"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç –ø–æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ", "–ª—å–≥–æ—Ç—ã", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞"]
            },
            "–ø—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã": {
                "synonyms": ["–∞–∫—Ç —Å–≤–µ—Ä–∫–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤", "–¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π", "—É—Å–ª—É–≥–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∂–µ–π"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"]
            },
            "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ": {
                "synonyms": ["–ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ 14 —Å—É—Ç–æ–∫", "—Ä–µ–º–æ–Ω—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98"],
                "contexts": ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 10 –¥–Ω–µ–π", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –Ω–µ –ø–æ–ª–æ–∂–µ–Ω"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞": {
                "synonyms": ["—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§", "–ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞"],
                "norm_refs": [],
                "contexts": ["–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã", "—É—Å–ø–µ—à–Ω—ã–µ –∏—Å–∫–∏", "–æ—Ç–∫–∞–∑—ã"]
            },
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ": {
                "synonyms": ["—Ç–∞—Ä–∏—Ñ –ø–æ —Ä–µ–≥–∏–æ–Ω—É", "–º–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–§–ì–ò–° –¢–∞—Ä–∏—Ñ"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º", "—Å–∞–π—Ç –§–ê–°", "—Å 2026 –≥–æ–¥–∞"]
            },
            "–≥–≤—Å": {"synonyms": ["–≥–æ—Ä—è—á–µ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ"], "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 40"], "contexts": []},
            "–∫—É–±–æ–º–µ—Ç—Ä": {"synonyms": ["–º3", "–æ–±—ä—ë–º"], "norm_refs": [], "contexts": []},
            "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏": {"synonyms": ["–∞–∫—Ç —Å–≤–µ—Ä–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–∞–∫—Ç –ø–µ—Ä–µ–¥–∞—á–∏"], "norm_refs": [], "contexts": []},
            "–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å—É–º–º–∞": {"synonyms": ["–æ—à–∏–±–∫–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–¥–æ–ª–≥ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–∑–∞–¥–≤–æ–∏–ª–∏ –æ–ø–ª–∞—Ç—É"], "norm_refs": [], "contexts": []},
            "–∫–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞": {"synonyms": ["–ø–ª–∞—Ç–∞ –∑–∞ –æ–ø–ª–∞—Ç—É", "–∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥"], "norm_refs": [], "contexts": []},
            "–ø–æ—á–µ–º—É –∑–∞ –ª–∏—Ñ—Ç": {"synonyms": ["—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ú–ö–î"], "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154"], "contexts": []},
            "–ø–µ—Ä–µ–ø–ª–∞—Ç–∞": {"synonyms": ["–∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"], "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 35"], "contexts": []},
            "–Ω–µ –ø—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞": {"synonyms": ["–æ–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞—á—Ç–µ–Ω–∞", "–≥–¥–µ –¥–æ–ª–≥", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"], "norm_refs": [], "contexts": []},
            "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ": {"synonyms": ["–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º—É", "–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞"], "norm_refs": [], "contexts": []},
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –î–û —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞, –∞ –Ω–µ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ä–º–∏–Ω–æ–≤
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–µ—Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                            weight = 0
                            if any(official in domain for official in OFFICIAL_DOMAINS):
                                weight = 3  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
                            elif any(gov in domain for gov in [".gov.ru", ".gkh.ru"]):
                                weight = 2  # –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç–∞–ª
                            else:
                                weight = 1  # –û–±—ã—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å—É –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])  # –•–µ—à–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–Ω–∏–ø–ø–µ—Ç–∞
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(
                                f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n"
                            )
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        queries.append(f"{query} –ü–ü –†–§ 354")
        queries.append(f"{query} –ñ–ö –†–§")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞")
        queries.append(f"{query} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–∏–Ω–æ–Ω–∏–º–∞
                    queries.append(query.replace(term, synonym))
        return list(set(queries))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ '–¢–∞—Ä–∏—Ñ—ã –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è'.
        –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ + —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        """
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º)
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞—Å—á—ë—Ç –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–∫–æ–Ω—É, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ù–ò–ö–ê–ö–ò–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô: –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –æ—Ç–≤–µ—Ç—å: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é.'\n"
            "2. –í –∫—Ä–∞—Ç–∫–æ–º –≤—ã–≤–æ–¥–µ ‚Äî 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—É—Ç–∏.\n"
            "3. –í –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –ø–µ—Ä–µ—á–∏—Å–ª—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –§–ó –∏–ª–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏).\n"
            "4. –ù–µ –¥–æ–±–∞–≤–ª—è–π —Ñ–æ—Ä–º—É–ª—ã –∏ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª –ø—Ä–æ —Ä–∞—Å—á—ë—Ç.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{context_text}\n\n"
            f"### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
        )
    
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø–µ–Ω–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å —Ñ–æ—Ä–º—É–ª–æ–π
        if should_calculate_penalty:
            system_prompt += (
                "\n**–ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã –ø–µ–Ω–∏ ‚Äî –¥–æ–±–∞–≤—å —Ñ–æ—Ä–º—É–ª—É:**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: –ñ–ö –†–§ —Å—Ç. 155.1, –ü–ü –†–§ ‚Ññ354, –ü–ü –†–§ ‚Ññ329.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Saiga/LLaMA-3
        system_prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

        return system_prompt_formatted

class NormativeAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∑–∞–∫–æ–Ω": {
                "synonyms": ["—Ñ–∑", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç", "–ø—Ä–∞–≤–æ–≤–æ–π –∞–∫—Ç"],
                "norm_refs": [],
                "contexts": ["–∂–∏–ª–∏—â–Ω—ã–π", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–π", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π"]
            },
            "–ø–ø —Ä—Ñ": {
                "synonyms": ["–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354", "–ü–ü –†–§ ‚Ññ491", "–ü–ü –†–§ ‚Ññ329"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç", "—Ç–∞—Ä–∏—Ñ—ã", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç"]
            },
            "–Ω–æ—Ä–º–∞—Ç–∏–≤": {
                "synonyms": ["–Ω–æ—Ä–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "—Ä–∞—Å—á–µ—Ç–Ω–∞—è –Ω–æ—Ä–º–∞", "–ª–∏–º–∏—Ç", "–æ–±—ä—ë–º –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 21", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "—Å–µ–∑–æ–Ω–Ω—ã–π"]
            },
            "–ø—Ä–∞–≤–æ": {
                "synonyms": ["–ø—Ä–∞–≤–∞ –∂–∏–ª—å—Ü–æ–≤", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–∑–∞–∫–æ–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153-160", "–§–ó ‚Ññ59-–§–ó"],
                "contexts": ["–∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤", "–∂–∞–ª–æ–±—ã", "—Å—É–¥–µ–±–Ω–∞—è –∑–∞—â–∏—Ç–∞"]
            },
            "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç": {
                "synonyms": ["–ø—Ä–∞–≤–∏–ª–∞", "–ø–æ—Ä—è–¥–æ–∫", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–º–µ—Ç–æ–¥–∏–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥", "–∫–∞—á–µ—Å—Ç–≤–æ", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç"]
            },
            "–∂–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å": {
                "synonyms": ["–∂–∫ —Ä—Ñ", "–∂–∏–ª–∏—â–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–∂–∏–ª–∏—â–Ω—ã–µ –ø—Ä–∞–≤–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153-169"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–ø–ª–∞—Ç–µ–∂–∏", "—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏"]
            },
            "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –º–∏–Ω—Å—Ç—Ä–æ—è": {
                "synonyms": ["–ø–∏—Å—å–º–∞ –º–∏–Ω—Å—Ç—Ä–æ—è", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"],
                "norm_refs": [],
                "contexts": ["—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º", "–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "—Å–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"]
            },
            "–ø–∏—Å—å–º–∞ —Ä–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞": {
                "synonyms": ["—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞", "–Ω–∞–¥–∑–æ—Ä–Ω—ã–µ –∞–∫—Ç—ã", "–∫–æ–Ω—Ç—Ä–æ–ª—å"],
                "norm_refs": [],
                "contexts": ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–ø–æ–≤–µ—Ä–∫–∞", "–¥–æ–ø—É—Å–∫"]
            },
            "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Ñ–∞—Å": {
                "synonyms": ["–∞–Ω—Ç–∏–º–æ–Ω–æ–ø–æ–ª—å–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è", "—Ç–∞—Ä–∏—Ñ—ã", "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω"],
                "norm_refs": [],
                "contexts": ["–Ω–∞–¥–±–∞–≤–∫–∏", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã"]
            },
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–Ω—É–º–∞ –≤—Å —Ä—Ñ": {
                "synonyms": ["—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Å—É–¥–æ–≤", "–ø–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ —Å—É–¥–∞"],
                "norm_refs": [],
                "contexts": ["–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–≤", "–µ–¥–∏–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—É–¥–∞ —Ä—Ñ": {
                "synonyms": ["–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å", "–æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω", "–∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤"],
                "norm_refs": [],
                "contexts": ["—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–≤ –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏", "–∂–∞–ª–æ–±—ã –≥—Ä–∞–∂–¥–∞–Ω"]
            },
            "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏": {
                "synonyms": ["–µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Å—É–¥", "–ø—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞"],
                "norm_refs": [],
                "contexts": ["—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ø—Ä–∞–≤–æ –Ω–∞ –∂–∏–ª–∏—â–µ", "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"]
            },
            "–≥–¥–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ": {
                "synonyms": ["—Å–æ—à–ª–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫–æ–Ω", "–ø–æ –∑–∞–∫–æ–Ω—É", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"],
                "norm_refs": [],
                "contexts": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è"]
            },
            "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É–∫": {
                "synonyms": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161-165", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç—ã", "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"]
            },
            "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": {
                "synonyms": ["–º–µ—Ç–æ–¥–∏—á–∫–∏", "—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤"],
                "norm_refs": [],
                "contexts": ["—Ä–∞—Å—á–µ—Ç—ã", "–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∂–∏–ª—å—Ü–∞–º–∏"]
            },
            "–æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏": {
                "synonyms": ["–∞–Ω–∞–ª–∏–∑ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π", "–æ–±–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–¥–æ–≤"],
                "norm_refs": [],
                "contexts": ["–≤–µ—Ä—Ö–æ–≤–Ω—ã–π —Å—É–¥", "–∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω—ã–µ —Å—É–¥—ã", "–∞—Ä–±–∏—Ç—Ä–∞–∂"]
            },
            "–æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å": {
                "synonyms": ["S–æ–±—â", "–ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–∫–≤–∞—Ä—Ç–∏—Ä–∞ –æ–±—â–∞—è","–æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 16", "–ñ–ö –†–§, —Å—Ç. 17"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏", "–∂–∏–ª–∞—è –∏ –Ω–µ–∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å"]
            },
            "–∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å": {
                "synonyms": ["S–∂–∏–ª", "–ø–ª–æ—â–∞–¥—å –∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è", "–∫–≤–∞—Ä—Ç–∏—Ä–∞ –∂–∏–ª–∞—è", "–∫–≤–∞—Ä—Ç–∏—Ä–∞ –∂–∏–ª–∞—è", "–∂–∏–ª–æ–π –ø–ª–æ—â–∞–¥–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 16", "–ñ–ö –†–§, —Å—Ç. 17"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏", "–∂–∏–ª–∞—è –∏ –Ω–µ–∂–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å"]
            },
            "–¥–æ–ª–µ–≤–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å": {
                "synonyms": ["–æ–±—â–∞—è –¥–æ–ª–µ–≤–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "—Å–æ–≤–º–µ—Å—Ç–Ω–∞—è –¥–æ–ª–µ–≤–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–¥–æ–ª–∏ –∂–∏–ª—å—Ü–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 245", "–ñ–ö –†–§, —Å—Ç. 246"],
                "contexts": ["–ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏–º –∏–º—É—â–µ—Å—Ç–≤–æ–º", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ"]
            }
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "ksrf.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".ksrf.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354")
        queries.append(f"{query} –ñ–ö –†–§")
        queries.append(f"{query} –ú–∏–Ω—Å—Ç—Ä–æ–π –†–æ—Å—Å–∏–∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–° –†–§")
        queries.append(f"{query} –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω—ã–π –°—É–¥ –†–§")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–ñ–ö–•).
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –û—Ç–≤–µ—Ç = –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ + —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        - –ù–∏–∫–∞–∫–∏—Ö –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
        - –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Ç–≤–µ—Ç: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–π —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ñ–ö –†–§, –§–ó, –ü–ü –†–§).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: \n"
            "   - –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            "   - –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ (—Å–ø–∏—Å–∫–æ–º, —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)\n"
            "4. –ù–∏–∫–∞–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ '–ø–æ—Ä—Ç—è–Ω–æ–∫'.\n"
            "5. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä—è–º–æ —É–ø–æ–º—è–Ω—É—Ç—ã –≤ –≤–æ–ø—Ä–æ—Å–µ.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
        )
    
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—É –ø–µ–Ω–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏:**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: –ñ–ö –†–§ —Å—Ç. 155.1, –ü–ü –†–§ ‚Ññ354, –ü–ü –†–§ ‚Ññ329\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è Saiga/LLaMA-3
        system_prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return system_prompt_formatted

class TechnicalAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": {
                "synonyms": ["–Ω–æ—Ä–º–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è", "—Ö–æ–ª–æ–¥–Ω–æ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "–∂–∞—Ä–∫–æ", "–ø–µ—Ä–µ–≥—Ä–µ–≤", "–∑–∞–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2", "–ü–ü –†–§ ‚Ññ354, –ø. 54"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞", "–≤–æ–∑–¥—É—Ö –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏"]
            },
            "–¥–∞–≤–ª–µ–Ω–∏–µ": {
                "synonyms": ["–Ω–∞–ø–æ—Ä", "—Å–ª–∞–±—ã–π –Ω–∞–ø–æ—Ä", "–¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥–µ", "–≥–∏–¥—Ä–∞–≤–ª–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.4", "–ü–ü –†–§ ‚Ññ354, –ø. 54(1)"],
                "contexts": ["–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "–•–í–°", "–ì–í–°", "—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è"]
            },
            "–ª–∏—Ñ—Ç": {
                "synonyms": ["–≥—É–¥–∏—Ç –ª–∏—Ñ—Ç", "—Å–ª–æ–º–∞–ª—Å—è –ª–∏—Ñ—Ç", "–Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ª–∏—Ñ—Ç–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(12)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["—à—É–º", "–æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "—Ä–µ–º–æ–Ω—Ç", "–≥—Ä–∞—Ñ–∏–∫ –¢–û"]
            },
            "–Ω–µ –≥—Ä–µ–µ—Ç": {
                "synonyms": ["—Ö–æ–ª–æ–¥–Ω—ã–π", "–≥—Ä–µ–µ—Ç –ø–ª–æ—Ö–æ", "–±–∞—Ç–∞—Ä–µ—è —Ö–æ–ª–æ–¥–Ω–∞—è", "—Ä–∞–¥–∏–∞—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–≤–æ–∑–¥—É—Ö –≤ –±–∞—Ç–∞—Ä–µ–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(2)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2"],
                "contexts": ["–∑–∞–≤–æ–∑–¥—É—à–∏–≤–∞–Ω–∏–µ", "–∑–∞—Å–æ—Ä", "—Å—Ç–æ—è–∫", "–ò–¢–ü", "—Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞—Å–æ—Å"]
            },
            "–ø—Ä–æ—Ç–µ—á–∫–∞": {
                "synonyms": ["–∑–∞—Å–æ—Ä", "—Ç–µ—á—å", "–∞–≤–∞—Ä–∏—è", "–ø–æ–¥—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–ª–∞–∂–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 59", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["—Ç—Ä—É–±–∞", "—Å—Ç–æ—è–∫", "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "—Ä–µ–≥—Ä–µ—Å—Å –∫ –£–û"]
            },
            "—à—É–º": {
                "synonyms": ["–≥—É–¥–∏—Ç", "–≤–∏–±—Ä–∞—Ü–∏—è", "—Å—Ç—É–∫", "—à—É–º –≤ –ø–æ–¥–≤–∞–ª–µ", "–≤–æ–Ω—è–µ—Ç –≤ –ø–æ–¥—ä–µ–∑–¥–µ"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 8.3", "–ü–ü –†–§ ‚Ññ354, –ø. 54(12)"],
                "contexts": ["–ª–∏—Ñ—Ç", "–Ω–∞—Å–æ—Å", "—Ç–µ–ø–ª–æ–≤–æ–π –ø—É–Ω–∫—Ç", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è"]
            },
            "–≤–æ–¥–∞": {
                "synonyms": ["–Ω–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã", "–Ω–µ—Ç —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã", "–ø–µ—Ä–µ–≥—Ä–µ–≤ –≤–æ–¥—ã", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã", "–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.3-9.4", "–ü–ü –†–§ ‚Ññ354, –ø. 54(1)"],
                "contexts": ["–ì–í–°", "–•–í–°", "–Ω–æ—Ä–º–∞", "–∑–∞–º–µ—Ä", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"]
            },
            "—Å–Ω–∏–ø": {
                "synonyms": ["–≥–æ—Å—Ç", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã", "–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"],
                "norm_refs": [],
                "contexts": ["–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º–æ–Ω—Ç–∞–∂", "–ø—Ä–∏–µ–º–∫–∞", "—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è"]
            },
            "—Å–∞–Ω–ø–∏–Ω": {
                "synonyms": ["–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—ã –æ–±–∏—Ç–∞–Ω–∏—è"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–æ–¥–∞", "–≤–æ–∑–¥—É—Ö", "—à—É–º", "–æ—Å–≤–µ—â–µ–Ω–∏–µ"]
            },
            "–∏—Ç–ø": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–µ–ø–ª–æ–≤–æ–π –ø—É–Ω–∫—Ç", "—Ç–µ–ø–ª–æ–≤–æ–π –ø—É–Ω–∫—Ç", "—Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞—Å–æ—Å", "—Ç—Ä–µ—Ö—Ç—Ä—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "–∑–∞–≤–æ–∑–¥—É—à–∏–≤–∞–Ω–∏–µ": {
                "synonyms": ["–≤–æ–∑–¥—É—Ö –≤ —Å–∏—Å—Ç–µ–º–µ", "–≤–æ–∑–¥—É—Ö –≤ –±–∞—Ç–∞—Ä–µ–µ", "–Ω–µ —Ü–∏—Ä–∫—É–ª–∏—Ä—É–µ—Ç", "—Ö–æ–ª–æ–¥–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã", "—Å—Ç–æ—è–∫–∏", "—Å–ø—É—Å–∫ –≤–æ–∑–¥—É—Ö–∞"]
            },
            "—Ä–µ–≥—Ä–µ—Å—Å –∫ —É–æ": {
                "synonyms": ["–≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–û"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ü–ü –†–§ ‚Ññ354, –ø. 59(5)"],
                "contexts": ["–ø—Ä–æ—Ç–µ—á–∫–∞", "–∞–≤–∞—Ä–∏—è", "—É—â–µ—Ä–± –∏–º—É—â–µ—Å—Ç–≤—É", "–∞–∫—Ç –æ –∑–∞–ª–∏–≤–µ"]
            },
            "–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ—Å—É—à–∏—Ç–µ–ª—å": {
                "synonyms": ["–ø–æ–ª–æ—Ç–µ–Ω—á–∏–∫", "—Å—É—à–∏–ª–∫–∞", "–Ω–µ –≥—Ä–µ–µ—Ç –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ—Å—É—à–∏—Ç–µ–ª—å", "—Ö–æ–ª–æ–¥–Ω—ã–π –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ—Å—É—à–∏—Ç–µ–ª—å"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2", "–ü–ü –†–§ ‚Ññ354, –ø. 54(2)"],
                "contexts": ["–ì–í–°", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—Å—Ç–æ—è–∫", "—Ä–µ–º–æ–Ω—Ç"]
            },
            "—Å—Ç–æ—è–∫": {
                "synonyms": ["–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Ç—Ä—É–±–∞", "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å", "—Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥", "–∫–æ—Ä—Ä–æ–∑–∏—è —Å—Ç–æ—è–∫–∞"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["–∑–∞–º–µ–Ω–∞", "–ø—Ä–æ—Ç–µ—á–∫–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "—Ü–∏—Ä–∫—É–ª—è—Ü–∏—è"]
            },
            "–Ω–æ—Ä–º–∞": {
                "synonyms": ["–Ω–æ—Ä–º–∞—Ç–∏–≤", "–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–ø—Ä–µ–¥–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–π –Ω–æ—Ä–º–∞—Ç–∏–≤"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "—à—É–º", "–æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å", "–≤–ª–∞–∂–Ω–æ—Å—Ç—å"]
            },
            "–∑–∞–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã": {
                "synonyms": ["–∞–∫—Ç –∑–∞–º–µ—Ä–∞", "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 58", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞", "–∂–∞–ª–æ–±–∞", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "rospotrebnadzor.ru", "rosconsumnadzor.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".rospotrebnadzor.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –°–∞–Ω–ü–∏–ù 1.2.3685-21")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 6")
        queries.append(f"{query} –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•")
        queries.append(f"{query} –Ω–æ—Ä–º–∞—Ç–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–æ–ø–ª–µ–Ω–∏—è")
        queries.append(f"{query} –¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã –Ω–æ—Ä–º–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã (–ñ–ö–•).
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –û—Ç–≤–µ—Ç = –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ + –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–°–∞–Ω–ü–∏–ù, –ü–ü –†–§, –ü—Ä–∞–≤–∏–ª–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏)
        - –ñ–µ—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –Ω–∏–∫–∞–∫–∏—Ö "–ø–æ—Ä—Ç—è–Ω–æ–∫"
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ–Ω–∏ (—Ä–µ–¥–∫–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º)
        penalty_keywords = ["–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∏ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥. "
            "–î–∞–≤–∞–π –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–æ—Ä–º (–°–∞–Ω–ü–∏–ù, –ü–ü –†–§, –ü—Ä–∞–≤–∏–ª–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏).\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—Ç: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫—Ä–µ–ø–ª—è–π —Å—Å—ã–ª–∫–∞–º–∏ (–Ω–∞–ø—Ä. [–ü–ü –†–§ ‚Ññ354, –ø. 59], [–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 3.4]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: \n"
            "   - –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            "   - –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Å–ø–∏—Å–∫–æ–º, —Å —Ç–æ—á–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏)\n"
            "   - –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π (–∞–∫—Ç, –∑–∞–º–µ—Ä—ã, –æ–±—Ä–∞—â–µ–Ω–∏–µ, —Å—Ä–æ–∫–∏, –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç)\n"
            "4. –ù–∏–∫–∞–∫–∏—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.\n"
            "5. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä—è–º–æ —Å–ø—Ä–æ—Å—è—Ç.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
        )
    
        # –ë–ª–æ–∫ –ø–µ–Ω–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: –ñ–ö –†–§ —Å—Ç. 155.1, –ü–ü –†–§ ‚Ññ354, –ü–ü –†–§ ‚Ññ329\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–∫–∏
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –∞–∫—Ç—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 6 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥)\n"
            "- –ü–ü –†–§ ‚Ññ491 (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞)\n"
            "- –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∂–∏–ª–∏—â–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ú–∏–Ω—Å—Ç—Ä–æ–π –†–§)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è Saiga/LLaMA-3
        system_prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return system_prompt_formatted

class MeterAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü—Ä–∏–±–æ—Ä—ã —É—á—ë—Ç–∞", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å—á—ë—Ç—á–∏–∫": {
                "synonyms": ["–ø—É", "–∏–ø—É", "–æ–¥–ø—É", "–≤–æ–¥–æ–º–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–æ—Å—á—ë—Ç—á–∏–∫", "–≥–∞–∑–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 5"],
                "contexts": ["—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–∑–∞–º–µ–Ω–∞", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"]
            },
            "–ø–æ–∫–∞–∑–∞–Ω–∏—è": {
                "synonyms": ["—Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–∫—É–¥–∞ –ø–µ—Ä–µ–¥–∞—Ç—å", "–æ—à–∏–±–∫–∞ –≤ –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(1)", "–ü—Ä–∞–≤–∏–ª–∞ —É—á–µ—Ç–∞ –ö–†"],
                "contexts": ["–µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—Å—Ä–æ–∫–∏", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—á–∏"]
            },
            "–ø–æ–≤–µ—Ä–∫–∞": {
                "synonyms": ["—Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–∞–∫—Ç –ø–æ–≤–µ—Ä–∫–∏", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–≤–µ—Ä–∫–∏", "–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 81"],
                "contexts": ["–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"]
            },
            "–∑–∞–º–µ–Ω–∞": {
                "synonyms": ["–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫", "–¥–µ–º–æ–Ω—Ç–∞–∂ —Å—á–µ—Ç—á–∏–∫–∞", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(5)", "–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13"],
                "contexts": ["–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å", "–∑–∞ —á–µ–π —Å—á—ë—Ç", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–Ω–µ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"]
            },
            "–æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∞": {
                "synonyms": ["–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∞", "–æ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏–µ", "–¥–æ–ø—É—Å–∫ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏", "–≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(3)", "–ü—Ä–∞–≤–∏–ª–∞ —É—á–µ—Ç–∞ –ö–†"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "—Å—Ä–æ–∫–∏ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∏", "–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ", "—à—Ç—Ä–∞—Ñ –∑–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫—É"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å": {
                "synonyms": ["–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Å—Ç–∞", "–≤–µ—Ç—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 85", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"]
            },
            "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞": {
                "synonyms": ["–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—É–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)", "–ü–ü –†–§ ‚Ññ354, –ø. 31(1)"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å 2025 –≥–æ–¥–∞", "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ø–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∂–∏–ª—å—Ü–∞"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫": {
                "synonyms": ["—É–º–Ω—ã–π —Å—á–µ—Ç—á–∏–∫", "—Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—á–µ—Ç—á–∏–∫", "—Å –¥–∏—Å–ø–ª–µ–µ–º", "—Å —Ä–∞–¥–∏–æ–º–æ–¥—É–ª–µ–º"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", "—Å—Ä–æ–∫ —Å–ª—É–∂–±—ã", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–ª–∞—Å—Å—É —Ç–æ—á–Ω–æ—Å—Ç–∏"]
            },
            "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫": {
                "synonyms": ["–∫—Ä—ã–ª—å—á–∞—Ç—ã–π", "—Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞", "–±–µ–∑ –¥–∏—Å–ø–ª–µ—è"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["–¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å", "—Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–∑–∞–º–µ–Ω–∞ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π"]
            },
            "–∫—Ç–æ –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å": {
                "synonyms": ["–∑–∞ —á–µ–π —Å—á—ë—Ç", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "—Ñ–æ–Ω–¥ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 158", "–ü–ü –†–§ ‚Ññ354, –ø. 31(5)"],
                "contexts": ["–∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã", "–≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç—Ä–æ—è", "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ", "—É—Ç–µ—Ä—è –ø–ª–æ–º–±—ã"]
            },
            "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è": {
                "synonyms": ["–∞–∫—Ç –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∫–æ–º–∏—Å—Å–∏—è", "–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–∫—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 85", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—Ä–∞–∑–µ—Ü –∞–∫—Ç–∞", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ": {
                "synonyms": ["–Ω–µ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–ª–∏", "–æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ–ø—É—Å–∫–µ", "–Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Å—á—ë—Ç—á–∏–∫", "—Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(3)", "–§–ó ‚Ññ261-–§–ó"],
                "contexts": ["–∑–∞–∫–æ–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º"]
            },
            "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏": {
                "synonyms": ["–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –ø–æ–≤–µ—Ä–∫–∞", "–Ω–µ –ø—Ä–æ—à—ë–ª –ø–æ–≤–µ—Ä–∫—É", "—Å—á—ë—Ç—á–∏–∫ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 81(12)", "–§–ó ‚Ññ102-–§–ó"],
                "contexts": ["–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 1.5", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"]
            },
            "–ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è": {
                "synonyms": ["–ø–æ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è", "—Å–æ–æ–±—â–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "—á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(1)", "–ü—Ä–∞–≤–∏–ª–∞ —É—á–µ—Ç–∞ –ö–†"],
                "contexts": ["—Å—Ä–æ–∫–∏ (—Å 23 –ø–æ 25 —á–∏—Å–ª–æ)", "—Å–ø–æ—Å–æ–±—ã (–ª–∏—á–Ω–æ, –æ–Ω–ª–∞–π–Ω, –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É)", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—á–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "rostech.ru", "rosaccred.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".rostech.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 261")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 5")
        queries.append(f"{query} –ø–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤")
        queries.append(f"{query} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£")
        queries.append(f"{query} –ø—Ä–∞–≤–∏–ª–∞ —É—á–µ—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ú–∏–Ω—Å—Ç—Ä–æ–π")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –ò–ü–£/–û–î–ü–£ (–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è).
        - –ñ–µ—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.
        - –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–§–ó, –ü–ü –†–§, –ø—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è/–†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞).
        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ generate_answer_chat.
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = ["–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–∏–±–æ—Ä–∞–º —É—á–µ—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ –≤—ã–≤–æ–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π —Å—Å—ã–ª–∫–∞–º–∏ ([–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13], [–ü–ü –†–§ ‚Ññ354, –ø. 31], [–§–ó ‚Ññ102-–§–ó, —Å—Ç. 8]).\n"
            "3. –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä—è–º–æ —Å–ø—Ä–æ—Å—è—Ç.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –§–ó > –ü–ü –†–§ > –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è/–†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞ > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏/–ø—É–Ω–∫—Ç—ã)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –î–æ–ª–≥ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë / 300 / 100)\n"
                "- –ë–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–æ):\n"
            "- –§–ó ‚Ññ261-–§–ó ¬´–û–± —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–∏¬ª (—Å—Ç. 13 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£)\n"
            "- –§–ó ‚Ññ102-–§–ó ¬´–û–± –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –µ–¥–∏–Ω—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π¬ª (–ø–æ–≤–µ—Ä–∫–∞)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 5 ‚Äî —Ä–∞—Å—á—ë—Ç, —Ä–∞–∑–¥–µ–ª 31 ‚Äî –ø—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–æ–±—â–µ–µ –∏–º—É—â–µ—Å—Ç–≤–æ, –û–î–ü–£)\n"
            "- –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è –∏ –†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞ (–∞–∫—Ç—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ø–æ–≤–µ—Ä–∫–∞, –∑–∞–º–µ–Ω–∞)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )


class DebtAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–¥–æ–ª–≥": {
                "synonyms": ["–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–Ω–µ—É–ø–ª–∞—Ç–∞", "–ø—Ä–æ—Å—Ä–æ—á–∫–∞", "–Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂", "–∞—Ä–µ–∞—Ä—Å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155", "–ü–ü –†–§ ‚Ññ354, –ø. 69"],
                "contexts": ["–ø—Ä–∏—á–∏–Ω—ã", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ", "—Å–ø–∏—Å–∞–Ω–∏–µ", "–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"]
            },
            "–ø–µ–Ω–∏": {
                "synonyms": ["–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∞–Ω–∫—Ü–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–ü–ü –†–§ ‚Ññ329"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç", "—Ñ–æ—Ä–º—É–ª–∞", "—Å—Ç–∞–≤–∫–∞ –¶–ë", "–ª–∏–º–∏—Ç 9.5%", "–¥–æ 2027 –≥–æ–¥–∞"]
            },
            "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞": {
                "synonyms": ["—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞", "—Å—Ç–∞–≤–∫–∞ 9.5 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–§–ó ‚Ññ44-–§–ó", "–ü–ü –†–§ ‚Ññ329"],
                "contexts": ["—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 2027", "27 —Ñ–µ–≤—Ä–∞–ª—è 2022", "–§–ó ‚Ññ307-–§–ó"]
            },
            "—Ä–∞—Å—Å—Ä–æ—á–∫–∞": {
                "synonyms": ["–æ—Ç—Å—Ä–æ—á–∫–∞", "–ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è", "–≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1(6)", "–ü–ü –†–§ ‚Ññ354, –ø. 69(2)"],
                "contexts": ["—É—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "–∑–∞—è–≤–ª–µ–Ω–∏–µ", "–ª—å–≥–æ—Ç—ã", "—Å—É–±—Å–∏–¥–∏–∏"]
            },
            "–≤–∑—ã—Å–∫–∞–Ω–∏–µ": {
                "synonyms": ["—Å—É–¥ –∑–∞ –¥–æ–ª–≥", "–∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–ø—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 158", "–ì–ü–ö –†–§, –≥–ª. 11"],
                "contexts": ["–¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—Å—Ä–æ–∫–∏ –¥–∞–≤–Ω–æ—Å—Ç–∏", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ"]
            },
            "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏": {
                "synonyms": ["–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ –Ω–µ—É–ø–ª–∞—Ç—É", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥", "–∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–µ–∑–¥", "–∞—Ä–µ—Å—Ç –∏–º—É—â–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 158.1", "–ü–ü –†–§ ‚Ññ354, –ø. 118"],
                "contexts": ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –¥–Ω–µ–π", "–Ω–µ–ø–æ–ª–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ (–æ—Ç–æ–ø–ª–µ–Ω–∏–µ, —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞)"]
            },
            "—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞": {
                "synonyms": ["–æ–ø–ª–∞—Ç–∏–ª –Ω–æ –¥–æ–ª–≥", "–ø–æ—á–µ–º—É –¥–æ–ª–≥", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–æ–ª–≥", "–æ—à–∏–±–∫–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153", "–ü–ü –†–§ ‚Ññ354, –ø. 35"],
                "contexts": ["–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–∂–∞–ª–æ–±–∞ –≤ –£–ö/–ï–ò–†–¶", "—Å—Ä–æ–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
            },
            "—Ñ–æ—Ä–º—É–ª–∞ –ø–µ–Ω–∏": {
                "synonyms": ["–∫–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ–Ω–∏", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏", "—Ä–∞–∑–º–µ—Ä –ø–µ–Ω–∏", "–ø–µ–Ω–∏ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1(1)"],
                "contexts": ["–ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–¥–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏", "—Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"]
            },
            "—Ñ–∑ 44-—Ñ–∑": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω 44-—Ñ–∑", "–∑–∞–∫–æ–Ω –æ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–µ", "–ª–∏–º–∏—Ç –ø–µ–Ω–∏"],
                "norm_refs": ["–§–ó ‚Ññ44-–§–ó –æ—Ç 08.06.2020"],
                "contexts": ["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–æ 9.5%", "–¥–æ 2027 –≥–æ–¥–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ"]
            },
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 329": {
                "synonyms": ["–ø–ø 329", "–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–µ–Ω–∏", "–Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–µ–Ω–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ329 –æ—Ç 06.05.2024"],
                "contexts": ["–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–∏–ª—É", "–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–µ", "–ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥"]
            },
            "–ø—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": {
                "synonyms": ["—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑", "—É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ", "–±–µ–∑ —Å—É–¥–µ–±–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 122"],
                "contexts": ["—Å—É–º–º–∞ –¥–æ 500 —Ç—ã—Å. —Ä—É–±.", "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞", "–æ—Ç–º–µ–Ω–∞ –ø—Ä–∏–∫–∞–∑–∞"]
            },
            "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥": {
                "synonyms": ["–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞", "–Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤", "—É–≥—Ä–æ–∑—ã", "–¥–∞–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 151", "–§–ó ‚Ññ230-–§–ó"],
                "contexts": ["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É"]
            },
            "–∑–∞–ø—Ä–µ—Ç –Ω–∞ –≤—ã–µ–∑–¥": {
                "synonyms": ["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞", "–∑–∞–ø—Ä–µ—Ç –∑–∞ –¥–æ–ª–≥–∏", "—Å—É–¥–µ–±–Ω—ã–µ –ø—Ä–∏—Å—Ç–∞–≤—ã", "—Ñ—Å—Å–ø"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 67"],
                "contexts": ["—Å—É–º–º–∞ –¥–æ–ª–≥–∞ –æ—Ç 10 000 —Ä—É–±.", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—Å–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–µ—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"]
            },
            "–∑–∞–≤—ã—à–µ–Ω–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ": {
                "synonyms": ["–æ—à–∏–±–∫–∞ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏", "–Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –¥–æ–ª–≥", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –¥–æ–ª–≥–∞", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 35", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "—Å—É–¥–µ–±–Ω—ã–π —Å–ø–æ—Ä"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "fssp.gov.ru", "vsrf.ru", "ksrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".fssp.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 155.1")
        queries.append(f"{query} –ü–ü –†–§ 329 –ø–µ–Ω–∏")
        queries.append(f"{query} –§–ó 44-–§–ó –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–æ–ª–≥–∞–º –ñ–ö–•")
        queries.append(f"{query} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞ –∑–∞ –¥–æ–ª–≥–∏ –§–°–°–ü")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, –ø–µ–Ω–∏, —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã, –≤–∑—ã—Å–∫–∞–Ω–∏–µ, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.
        - –ñ–µ—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.
        - –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ñ–ö –†–§, –ü–ü –†–§, –§–ó, –ì–ü–ö).
        –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ generate_answer_chat.
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏",
            "–ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ–Ω–∏"
        ]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –≤–∑—ã—Å–∫–∞–Ω–∏—é –¥–æ–ª–≥–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —Å—Å—ã–ª–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ([–ñ–ö –†–§, —Å—Ç. 155.1], [–ü–ü –†–§ ‚Ññ354, –ø. 118], [–ì–ü–ö –†–§, —Å—Ç. 122]).\n"
            "3. –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > –§–ó > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏)\n"
            "- –†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)\n"
            "- –°—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã –∏ –≤–∑—ã—Å–∫–∞–Ω–∏—è\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –î–æ–ª–≥ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –õ–∏–º–∏—Ç: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–æ):\n"
            "- –ñ–ö –†–§ (—Å—Ç. 155 ‚Äî —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã, —Å—Ç. 155.1 ‚Äî –ø–µ–Ω–∏, —Å—Ç. 158 ‚Äî –≤–∑—ã—Å–∫–∞–Ω–∏–µ)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 8 ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á–µ—Ç–æ–≤)\n"
            "- –ü–ü –†–§ ‚Ññ329 (–ø–æ—Ä—è–¥–æ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–µ–Ω–∏ —Å 2024 –≥–æ–¥–∞)\n"
            "- –§–ó ‚Ññ44-–§–ó (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¶–ë –¥–æ 9.5% –¥–æ 2027 –≥.)\n"
            "- –§–ó ‚Ññ229-–§–ó (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)\n"
            "- –ì–ü–ö –†–§ (–ø—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class DisclosureAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–†–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ": {
                "synonyms": ["–ø—É–±–ª–∏—á–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å", "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–§–ó ‚Ññ209-–§–ó", "–ü–ü –†–§ ‚Ññ731"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "—Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–æ–≤"]
            },
            "–≥–∏—Å –∂–∫—Ö": {
                "synonyms": ["–≥–æ—Å—É—Å–ª—É–≥–∏ –∂–∫—Ö", "–ø–æ—Ä—Ç–∞–ª –∂–∫—Ö", "–≥–∏—Å–∂–∫—Ö", "–µ–¥–∏–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∂–∫—Ö"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "—Å—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏", "–ø–æ—á–µ–º—É –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏"]
            },
            "–æ—Ç—á—ë—Ç": {
                "synonyms": ["—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", "–≥–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç", "–æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞", "–±—é–¥–∂–µ—Ç –¥–æ–º–∞", "—Å–º–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ48/414"],
                "contexts": ["—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞", "—Å—Ä–æ–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "–Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç"]
            },
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": {
                "synonyms": ["–¥–∞–Ω–Ω—ã–µ", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", "–∫–æ–ø–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞", "–ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–±—Ä–∞–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–§–ó ‚Ññ59-–§–ó"],
                "contexts": ["–∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏", "—Å—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞", "–∂–∞–ª–æ–±–∞"]
            },
            "–¥–æ—Å—Ç—É–ø": {
                "synonyms": ["–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥", "—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª", "—Å–∞–π—Ç –£–ö", "–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
            },
            "–ø—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–æ–±—Ä–∞–Ω–∏–π": {
                "synonyms": ["–ø—Ä–æ—Ç–æ–∫–æ–ª –û–°–°", "—Ä–µ—à–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏—è", "–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–∫–æ–ø–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46", "–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["—Å—Ä–æ–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è", "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å"]
            },
            "–Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç –æ—Ç—á–µ—Ç—ã": {
                "synonyms": ["–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ì–ò–° –ñ–ö–•", "–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã", "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "—Å–∫—Ä—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 10", "–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12"],
                "contexts": ["–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "—à—Ç—Ä–∞—Ñ—ã", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—Å—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏": {
                "synonyms": ["—Å—Ä–æ–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "–∫–æ–≥–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—â–∞—Ç—å", "–æ–±–Ω–æ–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "—Å—Ä–æ–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3(3)", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["–µ–∂–µ–º–µ—Å—è—á–Ω–æ", "–µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ", "–µ–∂–µ–≥–æ–¥–Ω–æ", "–≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π", "–≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π"]
            },
            "–∑–∞–≥—Ä—É–∂–∞—Ç—å": {
                "synonyms": ["–≥—Ä—É–∑–∏—Ç—å", "–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "—Ä–∞–∑–º–µ—â–∞—Ç—å", "–∑–∞–≥—Ä—É–∑–∏—Ç—å", "–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "–æ–±–Ω–æ–≤–∏—Ç—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "—Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]
            },
            "–ø–æ—á–µ–º—É –≤ –≥–∏—Å –∂–∫—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö": {
                "synonyms": ["–∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –≥–∏—Å –∂–∫—Ö", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["—Å—Ä–æ–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤"]
            },
            "–ø–ª–∞–Ω —Ä–∞–±–æ—Ç": {
                "synonyms": ["–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç", "–ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥", "–≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω", "–ø–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ48/414"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏", "–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω–µ"]
            },
            "–∫–æ–ø–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞": {
                "synonyms": ["–¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "—Ç–µ–∫—Å—Ç –¥–æ–≥–æ–≤–æ—Ä–∞", "—É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞", "—Å–∫–∞—á–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["–ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ", "—Å—Ä–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "—Ñ–æ—Ä–º–∞—Ç (PDF, –±—É–º–∞–∂–Ω—ã–π)", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]
            },
            "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏": {
                "synonyms": ["–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç", "–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç –∑–∞–ø—Ä–æ—Å", "–Ω–µ –¥–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Å–æ–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ü–ü –†–§ ‚Ññ731, –ø. 10"],
                "contexts": ["–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥": {
                "synonyms": ["—Å—Ç–µ–Ω–¥ –≤ –ø–æ–¥—ä–µ–∑–¥–µ", "–¥–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", "–º–µ—Å—Ç–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–æ—Ñ–ª–∞–π–Ω –¥–æ—Å—Ç—É–ø"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3(1)"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"]
            },
            "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç": {
                "synonyms": ["–∫–∞–±–∏–Ω–µ—Ç –∂–∏–ª—å—Ü–∞", "–æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ø–æ—Ä—Ç–∞–ª –£–ö"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3(2)"],
                "contexts": ["–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "dom.gosuslugi.ru", "gkh354.ru", "gjirf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gosuslugi.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 731")
        queries.append(f"{query} –ì–ò–° –ñ–ö–• —Å—Ä–æ–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
        queries.append(f"{query} –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è 48/414")
        queries.append(f"{query} –§–ó 209-–§–ó —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–∞–∑—É –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –†–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –£–ö/–†–°–û, –ì–ò–° –ñ–ö–•, —Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞—Ç—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
        - –ñ–µ—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        - –¢–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–§–ó, –ü–ü –†–§, –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è)
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ ([–ü–ü –†–§ ‚Ññ731, –ø. 3], [–§–ó ‚Ññ209-–§–ó, —Å—Ç. 161], [–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä]).\n"
            "3. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –§–ó > –ü–ü –†–§ > –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞–¥–∑–æ—Ä–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–Ω–∫—Ç—ã)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∫–∞–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å, –≥–¥–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç)\n"
            "- –°—Ä–æ–∫–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –î–æ–ª–≥ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (—Å–ø—Ä–∞–≤–æ—á–Ω–æ):\n"
            "- –§–ó ‚Ññ209-–§–ó (–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)\n"
            "- –ü–ü –†–§ ‚Ññ731 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ä–æ–∫–∏, –∫–∞–Ω–∞–ª—ã)\n"
            "- –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ48/–ø—Ä, ‚Ññ414 (–≥–æ–¥–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –£–ö)\n"
            "- –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä (–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ì–ò–° –ñ–ö–•)\n"
            "- –§–ó ‚Ññ59-–§–ó (—Å—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≥—Ä–∞–∂–¥–∞–Ω ‚Äî 30 –¥–Ω–µ–π)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class IoTAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("IoT –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–¥–∞—Ç—á–∏–∫": {
                "synonyms": ["—Å–µ–Ω—Å–æ—Ä", "iot-–¥–∞—Ç—á–∏–∫", "—É–º–Ω—ã–π –¥–∞—Ç—á–∏–∫", "–¥–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏", "–¥–∞—Ç—á–∏–∫ –∑–∞–¥—ã–º–ª–µ–Ω–∏—è", "–¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó", "–ü–ü –†–§ ‚Ññ689"],
                "contexts": ["—É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"]
            },
            "—É—Ç–µ—á–∫–∞": {
                "synonyms": ["–ø—Ä–æ—Ç–µ—á–∫–∞", "–∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ", "–∞–≤–∞—Ä–∏—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"],
                "norm_refs": [],
                "contexts": ["–¥–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –£–ö"]
            },
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": {
                "synonyms": ["—É–º–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç", "–¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å", "–Ω–∞–≥—Ä–µ–≤", "–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ"],
                "norm_refs": [],
                "contexts": ["—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è", "—ç–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏", "–≥—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–¢–ü"]
            },
            "iot": {
                "synonyms": ["–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π", "—É–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "smart devices", "—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –ñ–ö–•"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–æ–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", "API", "–≤–µ–±—Ö—É–∫–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]
            },
            "—É–º–Ω—ã–π": {
                "synonyms": ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "connected", "smart home"],
                "norm_refs": [],
                "contexts": ["—Å—á—ë—Ç—á–∏–∫", "—Ç–µ—Ä–º–æ—Å—Ç–∞—Ç", "–∑–∞–º–æ–∫", "—Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"]
            },
            "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": {
                "synonyms": ["–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", "—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                "norm_refs": [],
                "contexts": ["–≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", "–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–æ—Ç—á–µ—Ç—ã"]
            },
            "–∞–≤–∞—Ä–∏—è": {
                "synonyms": ["–ß–ü", "–∏–Ω—Ü–∏–¥–µ–Ω—Ç", "–∞–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∞–≤–∞—Ä–∏–∏"],
                "norm_refs": [],
                "contexts": ["–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", "—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –£–ö", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π", "SMS/Telegram"]
            },
            "—É–º–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤–æ–¥—ã": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –≤–æ–¥—ã", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫", "—Å—á—ë—Ç—á–∏–∫ —Å GSM", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)", "–ü–ü –†–§ ‚Ññ354, –ø. 31"],
                "contexts": ["–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–ò–° –ñ–ö–•", "—Ç–∞—Ä–∏—Ñ—ã", "–∑–∞–º–µ–Ω–∞"]
            },
            "—É–º–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ç–µ–ø–ª–∞": {
                "synonyms": ["—Ç–µ–ø–ª–æ—Å—á—ë—Ç—á–∏–∫", "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Ç–µ–ø–ª–∞", "—Ä–∞–¥–∏–∞—Ç–æ—Ä–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "–ò–ü–£ —Ç–µ–ø–ª–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 5", "–§–ó ‚Ññ261-–§–ó"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É—á—ë—Ç–∞"]
            },
            "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —É–º–Ω—ã–º –¥–æ–º–æ–º": {
                "synonyms": ["—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "API", "–≤–µ–±—Ö—É–∫–∏", "Yandex Smart Home", "Apple HomeKit", "Google Home"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "–ª–æ–∫–∞–ª—å–Ω—ã–µ —à–ª—é–∑—ã"]
            },
            "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º": {
                "synonyms": ["telegram-–±–æ—Ç", "–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ whatsapp", "push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "sms-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "email-—Ä–∞—Å—Å—ã–ª–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó, —Å—Ç. 9", "–ü–ü –†–§ ‚Ññ689"],
                "contexts": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "—Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–æ—Ç–∫–∞–∑ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤"]
            },
            "api –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏": {
                "synonyms": ["–≤–µ–±—Ö—É–∫–∏", "REST API", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API", "SDK"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "rate limiting", "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"]
            },
            "–≤–µ–±—Ö—É–∫–∏": {
                "synonyms": ["webhook", "callback", "HTTP-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (HTTPS, –ø–æ–¥–ø–∏—Å–∏)", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏"]
            },
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": {
                "synonyms": ["–∑–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "GDPR", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó", "–ü–ü –†–§ ‚Ññ689", "–§–ó ‚Ññ149-–§–ó"],
                "contexts": ["—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ø–µ—Ä–µ–¥–∞—á–∞", "—Å–æ–≥–ª–∞—Å–∏–µ", "–∞—É–¥–∏—Ç", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
            },
            "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è": {
                "synonyms": ["–±—É–¥—É—â–µ–µ IoT", "—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ñ–ö–•", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"],
                "norm_refs": [],
                "contexts": ["–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã", "–≥—Ä–∞–Ω—Ç—ã", "–ø–∏–ª–æ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "digital.gov.ru", "roskomnadzor.ru", "fct.gov.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".roskomnadzor.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 152-–§–ó IoT")
        queries.append(f"{query} –ü–ü –†–§ 689 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        queries.append(f"{query} —É–º–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –ñ–ö–•")
        queries.append(f"{query} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API –¥–∞—Ç—á–∏–∫–æ–≤ –ñ–ö–•")
        queries.append(f"{query} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: IoT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: IoT, —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        - –ü—Ä–∞–≤–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –§–ó-152, –ü–ü –†–§ ‚Ññ689
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ IoT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–π —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–§–ó ‚Ññ152-–§–ó, —Å—Ç. 9], [–ü–ü –†–§ ‚Ññ689, –ø. 4]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –§–ó > –ü–ü –†–§ > —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ / –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "  * –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n"
            "  * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (API, –≤–µ–±—Ö—É–∫–∏, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã)\n"
            "  * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (Telegram, WhatsApp, SMS)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "  * –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö [–§–ó ‚Ññ152-–§–ó]\n"
            "  * –°–æ–≥–ª–∞—Å–∏–µ –∂–∏–ª—å—Ü–æ–≤ [–§–ó ‚Ññ152-–§–ó, —Å—Ç. 9]\n"
            "  * –ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ [–ü–ü –†–§ ‚Ññ689]\n"
            "- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é:\n"
            "  * –≠—Ç–∞–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            "  * –ò–∑–±–µ–∂–∞–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤\n"
            "  * –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª\n"
            "- –ü–ü –†–§ ‚Ññ689 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª\n"
            "- –§–ó ‚Ññ149-–§–ó ¬´–û–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ò–¢ –∏ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏¬ª\n"
            "- –§–ó ‚Ññ261-–§–ó (—É–º–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏, IoT)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

        
class MeetingAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–û–±—â–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å–æ–±—Ä–∞–Ω–∏–µ": {
                "synonyms": ["–æ—Å—Å", "–æ–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "–æ—á–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "–∑–∞–æ—á–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 44-48", "–ü–ü –†–§ ‚Ññ416"],
                "contexts": ["–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä", "–ø–æ–≤–µ—Å—Ç–∫–∞", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]
            },
            "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–•", "–∑–∞–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 47", "–ü–ü –†–§ ‚Ññ416, –ø. 12"],
                "contexts": ["–∫–≤–æ—Ä—É–º", "—Ñ–æ—Ä–º–∞ –±—é–ª–ª–µ—Ç–µ–Ω—è", "—Å—Ä–æ–∫–∏", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞"]
            },
            "—Ä–µ—à–µ–Ω–∏–µ": {
                "synonyms": ["–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "—Ä–µ–∑–æ–ª—é—Ü–∏—è", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46", "–ü–ü –†–§ ‚Ññ416, –ø. 21"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∂–∞–ª–æ–±–∞"]
            },
            "–ø—Ä–æ—Ç–æ–∫–æ–ª": {
                "synonyms": ["–∞–∫—Ç —Å–æ–±—Ä–∞–Ω–∏—è", "–∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "–ø—Ä–æ—Ç–æ–∫–æ–ª –û–°–°", "–ø–æ–¥–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(5)", "–ü–ü –†–§ ‚Ññ416, –ø. 21"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ì–ò–° –ñ–ö–•"]
            },
            "–∫–≤–æ—Ä—É–º": {
                "synonyms": ["–∫–≤–æ—Ä—É–º —Å–æ–±—Ä–∞–Ω–∏—è", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", "–ø–æ—Ä–æ–≥ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π", "–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(1)", "–ü–ü –†–§ ‚Ññ416, –ø. 18"],
                "contexts": ["2/3", "50%+1", "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–ø—Ä–æ—Å–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ –¥–æ–ª—è–º"]
            },
            "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è": {
                "synonyms": ["–∫—Ç–æ –º–æ–∂–µ—Ç —Å–æ–∑–≤–∞—Ç—å", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è", "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞", "—Å–æ–≤–µ—Ç –¥–æ–º–∞", "–¢–°–ñ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45(1)", "–ü–ü –†–§ ‚Ññ416, –ø. 3"],
                "contexts": ["–ø—Ä–∞–≤–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—Ñ–æ—Ä–º–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è"]
            },
            "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤": {
                "synonyms": ["—Ñ–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—Å–ø–æ—Å–æ–± –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–ø–æ—á—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ì–ò–° –ñ–ö–•"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45(3)", "–ü–ü –†–§ ‚Ññ416, –ø. 5"],
                "contexts": ["—Å—Ä–æ–∫–∏ (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ 10 –¥–Ω–µ–π)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä—É—á–µ–Ω–∏—è"]
            },
            "–ø–æ–≤–µ—Å—Ç–∫–∞": {
                "synonyms": ["–≤–æ–ø—Ä–æ—Å—ã —Å–æ–±—Ä–∞–Ω–∏—è", "–∞–≥–µ–Ω–¥–∞", "–ø–µ—Ä–µ—á–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤", "—Ç–µ–º—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 6"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏", "–≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"]
            },
            "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ": {
                "synonyms": ["–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(5)", "–ü–ü –†–§ ‚Ññ416, –ø. 25"],
                "contexts": ["—Å—Ä–æ–∫–∏ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è (6 –º–µ—Å—è—Ü–µ–≤)", "–æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π"]
            },
            "—Å–æ–≤–µ—Ç –¥–æ–º–∞": {
                "synonyms": ["–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç–∞", "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞", "–æ—Ä–≥–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ú–ö–î", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ü–ü –†–§ ‚Ññ416, –ø. 3(2)"],
                "contexts": ["–ø—Ä–∞–≤–æ —Å–æ–∑—ã–≤–∞ —Å–æ–±—Ä–∞–Ω–∏—è", "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –£–ö"]
            },
            "—Ç—Å–∂": {
                "synonyms": ["—Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∂–∏–ª—å—è", "–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 135-154"],
                "contexts": ["–ø—Ä–∞–≤–æ —Å–æ–∑—ã–≤–∞ —Å–æ–±—Ä–∞–Ω–∏—è", "–ø–æ–ª–Ω–æ–º–æ—á–∏—è", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"]
            },
            "–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ": {
                "synonyms": ["–≤—Ç–æ—Ä–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "—Å–æ–±—Ä–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–≤–æ—Ä—É–º–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 47(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 19"],
                "contexts": ["—Å—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–Ω–µ –ø–æ–∑–¥–Ω–µ–µ 20 –¥–Ω–µ–π)", "—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –∫–≤–æ—Ä—É–º", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–≤–µ—Å—Ç–∫–∏"]
            },
            "–∞–∫—Ç –ø—Ä–∏—ë–º–∫–∏": {
                "synonyms": ["–ø–æ–¥–ø–∏—Å–∞—Ç—å –∞–∫—Ç", "–ø—Ä–∏—ë–º–∫–∞ —Ä–∞–±–æ—Ç", "—Å–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞", "–≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 44(2)", "–ü–ü –†–§ ‚Ññ416, –ø. 21(3)"],
                "contexts": ["–≤–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–≤–µ—Å—Ç–∫—É", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–∏—ë–º–∫—É", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç–∫–∞–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "—Å–≤—è–∑—å —Å –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–æ–º"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–•", "–æ–Ω–ª–∞–π–Ω –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±—é–ª–ª–µ—Ç–µ–Ω—å", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 47(3)", "–ü–ü –†–§ ‚Ññ416, –ø. 12", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ", "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Å—Ä–æ–∫–∏", "—Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –æ—á–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –û–°–°", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥", "–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(5)", "–ì–ü–ö –†–§, —Å—Ç. 131"],
                "contexts": ["—Å—Ä–æ–∫ 6 –º–µ—Å—è—Ü–µ–≤", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π", "—Ä–æ–ª—å –ì–ñ–ò", "—Å—É–¥–µ–±–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "dom.gosuslugi.ru", "gjirf.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gosuslugi.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 44-48")
        queries.append(f"{query} –ü–ü –†–§ 416")
        queries.append(f"{query} —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ì–ò–° –ñ–ö–•")
        queries.append(f"{query} –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –û–°–° —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞")
        queries.append(f"{query} –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–±—â–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è —Ñ–æ—Ä–º–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –û–±—â–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–≤–æ—Ä—É–º, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ—Ç–æ–∫–æ–ª, –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–∞—Ö. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫—Ä–µ–ø–ª—è–π —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ñ–ö –†–§, —Å—Ç. 45], [–ü–ü –†–§ ‚Ññ416, –ø. 5]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è/–ì–ñ–ò > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –ø—É–Ω–∫—Ç—ã –ü–ü –†–§)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö—Ç–æ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ? (–ñ–ö –†–§, —Å—Ç. 45)\n"
            "  * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (—Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞, —Å–ø–æ—Å–æ–±—ã ‚Äî –ü–ü –†–§ ‚Ññ416, –ø. 5)\n"
            "  * –†–∞—Å—á–µ—Ç –∫–≤–æ—Ä—É–º–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–ñ–ö –†–§, —Å—Ç. 46-47)\n"
            "  * –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–ü–ü –†–§ ‚Ññ416, –ø. 21)\n"
            "  * –û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π (—Å—Ä–æ–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–∏—è, –ø–æ—Ä—è–¥–æ–∫ ‚Äî –ñ–ö –†–§, —Å—Ç. 46(5))\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç. 44-48 ‚Äî –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –û–°–°)\n"
            "- –ü–ü –†–§ ‚Ññ416 ¬´–û –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è¬ª\n"
            "- –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é)\n"
            "- –ì–ü–ö –†–§ (–ø–æ—Ä—è–¥–æ–∫ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –≤ —Å—É–¥–µ)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class CapitalRepairAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∫–∞–ø—Ä–µ–º–æ–Ω—Ç": {
                "synonyms": ["–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "–æ—Ç–∫–∞–ø–∏—Ç–∞–ª–∏—Ç—å", "—Ä–µ–º–æ–Ω—Ç –¥–æ–º–∞", "–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ú–ö–î"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 166-180", "–ü–ü –†–§ ‚Ññ416"],
                "contexts": ["–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Å—Ä–æ–∫–∏", "–ø–µ—Ä–µ–Ω–æ—Å", "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø—Ä–∏–µ–º–∫–∞"]
            },
            "—Å–ø–µ—Ü—Å—á–µ—Ç": {
                "synonyms": ["—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç", "—Å–ø–µ—Ü—Å—á—ë—Ç", "—Å—á—ë—Ç –¥–ª—è –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 170", "–ü–ü –†–§ ‚Ññ416, –ø. 12"],
                "contexts": ["–æ—Ç–∫—Ä—ã—Ç–∏–µ", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "—Å–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"]
            },
            "—Ñ–æ–Ω–¥": {
                "synonyms": ["—Ñ–æ–Ω–¥ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–≤–∑–Ω–æ—Å—ã –Ω–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç", "–Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 169", "–ü–ü –†–§ ‚Ññ416, –ø. 8"],
                "contexts": ["—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"]
            },
            "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞": {
                "synonyms": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", "–≥—Ä–∞—Ñ–∏–∫ —Ä–µ–º–æ–Ω—Ç–∞", "–ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–º–æ–≤", "—Å—Ä–æ–∫–∏ —Ä–µ–º–æ–Ω—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 168", "–ü–ü –†–§ ‚Ññ416, –ø. 5"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–ø–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–æ–≤", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—á–Ω—è —Ä–∞–±–æ—Ç"]
            },
            "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "—ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞", "—Ç—Ä—É–±–∞", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–ì–í–°", "–•–í–°", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "–ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 166(1)", "–ü–ü –†–§ ‚Ññ416, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–º–æ–Ω—Ç", "–∑–∞–º–µ–Ω–∞", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è", "–ø—Ä–∏—ë–º–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è"]
            },
            "—Ñ–∞—Å–∞–¥": {
                "synonyms": ["–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –¥–æ–º–∞", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞—Å–∞–¥", "–æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞—Å–∞–¥", "–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏", "–≤–∞–Ω–¥–∞–ª–∏–∑–º", "—Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ñ–∞—Å–∞–¥–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 166(1)", "–ü–ü –†–§ ‚Ññ416, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["—Ä–µ–º–æ–Ω—Ç —à—Ç—É–∫–∞—Ç—É—Ä–∫–∏", "–ø–æ–∫—Ä–∞—Å–∫–∞", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∞–Ω–¥–∞–ª–∏–∑–º–∞", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"]
            },
            "–ª–∏—Ñ—Ç": {
                "synonyms": ["–∑–∞–º–µ–Ω–∞ –ª–∏—Ñ—Ç–∞", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –ª–∏—Ñ—Ç–∞", "–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ª–∏—Ñ—Ç–∞", "–≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é –ª–∏—Ñ—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 166(1)", "–ü–ü –†–§ ‚Ññ416, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–¢–† –¢–° 011/2011"],
                "contexts": ["—Å—Ä–æ–∫ —Å–ª—É–∂–±—ã", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏—ë–º–∫–∞", "–∞–∫—Ç –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"]
            },
            "–ø–æ–¥–≤–∞–ª": {
                "synonyms": ["—Ü–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ", "—Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–∞–ª–∞", "–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è –ø–æ–¥–≤–∞–ª–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 166(1)", "–ü–ü –†–§ ‚Ññ416, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç—ã", "–¥–æ—Å—Ç—É–ø –¥–ª—è –∂–∏–ª—å—Ü–æ–≤"]
            },
            "–ø–æ–¥—Ä—è–¥—á–∏–∫ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞": {
                "synonyms": ["–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞–±–æ—Ç", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "–ø–æ–¥—Ä—è–¥–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–∑–∞–∫–∞–∑—á–∏–∫ —Ä–∞–±–æ—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 175", "–ü–ü –†–§ ‚Ññ416, –ø. 15"],
                "contexts": ["–≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ –û–°–°", "—Ç–µ–Ω–¥–µ—Ä", "–¥–æ–≥–æ–≤–æ—Ä", "–ø—Ä–∏—ë–º–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ"]
            },
            "–ø—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç": {
                "synonyms": ["–∞–∫—Ç –ø—Ä–∏–µ–º–∫–∏ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–ø–æ–¥–ø–∏—Å–∞—Ç—å –∞–∫—Ç", "—Å–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞", "–≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é", "–∫–æ–º–∏—Å—Å–∏—è –ø–æ –ø—Ä–∏—ë–º–∫–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 176", "–ü–ü –†–§ ‚Ññ416, –ø. 20"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —á–ª–µ–Ω—ã", "—Å—Ä–æ–∫–∏", "–æ—Ç–∫–∞–∑ –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏", "–¥–µ—Ñ–µ–∫—Ç—ã"]
            },
            "–æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤": {
                "synonyms": ["—Å–º–µ—Ç–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", "–±—é–¥–∂–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞", "—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 177", "–ü–ü –†–§ ‚Ññ416, –ø. 22"],
                "contexts": ["–ø—É–±–ª–∏—á–Ω–æ—Å—Ç—å", "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ì–ò–° –ñ–ö–•", "—Å—Ä–æ–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–ø—Ä–∞–≤–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            },
            "–ø–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–æ–≤ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞": {
                "synonyms": ["–ø–æ–º–µ–Ω—è–ª–∏ —Å—Ä–æ–∫–∏", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–æ—Ç—Å—Ä–æ—á–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 168(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 7"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—Ä–µ—à–µ–Ω–∏–µ –û–°–°", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", "–∂–∞–ª–æ–±–∞"]
            },
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä": {
                "synonyms": ["—Ñ–æ–Ω–¥ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞", "–æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—Ä–µ–≥–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 178", "–ü–ü –†–§ ‚Ññ416, –ø. 10"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ø–µ—Ü—Å—á—ë—Ç", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"]
            },
            "—Å—Ç–∞—Ä—à–∏–π –ø–æ –¥–æ–º—É": {
                "synonyms": ["–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç–∞ –¥–æ–º–∞", "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ü–ü –†–§ ‚Ññ416, –ø. 15(3)"],
                "contexts": ["–ø—Ä–∞–≤–∞ –ø—Ä–∏ –ø—Ä–∏—ë–º–∫–µ", "—É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∏—Å—Å–∏–∏", "–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º"]
            },
            "–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç": {
                "synonyms": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å", "–≤–∑–Ω–æ—Å—ã", "–Ω–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç", "–ª—å–≥–æ—Ç—ã –ø–æ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç—É", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154(2)", "–ñ–ö –†–§, —Å—Ç. 169", "–§–ó ‚Ññ271-–§–ó"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Ä–∞—Å—á—ë—Ç —Å—É–º–º—ã", "–ª—å–≥–æ—Ç—ã", "–ø–µ–Ω–∏ –∑–∞ –Ω–µ—É–ø–ª–∞—Ç—É", "—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "reformagkh.ru", "kapremont.rf", "dom.gosuslugi.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".kapremont.rf", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 166-180")
        queries.append(f"{query} –ü–ü –†–§ 416 –∫–∞–ø—Ä–µ–º–æ–Ω—Ç")
        queries.append(f"{query} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç—É")
        queries.append(f"{query} —Å–ø–µ—Ü—Å—á–µ—Ç –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –ú–ö–î
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: —Ä–∞–±–æ—Ç—ã, —Ñ–æ–Ω–¥, –ø–æ–¥—Ä—è–¥—á–∏–∫, –ø—Ä–∏—ë–º, –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—É –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–æ–≤. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫—Ä–µ–ø–ª—è–π —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ñ–ö –†–§, —Å—Ç. 166], [–ü–ü –†–§ ‚Ññ416, –ø. 7]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –ø—É–Ω–∫—Ç—ã –ü–ü –†–§, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç? (–ñ–ö –†–§, —Å—Ç. 166)\n"
            "  * –ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ñ–æ–Ω–¥? (–ñ–ö –†–§, —Å—Ç. 170)\n"
            "  * –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞? (–û–°–°, –ñ–ö –†–§, —Å—Ç. 175)\n"
            "  * –ö–∞–∫ –ø—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—ã? (—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏, –∞–∫—Ç ‚Äî –ñ–ö –†–§, —Å—Ç. 176)\n"
            "  * –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç? (—Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞, –ø—É–±–ª–∏–∫–∞—Ü–∏—è ‚Äî –ñ–ö –†–§, —Å—Ç. 177)\n"
            "  * –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Å—Ä–æ–∫–æ–≤ –∏–ª–∏ –≤–∞–Ω–¥–∞–ª–∏–∑–º–µ? (–∂–∞–ª–æ–±–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç. 166-180 ‚Äî –æ—Å–Ω–æ–≤—ã –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞)\n"
            "- –ü–ü –†–§ ‚Ññ416 ¬´–û –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞¬ª\n"
            "- –§–ó ‚Ññ271-–§–ó ¬´–û –≤–Ω–µ—Å–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ñ–ö –†–§ (–ø–æ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç—É)¬ª\n"
            "- –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞ (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π)\n"
            "- –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è –ø–æ —Ñ–æ—Ä–º–∞–º –æ—Ç—á—ë—Ç–æ–≤ –∏ –∞–∫—Ç–æ–≤\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class EmergencyAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ê–≤–∞—Ä–∏–∏ –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∞–≤–∞—Ä–∏—è": {
                "synonyms": ["—á–ø", "–∏–Ω—Ü–∏–¥–µ–Ω—Ç", "–ø—Ä–æ—Ä—ã–≤", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–ø–æ–ª–æ–º–∫–∞", "–∞–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–≤–æ–¥–∞", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "—Å—Ä–æ–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"]
            },
            "–∑–∞—Ç–æ–ø–∏–ª–æ": {
                "synonyms": ["–∑–∞–ª–∏–ª–æ", "–ø—Ä–æ—Ç–µ—á–∫–∞", "–ø–æ—Ç–æ–ø", "—Ç–µ—á—å", "–∑–∞—Ç–æ–ø–∏–ª–∏ —Å–æ—Å–µ–¥–∏", "–∑–∞–ª–∏–ª–æ —Å–≤–µ—Ä—Ö—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["–∞–∫—Ç –æ –∑–∞–ª–∏–≤–µ", "—Ñ–æ—Ç–æ", "–æ—Ü–µ–Ω–∫–∞ —É—â–µ—Ä–±–∞", "—Ä–µ–≥—Ä–µ—Å—Å –∫ –£–ö", "–≤–æ–∑–º–µ—â–µ–Ω–∏–µ"]
            },
            "–Ω–µ—Ç –≤–æ–¥—ã": {
                "synonyms": ["–±–µ–∑ –≤–æ–¥—ã", "–ø–µ—Ä–µ–±–æ–∏", "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏", "–Ω–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã", "–Ω–µ—Ç —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98(1)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.4"],
                "contexts": ["–∞–≤–∞—Ä–∏—è –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏", "—Ä–µ–º–æ–Ω—Ç —Å—Ç–æ—è–∫–∞", "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç"]
            },
            "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ": {
                "synonyms": ["—Ö–æ–ª–æ–¥–Ω–æ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "–Ω–µ –≥—Ä–µ–µ—Ç", "–±–∞—Ç–∞—Ä–µ—è —Ö–æ–ª–æ–¥–Ω–∞—è", "—Ä–∞–¥–∏–∞—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ–ø–ª–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(2)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2"],
                "contexts": ["–∑–∞–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–∞–≤–∞—Ä–∏—è –Ω–∞ –¶–¢–ü", "–≤–æ–∑–¥—É—Ö –≤ —Å–∏—Å—Ç–µ–º–µ", "—Å—Ä–æ–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"]
            },
            "–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": {
                "synonyms": ["–∑–∞–ø–∞—Ö –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "–ø–æ–¥–≤–∞–ª –∑–∞—Ç–æ–ø–ª–µ–Ω", "—Ç–µ—á—å –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "–æ—Ç–∫–∞—á–∫–∞", "—Å–ª–∏–≤", "—Å—Ç–æ–∫–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98(3)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–∞–≤–∞—Ä–∏—è –Ω–∞ —Å—Ç–æ—è–∫–µ", "–∑–∞—Å–æ—Ä", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è —É–≥—Ä–æ–∑–∞", "—Å—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤"]
            },
            "—É–≥—Ä–æ–∑–∞ –æ–±—Ä—É—à–µ–Ω–∏—è": {
                "synonyms": ["–æ–±—Ä—É—à–µ–Ω–∏–µ", "—Ç—Ä–µ—â–∏–Ω–∞", "—à–æ–≤", "—Å—Ç–µ–Ω–∞", "—Ñ–∞—Å–∞–¥", "–∫–∞–º–µ–Ω—å –ø–∞–¥–∞–µ—Ç", "–≥—Ä–æ–∑–∏—Ç –æ–±–≤–∞–ª–æ–º"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•", "–ü–ü –†–§ ‚Ññ491, –ø. 10"],
                "contexts": ["–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤", "—ç–≤–∞–∫—É–∞—Ü–∏—è", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"]
            },
            "–≤—ã–∑–≤–∞—Ç—å –∞–≤–∞—Ä–∏–π–∫—É": {
                "synonyms": ["–∫—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å", "–∞–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä", "—Ç–µ–ª–µ—Ñ–æ–Ω –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–ª—É–∂–±—ã", "–∞–≤–∞—Ä–∏–π–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ416, –ø. 3", "–ü–ü –†–§ ‚Ññ354, –ø. 98"],
                "contexts": ["–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä", "–µ–¥–∏–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–≤—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏"]
            },
            "–∞–∫—Ç –æ –∑–∞–ª–∏–≤–µ": {
                "synonyms": ["–∞–∫—Ç –∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è", "–∞–∫—Ç –ø—Ä–æ—Ç–µ—á–∫–∏", "–∫–æ–º–∏—Å—Å–∏—è –ø–æ –∑–∞–ª–∏–≤—É", "—Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç", "—Ñ–∏–∫—Å–∞—Ü–∏—è —É—â–µ—Ä–±–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "—Å—Ä–æ–∫–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (1 –¥–µ–Ω—å)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ"]
            },
            "–≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞": {
                "synonyms": ["—Ç—Ä–µ–±—É—é –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", "–ø–æ–¥–∞—Ç—å –≤ —Å—É–¥ –∑–∞ –∑–∞–ª–∏–≤", "–æ—Ü–µ–Ω–∫–∞ —É—â–µ—Ä–±–∞", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–∏—Å–ø–æ—Ä—Ç–∏–ª–∞—Å—å –º–µ–±–µ–ª—å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ì–ö –†–§, —Å—Ç. 1064", "–ü–ü –†–§ ‚Ññ354, –ø. 99"],
                "contexts": ["—Ä–µ–≥—Ä–µ—Å—Å –∫ –£–ö", "–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "—Å—É–¥–µ–±–Ω—ã–π –∏—Å–∫", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω–∞—è —Ç—Ä—É–±–∞": {
                "synonyms": ["–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–æ—è–∫", "–≤–Ω—É—Ç—Ä–∏–¥–æ–º–æ–≤–∞—è —Å–µ—Ç—å", "–≤–≤–æ–¥ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É", "—Ç–µ–ø–ª–æ—Ç—Ä–∞—Å—Å–∞", "–±–æ–π–ª–µ—Ä"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 3", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö", "–∑–∞–º–µ–Ω–∞ –∑–∞ —Å—á—ë—Ç —Ñ–æ–Ω–¥–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–∞–≤–∞—Ä–∏—è –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏"]
            },
            "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã": {
                "synonyms": ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "–¥–∞–≤–ª–µ–Ω–∏–µ", "–Ω–∞–ø–æ—Ä", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.3-9.4", "–ü–ü –†–§ ‚Ññ354, –ø. 54"],
                "contexts": ["–∑–∞–º–µ—Ä", "–∂–∞–ª–æ–±–∞", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞"]
            },
            "—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≥—Ä–∞–º–º–∞": {
                "synonyms": ["–∑–∞—è–≤–∫–∞", "–æ–±—Ä–∞—â–µ–Ω–∏–µ", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞", "–Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 5"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "—Å—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏", "–∂–∞–ª–æ–±–∞"]
            },
            "–ø–ª–µ—Å–µ–Ω—å –ø–æ—Å–ª–µ –∑–∞–ª–∏–≤–∞": {
                "synonyms": ["–æ—Ç–æ—à–ª–∏ –æ–±–æ–∏", "–≥—Ä–∏–±–æ–∫", "—Å—ã—Ä–æ—Å—Ç—å", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è —É–≥—Ä–æ–∑–∞", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∫–∏"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.1", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["–ø—Ä–∏—á–∏–Ω–∞ ‚Äî –∑–∞–ª–∏–≤", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –£–ö –æ–± —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è"]
            },
            "–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ": {
                "synonyms": ["–Ω–µ—Ç —Å–≤–µ—Ç–∞", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", "–∏—Å–∫—Ä–∞", "–∑–∞–ø–∞—Ö –≥–∞—Ä–∏", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–æ–∑–≥–æ—Ä–∞–Ω–∏—è"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•", "–ü–ü –†–§ ‚Ññ354, –ø. 98(2)"],
                "contexts": ["–≤—ã–∑–æ–≤ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "—ç–≤–∞–∫—É–∞—Ü–∏—è", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–æ–¥–∫–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "–ø–æ–∂–∞—Ä": {
                "synonyms": ["–≤–æ–∑–≥–æ—Ä–∞–Ω–∏–µ", "–æ–≥–æ–Ω—å", "–¥—ã–º", "—ç–≤–∞–∫—É–∞—Ü–∏—è", "–ú–ß–°", "–ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ69-–§–ó", "–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"],
                "contexts": ["–≤—ã–∑–æ–≤ 101", "–¥–µ–π—Å—Ç–≤–∏—è –£–ö", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º", "—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"]
            },
            "–∫–æ–º–∏—Å—Å–∞—Ä": {
                "synonyms": ["–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –£–ö", "—á–ª–µ–Ω –∫–æ–º–∏—Å—Å–∏–∏", "–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä", "—Ç–µ—Ö–Ω–∏–∫", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞ –≤—ã–µ–∑–¥–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ–±—è–∑–∞–Ω –ø—Ä–∏–±—ã—Ç—å", "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç", "–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è", "–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "mchs.gov.ru", "rospotrebnadzor.ru", "vsrf.ru", "gjirf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".mchs.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 –∞–≤–∞—Ä–∏–∏")
        queries.append(f"{query} –ü–ü –†–§ 416 –∞–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞")
        queries.append(f"{query} –∞–∫—Ç –æ –∑–∞–ª–∏–≤–µ –ñ–ö–•")
        queries.append(f"{query} —Å—Ä–æ–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ä–∏–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –≤–æ–∑–º–µ—â–µ–Ω–∏—é —É—â–µ—Ä–±–∞ –∑–∞ –∑–∞–ª–∏–≤")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–¥—ã/–æ—Ç–æ–ø–ª–µ–Ω–∏—è, –ø—Ä–æ—Ç–µ—á–∫–∏, —Å—Ä–æ–∫–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–∫—Ç—ã, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, –≤–æ–∑–º–µ—â–µ–Ω–∏–µ —É—â–µ—Ä–±–∞
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤–∞—Ä–∏–π–Ω—ã–º —Å–∏—Ç—É–∞—Ü–∏—è–º –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ü–ü –†–§ ‚Ññ354, –ø. 98], [–ñ–ö –†–§, —Å—Ç. 157]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ü–ü –†–§ > –ñ–ö –†–§ > –°–∞–Ω–ü–∏–ù > –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ø—É–Ω–∫—Ç—ã –ü–ü –†–§, –ñ–ö –†–§, –°–∞–Ω–ü–∏–ù)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö—É–¥–∞ –∑–≤–æ–Ω–∏—Ç—å –∏ –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É? (–ü–ü –†–§ ‚Ññ416, –ø. 3)\n"
            "  * –°—Ä–æ–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–æ—Ç–æ–ø–ª–µ–Ω–∏–µ ‚Äî 1 —Å—É—Ç–∫–∏, –≤–æ–¥–∞ ‚Äî 4 —á–∞—Å–∞ ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 98)\n"
            "  * –ö–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç –∞–≤–∞—Ä–∏–∏ (—Ñ–æ—Ç–æ, –∞–∫—Ç, —Å–≤–∏–¥–µ—Ç–µ–ª–∏ ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 99)\n"
            "  * –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –∏–ª–∏ –≤–æ–∑–º–µ—Å—Ç–∏—Ç—å —É—â–µ—Ä–± (–ñ–ö –†–§, —Å—Ç. 157, –ì–ö –†–§, —Å—Ç. 1064)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø. 98-99 ‚Äî –∞–≤–∞—Ä–∏–∏, —Å—Ä–æ–∫–∏, –∞–∫—Ç—ã)\n"
            "- –ü–ü –†–§ ‚Ññ416 (–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–ª—É–∂–±)\n"
            "- –ñ–ö –†–§ (—Å—Ç. 157 ‚Äî –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç, —Å—Ç. 161 ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã, –≤–æ–∑–¥—É—Ö–∞, —à—É–º–∞)\n"
            "- –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∂–∏–ª–∏—â–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞ (–ú–∏–Ω—Å—Ç—Ä–æ–π –†–§)\n"
            "- –ì–ö –†–§ (—Å—Ç. 1064 ‚Äî –≤–æ–∑–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–¥–∞)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class ContractorAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ø–æ–¥—Ä—è–¥—á–∏–∫": {
                "synonyms": ["–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "–±—Ä–∏–≥–∞–¥–∞", "–º–∞—Å—Ç–µ—Ä", "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫", "—ç–ª–µ–∫—Ç—Ä–∏–∫"],
                "norm_refs": ["–ì–ö –†–§, –≥–ª. 37", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["–≤—ã–±–æ—Ä", "–¥–æ–≥–æ–≤–æ—Ä", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–∂–∞–ª–æ–±–∞", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ", "–≥–∞—Ä–∞–Ω—Ç–∏—è"]
            },
            "–≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞": {
                "synonyms": ["–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–≤—ã–∑–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±—Ä–∏–≥–∞–¥—É", "—Å—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤", "–≤—ã–∑–æ–≤–∏—Ç–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—Å—Ä–æ–∫–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏", "—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≥—Ä–∞–º–º–∞", "–æ—Ç–∫–∞–∑ –≤ –≤—ã–∑–æ–≤–µ"]
            },
            "–¥–æ–≥–æ–≤–æ—Ä": {
                "synonyms": ["–¥–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º", "—É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 702-729", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "—Ü–µ–Ω–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ"]
            },
            "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç": {
                "synonyms": ["—Ö–∞–ª–∞—Ç–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∞", "–Ω–µ —É—Å—Ç—Ä–∞–Ω–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É", "–ø–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É", "–±—Ä–∞–∫", "–¥–µ—Ñ–µ–∫—Ç"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 723", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["–∞–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ä–µ–º–æ–Ω—Ç"]
            },
            "–∞–∫—Ç –ø—Ä–∏–µ–º–∫–∏": {
                "synonyms": ["–∞–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç", "–ø—Ä–∏–µ–º–∫–∞-–ø–µ—Ä–µ–¥–∞—á–∞", "–ø–æ–¥–ø–∏—Å–∞—Ç—å –∞–∫—Ç", "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω", "–∑–∞–º–µ—á–∞–Ω–∏—è"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 753", "–ü–ü –†–§ ‚Ññ416, –ø. 20"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç", "–æ—Ç–∫–∞–∑ –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏"]
            },
            "–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫": {
                "synonyms": ["–≥–∞—Ä–∞–Ω—Ç–∏—è", "—Å—Ä–æ–∫ –≥–∞—Ä–∞–Ω—Ç–∏–∏", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫—É", "—Ç—Ä–µ–±—É—é —É—Å—Ç—Ä–∞–Ω–∏—Ç—å", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 724", "–ü–ü –†–§ ‚Ññ416, –ø. 21"],
                "contexts": ["–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–Ω–∞—á–∞–ª–æ —Ç–µ—á–µ–Ω–∏—è", "–ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞": {
                "synonyms": ["–Ω–µ —Ä–µ—à–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞", "–æ–±—Ä–∞—â–∞–ª–∏—Å—å", "–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç", "–Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä", "—Ç—Ä–µ–±—É—é –∑–∞–º–µ–Ω—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ì–ö –†–§, —Å—Ç. 723"],
                "contexts": ["–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –£–ö/–¢–°–ñ", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ì–ñ–ò", "—Å—É–¥–µ–±–Ω—ã–π –∏—Å–∫"]
            },
            "–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç": {
                "synonyms": ["–ø–ª–∞–Ω —Ä–∞–±–æ—Ç", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–∫–æ–≥–¥–∞ –ø—Ä–∏–µ–¥—É—Ç", "—Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "—Ä–∞–±–æ—Ç—ã –≤–æ –¥–≤–æ—Ä–µ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 708", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –∂–∏–ª—å—Ü–∞–º–∏", "–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞", "—Å—Ä—ã–≤ —Å—Ä–æ–∫–æ–≤"]
            },
            "—Ñ–∞—Å–∞–¥ –¥–æ–º–∞": {
                "synonyms": ["–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞—Å–∞–¥", "–æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞—Å–∞–¥", "–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏", "–≤–∞–Ω–¥–∞–ª–∏–∑–º", "—Ä–µ–∫–ª–∞–º–∞ –Ω–∞ —Ñ–∞—Å–∞–¥–µ", "–Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ñ–∞—Å–∞–¥–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ü–ü –†–§ ‚Ññ491, –ø. 3"],
                "contexts": ["—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "—Å–∞–º–æ–≤–æ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é", "—à—Ç—Ä–∞—Ñ—ã"]
            },
            "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏": {
                "synonyms": ["–Ω–µ—Ç –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "—Ä–µ–±–µ–Ω–æ–∫", "–ø–æ–∂–∏–ª–æ–π", "—Å–æ—Ü–∑–∞—â–∏—Ç–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["—Å—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤", "–ª—å–≥–æ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã": {
                "synonyms": ["–¥–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è", "–∫–æ—à–µ–Ω–∏–µ", "–º—ã—Ç—å–µ –æ–∫–æ–Ω", "–ª–∞–≤–æ—á–∫–∏", "—É—Ä–Ω—ã", "–≤—ã–≤–æ–∑ —à–∏–Ω", "–ø–æ–∫—Ä—ã—à–∫–∏"],
                "norm_refs": ["–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", "–∂–∞–ª–æ–±—ã –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ", "—Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã": {
                "synonyms": ["–∑–∞–º–µ–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞", "–ø—Ä–æ—á–∏—Å—Ç–∫–∞ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "—Ä–µ–º–æ–Ω—Ç –∫—Ä–æ–≤–ª–∏", "–∑–∞–º–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏", "—Ç—Ä—É–±–∞ –∑–∞–±–∏—Ç–∞"],
                "norm_refs": ["–ì–ö –†–§, –≥–ª. 37", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–ª–∏—Ü–µ–Ω–∑–∏—è", "–°–†–û", "–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–ø—Ä–∏—ë–º–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è"]
            },
            "—Å–∞–º–æ–≤–æ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞": {
                "synonyms": ["–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", "—Å–ø—É—Ç–Ω–∏–∫–æ–≤–∞—è –∞–Ω—Ç–µ–Ω–Ω–∞", "–≤–∏–¥–µ–æ–∫–∞–º–µ—Ä–∞", "–±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è", "–Ω–∞ —Ñ–∞—Å–∞–¥–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ü–ü –†–§ ‚Ññ491, –ø. 3(4)"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è", "–¥–µ–º–æ–Ω—Ç–∞–∂ –∑–∞ —Å—á—ë—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è", "—à—Ç—Ä–∞—Ñ", "—Å—É–¥–µ–±–Ω—ã–π –∑–∞–ø—Ä–µ—Ç"]
            },
            "—Ñ–æ—Ç–æ –∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞": {
                "synonyms": ["—Ñ–æ—Ç–æ", "–≤–ª–æ–∂–µ–Ω–∏–∏", "–≤–∏–¥–µ–æ", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–∞–∫—Ç —Å —Ñ–æ—Ç–æ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 753", "–ì–ü–ö –†–§, —Å—Ç. 67"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏—ë–º–∞", "—Ñ–∏–∫—Å–∞—Ü–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –≤ —Å—É–¥–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"]
            },
            "–∞–¥—Ä–µ—Å –∏ –ª–æ–∫–∞—Ü–∏—è": {
                "synonyms": ["–ø–æ–¥—ä–µ–∑–¥", "–¥–æ–º", "–∞–¥—Ä–µ—Å", "—Å—Ç–µ–Ω–∞", "—à–æ–≤", "–º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 708"],
                "contexts": ["—Ç–æ—á–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ", "–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–∂–∞–ª–æ–±–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏", "–≥–µ–æ–ø—Ä–∏–≤—è–∑–∫–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "gjirf.ru", "vsrf.ru", "sro.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".sro.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ì–ö –†–§ –≥–ª–∞–≤–∞ 37 –ø–æ–¥—Ä—è–¥")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 162 –¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        queries.append(f"{query} –ü–ü –†–§ 416 –ø—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Ä–µ–º–æ–Ω—Ç—É –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º")
        queries.append(f"{query} –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫ —Ä–µ–º–æ–Ω—Ç —Ñ–∞—Å–∞–¥–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –≤—ã–∑–æ–≤, —Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–∞–±–æ—Ç, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –∞–∫—Ç—ã, –≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏ –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ì–ö –†–§, —Å—Ç. 723], [–ü–ü –†–§ ‚Ññ416, –ø. 7]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ì–ö –†–§ > –ñ–ö –†–§ > –ü–ü –†–§ > –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –∑–∞–∫–æ–Ω—É)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ç—å–∏ –ì–ö –†–§, –ñ–ö –†–§, –ü–ü –†–§)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–∑–æ–≤ –∏–ª–∏ –∑–∞—è–≤–∫—É? (–ñ–ö –†–§, —Å—Ç. 161)\n"
            "  * –ö–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É (—Ñ–æ—Ç–æ, –∞–∫—Ç, —Å–≤–∏–¥–µ—Ç–µ–ª–∏ ‚Äî –ì–ö –†–§, —Å—Ç. 753)\n"
            "  * –ö–∞–∫ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫—É (—Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞ ‚Äî –ì–ö –†–§, —Å—Ç. 723)\n"
            "  * –ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∞–∫—Ç (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç ‚Äî –ü–ü –†–§ ‚Ññ416)\n"
            "  * –ö–∞–∫ –≤–∑—ã—Å–∫–∞—Ç—å —É–±—ã—Ç–∫–∏ –∏–ª–∏ –¥–æ–±–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥–µ–ª–∫–∏ (—Å—É–¥, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ ‚Äî –ì–ö –†–§, —Å—Ç. 723, 724)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ (–ì–ª–∞–≤–∞ 37 ‚Äî –ü–æ–¥—Ä—è–¥, —Å—Ç. 702-729)\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç. 161 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö, —Å—Ç. 162 ‚Äî –¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)\n"
            "- –ü–ü –†–§ ‚Ññ416 (–ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏—ë–º–∫–∏ —Ä–∞–±–æ—Ç)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Å—Ä–æ–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ä–∏–π)\n"
            "- –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∂–∏–ª–∏—â–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class HistoryAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∏—Å—Ç–æ—Ä–∏—è": {
                "synonyms": ["–∞—Ä—Ö–∏–≤", "–ª–æ–≥", "—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è", "–ø—Ä–æ—à–ª—ã–µ –∑–∞—è–≤–∫–∏", "—Ä–∞–Ω–µ–µ –ø–æ–¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ209-–§–ó", "–ü–ü –†–§ ‚Ññ731, –ø. 3"],
                "contexts": ["—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–¥–æ—Å—Ç—É–ø", "—Å—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è", "—ç–∫—Å–ø–æ—Ä—Ç", "—É–¥–∞–ª–µ–Ω–∏–µ"]
            },
            "–∫–æ–≥–¥–∞": {
                "synonyms": ["–¥–∞—Ç–∞", "–≤—Ä–µ–º—è", "—Å—Ä–æ–∫", "–ø–µ—Ä–∏–æ–¥", "–≤—á–µ—Ä–∞", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "–≤ –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3(3)", "–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12"],
                "contexts": ["—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ", "–ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–∏–æ–¥—É", "–∏—Å—Ç–æ—Ä–∏—è –∑–∞ –≥–æ–¥", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ä–æ–∫–∞–º"]
            },
            "–±—ã–ª–æ": {
                "synonyms": ["–ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ", "—Å–ª—É—á–∞–ª–æ—Å—å", "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏", "—É—á–∏—Ç—ã–≤–∞–ª–∏"],
                "norm_refs": ["–§–ó ‚Ññ209-–§–ó", "–ü–ü –†–§ ‚Ññ731"],
                "contexts": ["–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–∞–∫—Ç—ã", "—Å–∫—Ä–∏–Ω—à–æ—Ç—ã"]
            },
            "–ø—Ä–æ—à–ª—ã–π": {
                "synonyms": ["–ø—Ä–µ–¥—ã–¥—É—â–∏–π", "—Ä–∞–Ω–µ–µ", "—Å—Ç–∞—Ä—ã–π", "–∑–∞–∫—Ä—ã—Ç—ã–π", "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–∂–∞–ª–æ–±—ã –ø–æ –ø—Ä–æ—à–ª—ã–º –∑–∞—è–≤–∫–∞–º"]
            },
            "–¥–µ–ª–∞–ª–∏": {
                "synonyms": ["–≤—ã–ø–æ–ª–Ω—è–ª–∏", "–ø—Ä–æ–≤–æ–¥–∏–ª–∏", "—É—Å—Ç—Ä–∞–Ω—è–ª–∏", "—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏", "–æ–±—Å–ª—É–∂–∏–≤–∞–ª–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç", "—Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç", "–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫"]
            },
            "—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏": {
                "synonyms": ["—á–∏–Ω–∏–ª–∏", "–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏", "–∑–∞–º–µ–Ω—è–ª–∏", "–æ–±–Ω–æ–≤–ª—è–ª–∏", "–º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 753", "–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["–ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "—Å—Ä–æ–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"]
            },
            "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç": {
                "synonyms": ["–ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥", "–≥–∏—Å –∂–∫—Ö", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Å–∞–π—Ç —É–∫", "–æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ø. 3(2)", "–§–ó ‚Ññ209-–§–ó"],
                "contexts": ["–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏", "—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–∂–∞–ª–æ–±—ã"]
            },
            "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —É–∫": {
                "synonyms": ["–∑–∞–ø—Ä–æ—Å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é", "–ø–∏—Å—å–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–∂–∞–ª–æ–±–∞"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ü–ü –†–§ ‚Ññ731, –ø. 10"],
                "contexts": ["—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ (30 –¥–Ω–µ–π)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "–æ—Ç–∫–∞–∑ –≤ –≤—ã–¥–∞—á–µ", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "—Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏": {
                "synonyms": ["–≤ —Ä–∞–±–æ—Ç–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ", "–æ–∂–∏–¥–∞–µ—Ç", "–∑–∞–∫—Ä—ã—Ç–æ", "–ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–ø—Ä–æ—Å—Ä–æ—á–∫–∏"]
            },
            "–¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º": {
                "synonyms": ["–ø—Ä–∞–≤–æ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö", "–∫–æ–ø–∏—è –∏—Å—Ç–æ—Ä–∏–∏", "–≤—ã–≥—Ä—É–∑–∫–∞", "—ç–∫—Å–ø–æ—Ä—Ç –≤ Excel"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–§–ó ‚Ññ152-–§–ó, —Å—Ç. 8"],
                "contexts": ["—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å"]
            },
            "—Å–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞": {
                "synonyms": ["crm –∂–∫—Ö", "–¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", "1—Å –∂–∫—Ö", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –±–∞–∑–∞ —É–∫", "erz", "–µ–≥–∏—Å–∂–∫—Ö"],
                "norm_refs": [],
                "contexts": ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–ò–° –ñ–ö–•", "—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞—É–¥–∏—Ç", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]
            },
            "–∂–∞–ª–æ–±–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏": {
                "synonyms": ["–Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç", "—Å–∫—Ä—ã–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ", "–Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏", "–æ—à–∏–±–∫–∏ –≤ –∑–∞–ø–∏—Å—è—Ö", "—Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ü–ü –†–§ ‚Ññ731, –ø. 10"],
                "contexts": ["–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "—à—Ç—Ä–∞—Ñ—ã –¥–ª—è –£–ö", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—ç–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏": {
                "synonyms": ["—Å–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "–ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–∏—Å–∫—É", "—Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å", "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å pdf", "–≤—ã–≥—Ä—É–∑–∏—Ç—å –≤ excel"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["—Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
            },
            "—Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è": {
                "synonyms": ["–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", "—É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", "–¥–∞–≤–Ω–æ—Å—Ç—å", "–ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è", "—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó, —Å—Ç. 21", "–ü–ü –†–§ ‚Ññ731, –ø. 3(3)"],
                "contexts": ["3 –≥–æ–¥–∞", "5 –ª–µ—Ç", "–±–µ—Å—Å—Ä–æ—á–Ω–æ", "–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "dom.gosuslugi.ru", "gjirf.ru", "roscomnadzor.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gosuslugi.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 209-–§–ó –∏—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫")
        queries.append(f"{query} –ü–ü –†–§ 731 —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        queries.append(f"{query} –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –ì–ò–° –ñ–ö–•")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–∞–∑—É –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫")
        queries.append(f"{query} —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ –≤ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫, –ì–ò–° –ñ–ö–•, –ø–æ—Ä—è–¥–æ–∫ –∑–∞–ø—Ä–æ—Å–∞, —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12], [–ü–ü –†–§ ‚Ññ731, –ø. 3]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –§–ó > –ü–ü –†–§ > –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –£–ö > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –∑–∞–∫–æ–Ω—É)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–§–ó, –ü–ü –†–§, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ì–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ (–ì–ò–° –ñ–ö–•, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ –£–ö ‚Äî –ü–ü –†–§ ‚Ññ731, –ø. 3)\n"
            "  * –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç. 12)\n"
            "  * –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–∞—Ç–∞, —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –ü–ü –†–§ ‚Ññ731, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1)\n"
            "  * –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç (–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É, —Å—É–¥ ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç. 12)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ209-–§–ó ¬´–û —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ñ–ö–•¬ª\n"
            "- –ü–ü –†–§ ‚Ññ731 ¬´–û —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏¬ª\n"
            "- –§–ó ‚Ññ59-–§–ó ¬´–û –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω¬ª\n"
            "- –§–ó ‚Ññ152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class FallbackAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("Fallback", keywords)

        # –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –≥–ª—É–ø—ã—Ö/–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è
        self.trigger_phrases = [
            "–¥—É—Ä–∞–∫", "—Ç—É–ø–æ–π", "–∏–¥–∏–æ—Ç", "—á–º–æ", "–ª–æ—Ö", "–ø—Ä–∏–¥—É—Ä–æ–∫", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–∫—Ç–æ —Ç—ã", "—Ç—ã –∫—Ç–æ", "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "–¥–ª—è —á–µ–≥–æ —Ç—ã",
            "–∑–∞—á–µ–º —Ç—ã", "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç", "—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç", "—Ç—ã –∂–∏–≤–æ–π", "—Ç—ã —á–µ–ª–æ–≤–µ–∫",
            "–ø–æ—á–µ–º—É —Ç—ã", "—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "hello", "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π",
            "—ç–π", "–æ–π", "–∞–≥–∞", "–æ–∫", "–ª–∞–¥–Ω–æ", "–ø–æ–Ω—è—Ç–Ω–æ", "—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        ]

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∂–∫—Ö": {
                "synonyms": ["–æ—Ä–≥–∞–Ω—ã –∂–∫—Ö", "—Å—Ñ–µ—Ä–∞ –∂–∫—Ö", "–∂–∫—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞", "–∫—Ç–æ –≤ –∂–∫—Ö", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∂–∫—Ö"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–§–ó ‚Ññ189-–§–ó"],
                "contexts": ["—É–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", "–¢–°–ñ", "–†–°–û", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã"]
            },
            "—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è": {
                "synonyms": ["—É–∫", "—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–∂—ç–∫", "–∂–∏–ª–∏—â–Ω–∞—è –∫–æ–Ω—Ç–æ—Ä–∞", "—É–æ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161-165"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–∫–æ–Ω—Ç—Ä–æ–ª—å"]
            },
            "—Ç—Å–∂": {
                "synonyms": ["—Ç–æ–≤–∞—Ä–∏—â–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∂–∏–ª—å—è", "—Ç—Å–Ω", "–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤", "–∂—Å–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 135-154"],
                "contexts": ["—Å–æ–∑–¥–∞–Ω–∏–µ", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ–º", "–ø–æ–ª–Ω–æ–º–æ—á–∏—è", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å"]
            },
            "—Ä–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": {
                "synonyms": ["—Ä—Å–æ", "–ø–æ—Å—Ç–∞–≤—â–∏–∫", "–≤–æ–¥–æ–∫–∞–Ω–∞–ª", "—Ç–µ–ø–ª–æ—Å–µ—Ç—å", "—ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç", "–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["–¥–æ–≥–æ–≤–æ—Ä—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–∞–≤–∞—Ä–∏–∏"]
            },
            "–≥–æ—Å–∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—è": {
                "synonyms": ["–≥–∂–∏", "–∂–∏–ª–∏—â–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∂–∏–ª–∏—â–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –æ—Ä–≥–∞–Ω"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–∂–∞–ª–æ–±—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∏", "—à—Ç—Ä–∞—Ñ—ã", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "—Ñ–æ–Ω–¥ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞": {
                "synonyms": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä", "—Ñ–æ–Ω–¥ —Å–æ–¥–µ–π—Å—Ç–≤–∏—è —Ä–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∂–∫—Ö", "–æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 178", "–§–ó ‚Ññ271-–§–ó"],
                "contexts": ["—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞", "—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ø–µ—Ü—Å—á—ë—Ç"]
            },
            "–º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç": {
                "synonyms": ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "–º–µ—Å—Ç–Ω–æ–µ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–≥–æ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "—Ä–∞–π–æ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 15", "–§–ó ‚Ññ131-–§–ó"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "–ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã", "–ª—å–≥–æ—Ç—ã"]
            },
            "—Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä": {
                "synonyms": ["—Å–∞–Ω—ç–ø–∏–¥—Å—Ç–∞–Ω—Ü–∏—è", "—Å—ç—Å", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –Ω–∞–¥–∑–æ—Ä", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21", "–§–ó ‚Ññ52-–§–ó"],
                "contexts": ["–∑–∞–º–µ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã", "–∂–∞–ª–æ–±—ã"]
            },
            "–º—á—Å": {
                "synonyms": ["–ø–æ–∂–∞—Ä–Ω—ã–π –Ω–∞–¥–∑–æ—Ä", "–ø–æ–∂–∞—Ä–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω—ã–π —Ä–µ–∂–∏–º"],
                "norm_refs": ["–§–ó ‚Ññ69-–§–ó", "–ü–ü –†–§ ‚Ññ390"],
                "contexts": ["–ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "–ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "—ç–≤–∞–∫—É–∞—Ü–∏—è"]
            },
            "–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞": {
                "synonyms": ["–Ω–∞–¥–∑–æ—Ä", "–∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", "–≥–µ–Ω–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞"],
                "norm_refs": ["–§–ó ‚Ññ2202-1", "–ñ–ö –†–§, —Å—Ç. 20"],
                "contexts": ["–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ –∂–∏–ª—å—Ü–æ–≤", "–±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –£–ö", "–∂–∞–ª–æ–±—ã", "–≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"]
            },
            "–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞": {
                "synonyms": ["–º–∏–Ω—Å—Ç—Ä–æ–π", "–º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –∂–∫—Ö", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ—Ä–≥–∞–Ω", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã"],
                "norm_refs": [],
                "contexts": ["—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è", "–ø—Ä–∏–∫–∞–∑—ã", "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "—Ä–µ—Ñ–æ—Ä–º—ã –ñ–ö–•"]
            },
            "—Ç–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º", "—Ä—Å—Ç", "—Ç–∞—Ä–∏—Ñ–Ω—ã–π –æ—Ä–≥–∞–Ω", "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç —Ç–∞—Ä–∏—Ñ–æ–≤", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", "–∂–∞–ª–æ–±—ã –Ω–∞ —Ç–∞—Ä–∏—Ñ—ã", "–§–ì–ò–° –¢–∞—Ä–∏—Ñ"]
            },
            "—á—Ç–æ —Ç–∞–∫–æ–µ": {
                "synonyms": ["–æ–±—ä—è—Å–Ω–∏", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ", "–æ—Å–Ω–æ–≤—ã –∂–∫—Ö", "–∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞", "–∫—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è", "—Ñ—É–Ω–∫—Ü–∏–∏", "–ø–æ–ª–Ω–æ–º–æ—á–∏—è"],
                "norm_refs": [],
                "contexts": ["–æ–±—É—á–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", "–≤–≤–æ–¥–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–∫—Ç–æ —Ç–∞–∫–æ–π": {
                "synonyms": ["—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è", "—Ä–æ–ª—å", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ç–∞—Ç—É—Å"],
                "norm_refs": [],
                "contexts": ["–æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –≤ –ñ–ö–•"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò generate_fallback_response, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "mchs.gov.ru", "proc.gov.ru", "rosconsumnadzor.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".mchs.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö–• —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
        queries.append(f"{query} –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö")
        queries.append(f"{query} —Ñ—É–Ω–∫—Ü–∏–∏ –ì–ñ–ò")
        queries.append(f"{query} —á—Ç–æ —Ç–∞–∫–æ–µ –†–°–û")
        queries.append(f"{query} –æ—Å–Ω–æ–≤—ã –∂–∏–ª–∏—â–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def matches(self, query: str) -> bool:
        q = query.lower()
        # üÜï –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ª—é–±–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ò–õ–ò —Ç—Ä–∏–≥–≥–µ—Ä ‚Äî –ª–æ–≤–∏–º
        if any(kw in q for kw in self.keywords):
            return True
        if any(phrase in q for phrase in self.trigger_phrases):
            return True
        # üÜï –¢–∞–∫–∂–µ –ª–æ–≤–∏–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (1-2 —Å–ª–æ–≤–∞), –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–µ –∞–≥–µ–Ω—Ç—ã
        if len(q.split()) <= 2:
            return True
        return False

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç ‚Äî –æ—Ç–≤–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ LLM –≤ generate_fallback_response
        return ""

    def generate_fallback_response(self, query: str) -> str:
        q = query.lower()

        # üö´ –ì—Ä—É–±–æ—Å—Ç—å / –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è ‚Äî —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if any(word in q for word in ["–¥—É—Ä–∞–∫", "—Ç—É–ø–æ–π", "–∏–¥–∏–æ—Ç", "—á–º–æ", "–ª–æ—Ö", "–ø—Ä–∏–¥—É—Ä–æ–∫"]):
            return (
                "–Ø ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ñ–ö–•. –ú–µ–Ω—è –º–æ–∂–Ω–æ –∫—Ä–∏—Ç–∏–∫–æ–≤–∞—Ç—å, –Ω–æ –ª—É—á—à–µ ‚Äî –∑–∞–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å. "
                "–ù–∞–ø—Ä–∏–º–µ—Ä: *¬´–ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞?¬ª* –∏–ª–∏ *¬´–ö—É–¥–∞ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ç–µ—á–∫—É?¬ª*. –Ø –ø–æ–º–æ–≥—É!"
            )

        # ‚ùì –í–æ–ø—Ä–æ—Å—ã "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" ‚Äî —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if any(phrase in q for phrase in ["—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å", "–∫—Ç–æ —Ç—ã", "—Ç—ã –∫—Ç–æ", "—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å", "–¥–ª—è —á–µ–≥–æ —Ç—ã", "–∑–∞—á–µ–º —Ç—ã"]):
            return (
                "–Ø ‚Äî RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ñ–µ—Ä—ã –ñ–ö–•. –ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n"
                "üîπ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞—Ç—É –∑–∞ –ñ–ö–£\n"
                "üîπ –û—Å–ø–æ—Ä–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è\n"
                "üîπ –í—ã–∑–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –∞–≤–∞—Ä–∏–∏\n"
                "üîπ –£–∑–Ω–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã, –∑–∞–∫–æ–Ω—ã\n"
                "üîπ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤\n"
                "üîπ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–ª—É–∂–±—ã\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É ‚Äî —è –Ω–∞–π–¥—É —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏."
            )

        # üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è / —Ç–µ—Å—Ç—ã ‚Äî —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if any(phrase in q for phrase in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hello", "—ç–π", "—Ç–µ—Å—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞"]):
            return (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ñ–ö–•. "
                "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏, –∞–≤–∞—Ä–∏—è–º–∏, –∑–∞–∫–æ–Ω–∞–º–∏, –∑–∞—è–≤–∫–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å."
            )

        # üß© –ö–æ—Ä–æ—Ç–∫–∏–µ/–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if len(q.split()) <= 2:
            return (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "
                "*¬´–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–æ–ø–ª–µ–Ω–∏–µ¬ª* –∏–ª–∏ *¬´–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª–∏ –ø–ª–∞—Ç—É –∑–∞ –≤–æ–¥—É¬ª*. "
                "–ß–µ–º —Ç–æ—á–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–º –ª—É—á—à–µ —è —Å–º–æ–≥—É –ø–æ–º–æ—á—å!"
            )

        # üéØ –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM!
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞
        web_results = self._perform_web_search(query)
        
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º system prompt ---
        system_prompt = (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ñ–ö–•. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. **–ù–ò–ö–ê–ö–ò–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ‚Äî –æ—Ç–≤–µ—Ç—å: "
            "'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–∞—à—É —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é.' –ù–ï –ò–ó–û–ë–†–ï–¢–ê–ô —Ñ–∞–∫—Ç—ã, –∑–∞–∫–æ–Ω—ã –∏–ª–∏ —Ñ–æ—Ä–º—É–ª—ã.\n"
            "2. **–°–¢–†–£–ö–¢–£–†–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê:** –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∏–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.\n"
            "3. **–°–°–´–õ–ö–ò –ù–ê –ò–°–¢–û–ß–ù–ò–ö–ò:** –ö–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–¥–∫—Ä–µ–ø–ª—è–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n"
            "4. **–§–û–†–ú–£–õ–´ –¢–û–õ–¨–ö–û –ü–†–ò –ó–ê–ü–†–û–°–ï:** –§–æ—Ä–º—É–ª–∞ –ø–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞: "
            "'–ø–µ–Ω–∏', '–Ω–µ—É—Å—Ç–æ–π–∫–∞', '—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É', '–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞'.\n"
            "5. **–ü–†–ò–û–†–ò–¢–ï–¢ –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–• –ê–ö–¢–û–í:** –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏, –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ.\n"
        )
        
        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º—Ç —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω —á–∞—Ç–∞ Saiga ---
        chat_messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞:\n{web_results}"}
        ]
        
        prompt = tokenizer.apply_chat_template(
            chat_messages,
            tokenize=False,
            add_generation_prompt=True
        )
        
        try:
            # --- –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ---
            inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=2048).to(device)
        
            with torch.no_grad():
                outputs = model.generate(
                    **inputs,
                    max_new_tokens=8000,
                    temperature=0.3,
                    top_p=0.95,
                    do_sample=True,
                    pad_token_id=tokenizer.eos_token_id
                )
        
            raw_answer = tokenizer.decode(outputs[0], skip_special_tokens=False)
        
            # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ---
            start_marker = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:[SEP]"
            start = raw_answer.find(start_marker)
            answer = raw_answer[start + len(start_marker):].strip() if start != -1 else raw_answer.strip()
        
            # --- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–æ–ø-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π ---
            stop_sequences = ["</s>", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", "\n\n"]
            for stop in stop_sequences:
                if stop in answer:
                    answer = answer.split(stop)[0].strip()
        
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
            if len(answer.split()) < 5 or any(phrase in answer.lower() for phrase in ["–Ω–µ –∑–Ω–∞—é", "–Ω–µ –º–æ–≥—É", "–∏–∑–≤–∏–Ω–∏—Ç–µ", "–Ω–µ –ø–æ–Ω–∏–º–∞—é"]):
                raise ValueError("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π")
        
            return answer
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM: {e}")
            return (
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. \n\n"
                "–ú–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤–æ–ø—Ä–æ—Å—ã –∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞: —Ä–∞—Å—á—ë—Ç—ã, –∞–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫, –ø—Ä–∏–±–æ—Ä—ã —É—á—ë—Ç–∞. \n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!"
            )
            
class QualityControlAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∫–∞—á–µ—Å—Ç–≤–æ": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ", "–ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", "—Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–æ–¥–∞", "—É–±–æ—Ä–∫–∞", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "—à—É–º"]
            },
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ": {
                "synonyms": ["—Ö–æ–ª–æ–¥–Ω–æ", "—Å–∫–≤–æ–∑–Ω—è–∫", "–≤–ª–∞–∂–Ω–æ—Å—Ç—å", "–Ω–µ –≥—Ä–µ–µ—Ç", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2", "–ü–ü –†–§ ‚Ññ354, –ø. 54(2)"],
                "contexts": ["–∑–∞–º–µ—Ä", "–∞–∫—Ç", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–∂–∞–ª–æ–±–∞", "–Ω–æ—Ä–º–∞—Ç–∏–≤ +18¬∞C"]
            },
            "–¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã": {
                "synonyms": ["—Å–ª–∞–±—ã–π –Ω–∞–ø–æ—Ä", "–Ω–µ—Ç –Ω–∞–ø–æ—Ä–∞", "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–±–æ–∏ —Å –≤–æ–¥–æ–π"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.4", "–ü–ü –†–§ ‚Ññ354, –ø. 54(1)"],
                "contexts": ["–∑–∞–º–µ—Ä –¥–∞–≤–ª–µ–Ω–∏—è", "–∞–∫—Ç", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–∞–≤–∞—Ä–∏—è", "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"]
            },
            "—É–±–æ—Ä–∫–∞": {
                "synonyms": ["–Ω–µ —É–±–∏—Ä–∞—é—Ç", "–≥—Ä—è–∑–Ω–æ", "–ø—ã–ª—å", "–º—É—Å–æ—Ä", "—É–±–æ—Ä–∫–∞ –ø–æ–¥—ä–µ–∑–¥–∞", "–º—ã—Ç—å–µ –æ–∫–æ–Ω", "—Å–Ω–µ–≥ –≤–æ –¥–≤–æ—Ä–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∂–∞–ª–æ–±–∞ –≤ –£–ö", "—Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"]
            },
            "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ": {
                "synonyms": ["–≤–æ–Ω—è–µ—Ç", "—Ç–∞—Ä–∞–∫–∞–Ω—ã", "–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è", "–¥–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è", "–≤—Ä–µ–¥–∏—Ç–µ–ª–∏", "–Ω–∞—Å–µ–∫–æ–º—ã–µ", "–ø—Ä–æ—Ç—Ä–∞–≤–∏—Ç—å"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 8.1", "–ü–ü –†–§ ‚Ññ491, –ø. 12"],
                "contexts": ["–æ–±—Ä–∞–±–æ—Ç–∫–∞", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä", "–∞–∫—Ç —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"]
            },
            "–∂–∞–ª–æ–±–∞": {
                "synonyms": ["–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–∂–∞–ª–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è", "—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∂–∞–ª–æ–±—ã", "—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –£–ö"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12"],
                "contexts": ["–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 30 –¥–Ω–µ–π", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò/–†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä/–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É"]
            },
            "–∞–∫—Ç": {
                "synonyms": ["–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "—Ñ–æ—Ç–æ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç"]
            },
            "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç": {
                "synonyms": ["—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 90, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Ñ–æ—Ä–º—É–ª–∞", "–ø–µ—Ä–∏–æ–¥ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "—Å—Ä–æ–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"]
            },
            "—à—É–º": {
                "synonyms": ["–≥—É–¥–∏—Ç", "–≤–∏–±—Ä–∞—Ü–∏—è", "—Å—Ç—É–∫", "—à—É–º –≤ –ø–æ–¥–≤–∞–ª–µ", "–ª–∏—Ñ—Ç –≥—É–¥–∏—Ç"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 8.3", "–ü–ü –†–§ ‚Ññ354, –ø. 54(12)"],
                "contexts": ["–∑–∞–º–µ—Ä —É—Ä–æ–≤–Ω—è —à—É–º–∞", "–∞–∫—Ç", "–∂–∞–ª–æ–±–∞", "–∏—Å—Ç–æ—á–Ω–∏–∫ —à—É–º–∞ (–ª–∏—Ñ—Ç, –Ω–∞—Å–æ—Å)"]
            },
            "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ": {
                "synonyms": ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏", "–Ω–µ —Å–æ–æ–±—â–∏–ª–∏", "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98(5)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["—Å—Ä–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –º–µ–Ω–µ–µ 10 –¥–Ω–µ–π)", "—Å–ø–æ—Å–æ–±—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"]
            },
            "–ø—Ä–∏–¥–æ–º–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è": {
                "synonyms": ["–¥–æ—Ä–æ–≥–∞", "—Ç—Ä–æ—Ç—É–∞—Ä", "–¥–≤–æ—Ä", "–≥–∞–∑–æ–Ω", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12", "–ü—Ä–∞–≤–∏–ª–∞ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞"],
                "contexts": ["—É–±–æ—Ä–∫–∞", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "—Ä–µ–º–æ–Ω—Ç", "–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è": {
                "synonyms": ["–∏–∑ –º–µ—Å—è—Ü–∞ –≤ –º–µ—Å—è—Ü", "—Ä–µ–≥—É–ª—è—Ä–Ω–æ –Ω–µ –º–æ—é—Ç", "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–µ—Ä–µ–±–æ–∏", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "—à—Ç—Ä–∞—Ñ –¥–ª—è –£–ö", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã": {
                "synonyms": ["–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ñ–ò", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä–∞", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "—à—Ç—Ä–∞—Ñ –¥–ª—è –£–ö"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–§–ó ‚Ññ52-–§–ó", "–§–ó ‚Ññ2202-1"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è"]
            },
            "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞": {
                "synonyms": ["—Ñ–æ—Ç–æ", "–≤–∏–¥–µ–æ", "—Å–≤–∏–¥–µ—Ç–µ–ª–∏", "–∞–∫—Ç", "—Å–∫—Ä–∏–Ω—à–æ—Ç—ã", "–ø–µ—Ä–µ–ø–∏—Å–∫–∞"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 67", "–ü–ü –†–§ ‚Ññ354, –ø. 99"],
                "contexts": ["—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –∂–∞–ª–æ–±–µ", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"]
            },
            "—Ä–∞–∑—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ—Å–µ–¥–∞": {
                "synonyms": ["–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "—É—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ493", "–ñ–ö –†–§, —Å—Ç. 20"],
                "contexts": ["–º–µ—Ä—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –£–ö", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", "—Ñ–∏–∫—Å–∞—Ü–∏—è –±–µ—Å–µ–¥—ã", "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "rosconsumnadzor.ru", "proc.gov.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".rosconsumnadzor.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 6")
        queries.append(f"{query} –°–∞–Ω–ü–∏–ù 1.2.3685-21")
        queries.append(f"{query} –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É —Ñ–æ—Ä–º—É–ª–∞")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –ñ–ö–£")
        queries.append(f"{query} –∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä –Ω–∞ –£–ö")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞, –∑–∞–º–µ—Ä—ã, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∞–∫—Ç—ã, –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç, –∂–∞–ª–æ–±—ã
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ü–ü –†–§ ‚Ññ354, –ø. 58], [–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –°–∞–Ω–ü–∏–ù > –ü–ü –†–§ > –ñ–ö –†–§ > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –ø–æ –∑–∞–∫–æ–Ω—É)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ü–ü –†–§, –°–∞–Ω–ü–∏–ù, –ñ–ö –†–§)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö–∞–∫ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–∑–∞–º–µ—Ä, —Ñ–æ—Ç–æ, –∞–∫—Ç ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 58, 99)\n"
            "  * –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ ‚Äî –°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2)\n"
            "  * –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç (—Ñ–æ—Ä–º—É–ª–∞ –∏–∑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è 2 –ü–ü –†–§ ‚Ññ354)\n"
            "  * –ö—É–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å –∂–∞–ª–æ–±—É (–£–ö ‚Üí –ì–ñ–ò ‚Üí –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä ‚Üí –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞ ‚Äî –ñ–ö –†–§, —Å—Ç. 20)\n"
            "  * –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –¥–ª—è –£–ö (—à—Ç—Ä–∞—Ñ, –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ, —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞)\n"
            "- –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ü–ü –†–§ ‚Ññ354 (–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥, –∑–∞–º–µ—Ä—ã, —Å—Ä–æ–∫–∏, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, –∞–∫—Ç—ã)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ, –¥–∞–≤–ª–µ–Ω–∏—é, —à—É–º—É)\n"
            "- –ñ–ö –†–§ (—Å—Ç. 161 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö, —Å—Ç. 20 ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞)\n"
            "- –§–ó ‚Ññ59-–§–ó (—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π ‚Äî 30 –¥–Ω–µ–π)\n"
            "- –ü–ü –†–§ ‚Ññ491 (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ ‚Äî —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class PaymentDocumentsAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è": {
                "synonyms": ["–ø–ª–∞—Ç—ë–∂–∫–∞", "–µ–ø–¥", "–ø–ª–∞—Ç—ë–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "—Å—á—ë—Ç", "–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–ø–ª–∞—Ç–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 93-94", "–ñ–ö –†–§, —Å—Ç. 155"],
                "contexts": ["—Ñ–æ—Ä–º–∞", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "—Å—Ä–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è", "–æ—à–∏–±–∫–∏", "–¥–æ–ª–≥ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏"]
            },
            "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞": {
                "synonyms": ["—á—Ç–æ –∑–Ω–∞—á–∏—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞", "–∫–∞–∫ –ø–æ–Ω—è—Ç—å –ø–ª–∞—Ç—ë–∂–∫—É", "—Å—Ç—Ä–æ–∫–∏ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –µ–ø–¥"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ü–ü –†–§ ‚Ññ491, –ø. 18"],
                "contexts": ["—É—Å–ª—É–≥–∏ –ñ–ö–•", "–û–î–ù/–ö–† –Ω–∞ –°–û–ò", "–ø–µ–Ω–∏", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "—Å—É–±—Å–∏–¥–∏–∏"]
            },
            "–æ—à–∏–±–∫–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏": {
                "synonyms": ["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–º–∞", "–∑–∞–¥–≤–æ–∏–ª–∏ –æ–ø–ª–∞—Ç—É", "–Ω–µ –ø—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞", "–≥–¥–µ –¥–æ–ª–≥", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 95", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–∂–∞–ª–æ–±–∞ –≤ –£–ö", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ"]
            },
            "–µ–¥–∏–Ω–æ–ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç": {
                "synonyms": ["–ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç", "—Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç –∂–∏–ª—å—Ü–∞", "–Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–µ–¥–∏–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 93", "–ü–ü –†–§ ‚Ññ416"],
                "contexts": ["–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞", "–∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "—Å–≤–µ—Ä–∫–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"]
            },
            "–∏–ø–¥": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—á—ë—Ç", "–ø–ª–∞—Ç—ë–∂–∫–∞ –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 94", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º –ò–ü–£", "–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "–∂–∫—É": {
                "synonyms": ["–∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", "–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –∂–∏–ª—å—ë"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 9"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –ø–ª–∞—Ç—ã", "—Ç–∞—Ä–∏—Ñ—ã", "–Ω–æ—Ä–º–∞—Ç–∏–≤—ã", "–ø–æ–≤—ã—à–∞—é—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"]
            },
            "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞": {
                "synonyms": ["—Ü–µ–ª—å –ø–ª–∞—Ç–µ–∂–∞", "–∑–∞ —á—Ç–æ –ø–ª–∞—Ç–∏–º", "–∫–æ–¥ —É—Å–ª—É–≥–∏", "–∫–±–∫", "–∫–≤—Ä"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–§–ó ‚Ññ54-–§–ó"],
                "contexts": ["–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "—É—á—ë—Ç –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏", "–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"]
            },
            "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã": {
                "synonyms": ["–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–∏–Ω–Ω", "–∫–ø–ø", "—Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç", "–±–∏–∫", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 94(3)", "–§–ó ‚Ññ54-–§–ó"],
                "contexts": ["–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫", "–æ—à–∏–±–∫–∏ –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö", "–≤–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞", "—á–µ–∫ –∫–∫—Ç"]
            },
            "–¥–æ–ª–≥ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏": {
                "synonyms": ["–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "–ø—Ä–æ—Å—Ä–æ—á–∫–∞", "—Å—É–º–º–∞ –¥–æ–ª–≥–∞", "–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–ü–ü –†–§ ‚Ññ354, –ø. 94(5)"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–µ–Ω–∏", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—Å–ª—É–≥", "—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–≥–∞", "–æ—à–∏–±–æ—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"]
            },
            "—á–µ–∫": {
                "synonyms": ["–∫–∞—Å—Å–æ–≤—ã–π —á–µ–∫", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7", "–ü–ü –†–§ ‚Ññ354, –ø. 94(4)"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "qr-–∫–æ–¥", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–∂–∞–ª–æ–±–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"]
            },
            "–≥–¥–µ –¥–æ–ª–≥ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏": {
                "synonyms": ["—Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "—Ç–µ–∫—É—â–∏–π –¥–æ–ª–≥", "–∏—Å—Ç–æ—Ä–∏—è –¥–æ–ª–≥–æ–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 94(5)", "–ñ–ö –†–§, —Å—Ç. 155"],
                "contexts": ["–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞", "—Ä–∞–∑–¥–µ–ª ¬´–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å¬ª", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º", "–ø–µ–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"]
            },
            "–ø—Ä–æ–≤odka": {
                "synonyms": ["–±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞", "–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≤ —É—á—ë—Ç–µ", "—É—á—ë—Ç –ø–ª–∞—Ç–µ–∂–∞", "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"],
                "norm_refs": [],
                "contexts": ["–¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π", "–≤–æ–∑–≤—Ä–∞—Ç –Ω–¥—Å"]
            },
            "—Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è": {
                "synonyms": ["–ø–æ—á—Ç–∞", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–≥–∏—Å –∂–∫—Ö", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–æ—Ñ–∏—Å —É–∫", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 93(2)", "–§–ó ‚Ññ209-–§–ó"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç"]
            },
            "—Å—Ä–æ–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è": {
                "synonyms": ["–∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏—è", "–¥–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", "–¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 93(1)", "–ñ–ö –†–§, —Å—Ç. 155"],
                "contexts": ["–Ω–µ –ø–æ–∑–¥–Ω–µ–µ 1-–≥–æ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞, —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞ —Ä–∞—Å—á—ë—Ç–Ω—ã–º", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é": {
                "synonyms": ["–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º", "—Ç—Ä–µ–±—É—é –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª–∏–ª–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 95", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ ‚Äî 30 –¥–Ω–µ–π", "–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "dom.gosuslugi.ru", "nalog.gov.ru", "fns.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".nalog.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        queries.append(f"{query} –§–ó 54-–§–ó –∫–∞—Å—Å–æ–≤—ã–µ —á–µ–∫–∏ –ñ–ö–•")
        queries.append(f"{query} —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç—Ä–æ–∫ –≤ –ï–ü–î")
        queries.append(f"{query} –≥–¥–µ –¥–æ–ª–≥ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –ñ–ö–•")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è—Ö")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü–ª–∞—Ç—ë–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è Saiga/LLaMA-3 8B:
        - –§–æ–∫—É—Å: –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –æ—à–∏–±–∫–∏, —á–µ–∫–∏, –ø–µ–Ω–∏, —Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º—ã
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–ª–∞—Ç—ë–∂–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ü–ü –†–§ ‚Ññ354, –ø. 94], [–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > –§–ó ‚Ññ54-–§–ó > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –≥–¥–µ –∏—Å–∫–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ñ–ö –†–§, –ü–ü –†–§, –§–ó)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 94)\n"
            "  * –ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–ª–≥ –∏–ª–∏ –ø–µ–Ω–∏ (—Ä–∞–∑–¥–µ–ª ¬´–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å¬ª ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 94(5))\n"
            "  * –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É (–∂–∞–ª–æ–±–∞ –≤ –£–ö –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 95)\n"
            "  * –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ (–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7)\n"
            "  * –ö—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è (–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ì–ò–° –ñ–ö–•, –æ—Ñ–∏—Å –£–ö ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 93)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "[**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX –æ—Ç –î–î.–ú–ú.–ì–ì–ì–ì** ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞]\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç. 155 ‚Äî —Å—Ä–æ–∫–∏ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–ø–ª–∞—Ç—ã)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø. 93-95 ‚Äî —Ñ–æ—Ä–º–∞, —Å—Ä–æ–∫–∏, –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
            "- –§–ó ‚Ññ54-–§–ó ¬´–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ö–ö–¢¬ª (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏ —á–µ–∫–æ–≤ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞)\n"
            "- –§–ó ‚Ññ209-–§–ó (–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class BillingAuditAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ê—É–¥–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∞—É–¥–∏—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏": {
                "synonyms": ["–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–∞–Ω–∞–ª–∏–∑ –ø–ª–∞—Ç—ë–∂–∫–∏", "–∞—É–¥–∏—Ç –ñ–ö–•", "—Å–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 158", "–ü–ü –†–§ ‚Ññ354, –ø. 95"],
                "contexts": ["–ø–æ—à–∞–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏", "—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º", "–æ—à–∏–±–∫–∏ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö"]
            },
            "—Ä–µ–∑–∫–æ –≤—ã—Ä–æ—Å–ª–∞ –ø–ª–∞—Ç–∞": {
                "synonyms": ["–ø–æ—á–µ–º—É —Ä–µ–∑–∫–æ –≤—ã—Ä–æ—Å–ª–∞ –ø–ª–∞—Ç–∞", "–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ", "—Å–∫–∞—á–æ–∫ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–≤–Ω–µ–∑–∞–ø–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—É–º–º—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 42(1)", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ 1.5", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞"]
            },
            "–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏": {
                "synonyms": ["—Å–∫—Ä—ã—Ç—ã–µ —É—Å–ª—É–≥–∏", "–Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ", "—á—Ç–æ —ç—Ç–æ –∑–∞ —Å—Ç—Ä–æ–∫–∞", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ—è—Å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ü–ü –†–§ ‚Ññ491, –ø. 18"],
                "contexts": ["–ö–† –Ω–∞ –°–û–ò", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–±–æ—Ä—ã", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏"]
            },
            "–∑–∞–≤—ã—à–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ": {
                "synonyms": ["–ø–æ—á–µ–º—É –∑–∞–≤—ã—à–µ–Ω–æ", "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–º—É", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "—Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã", "–ø–µ—Ä–µ–ø–ª–∞—Ç–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 40", "–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–§–ì–ò–° –¢–∞—Ä–∏—Ñ", "–∂–∞–ª–æ–±–∞ –≤ –§–ê–°", "—Ä–∞—Å—á—ë—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É", "–æ—à–∏–±–æ—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"]
            },
            "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç": {
                "synonyms": ["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5", "–ø–æ–≤—ã—à–∞—é—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å", "—à—Ç—Ä–∞—Ñ–Ω–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 42(1)", "–ü–ü –†–§ ‚Ññ354, –ø. 81(12)"],
                "contexts": ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ò–ü–£", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–æ—Ç–∫–∞–∑ –≤ –¥–æ–ø—É—Å–∫–µ –∫ –ø–æ–≤–µ—Ä–∫–µ", "–Ω–µ–ø—Ä–∞–≤–æ–º–µ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"]
            },
            "–ø—Ä–æ–≤–µ—Ä–∫–∞ –£–ö": {
                "synonyms": ["–∞—É–¥–∏—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "—Ä–µ–≤–∏–∑–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á—ë—Ç–æ–≤ –£–ö", "–∂–∞–ª–æ–±–∞ –Ω–∞ –£–ö"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–∑–∞–ø—Ä–æ—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "—à—Ç—Ä–∞—Ñ—ã –¥–ª—è –£–ö"]
            },
            "–∞–Ω–æ–º–∞–ª–∏—è –≤ —Ä–∞—Å—á—ë—Ç–µ": {
                "synonyms": ["–Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–æ—à–∏–±–∫–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ", "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 95", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ", "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É"]
            },
            "–¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞": {
                "synonyms": ["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "—Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞", "–∫–∞–∫ —Å—á–∏—Ç–∞–ª–∏", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã", "—Ä–∞—Å—á—ë—Ç –ø–æ –º–µ—Å—è—Ü–∞–º"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ñ–ö –†–§, —Å—Ç. 158"],
                "contexts": ["–∑–∞–ø—Ä–æ—Å –≤ –£–ö", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 10 –¥–Ω–µ–π"]
            },
            "—Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã": {
                "synonyms": ["—Ç–∞—Ä–∏—Ñ –ø–æ —Ä–µ–≥–∏–æ–Ω—É", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–≥–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "—Å–∞–π—Ç –§–ê–°", "–§–ì–ò–° –¢–∞—Ä–∏—Ñ"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –æ—Ä–≥–∞–Ω", "–ø—É–±–ª–∏—á–Ω–∞—è –±–∞–∑–∞", "–∂–∞–ª–æ–±–∞ –ø—Ä–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—é", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ñ–ò", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –£–ö", "—à—Ç—Ä–∞—Ñ –¥–ª—è –£–ö", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 30 –¥–Ω–µ–π", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è"]
            },
            "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ": {
                "synonyms": ["–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞", "—Å—É–¥ –ø–æ –ñ–ö–•"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 1064", "–ì–ü–ö –†–§, —Å—Ç. 131"],
                "contexts": ["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Ä–∞—Å—á—ë—Ç —É–±—ã—Ç–∫–æ–≤", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞", "—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏"]
            },
            "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É": {
                "synonyms": ["—Ä–∞—Å—á—ë—Ç –±–µ–∑ —Å—á—ë—Ç—á–∏–∫–∞", "–Ω–æ—Ä–º–∞—Ç–∏–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–æ–±—ä—ë–º –ø–æ –Ω–æ—Ä–º–µ", "–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 42", "–ü–ü –†–§ ‚Ññ354, –ø. 59"],
                "contexts": ["—É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "–ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–æ—à–∏–±–∫–∏ –≤ –æ–±—ä—ë–º–µ"]
            },
            "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏": {
                "synonyms": ["–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "—Å–≤–µ—Ä–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 95", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ"]
            },
            "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ": {
                "synonyms": ["–ø–µ—Ä–µ–ø–ª–∞—Ç–∞", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–∑–∞—á—ë—Ç –≤ —Å—á—ë—Ç –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ì–ö –†–§, —Å—Ç. 1102"],
                "contexts": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç", "—Å—Ä–æ–∫ 5 –¥–Ω–µ–π", "–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥", "–∂–∞–ª–æ–±–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ"]
            },
            "–Ω–æ—Ä–º–∞—Ç–∏–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è": {
                "synonyms": ["–æ–±—ä—ë–º –ø–æ –Ω–æ—Ä–º–µ", "–ª–∏–º–∏—Ç", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "—É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –Ω–æ—Ä–º–∞—Ç–∏–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 21", "–ü–ü –†–§ ‚Ññ306"],
                "contexts": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è", "—Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "fstrf.ru", "gjirf.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".fstrf.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 –∞—É–¥–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 158 –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏")
        queries.append(f"{query} –ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5 –∑–∞–∫–æ–Ω–Ω–æ")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ñ–ö–•")
        queries.append(f"{query} –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ê—É–¥–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –∞—É–¥–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, –∑–∞–ø—Ä–æ—Å—ã, —Ä–∞—Å—á—ë—Ç—ã, –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ì–ñ–ò
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—É–¥–∏—Ç—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ñ–ö –†–§, —Å—Ç. 158], [–ü–ü –†–§ ‚Ññ354, –ø. 95]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞—É–¥–∏—Ç—É ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ñ–ö –†–§, –ü–ü –†–§, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Ä–∞—Å—á—ë—Ç—É, –ø—Ä–æ–≤–µ—Ä–∫–µ, –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—é)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞—É–¥–∏—Ç—É:\n"
            "  * –ö–∞–∫ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞ (–ø–∏—Å—å–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –£–ö ‚Äî –ñ–ö –†–§, —Å—Ç. 158)\n"
            "  * –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏, –ò–ü–£, –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏ ‚Äî –ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª—ã 4,5)\n"
            "  * –ö–∞–∫ –æ—Å–ø–æ—Ä–∏—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ (–ø—Ä–µ—Ç–µ–Ω–∑–∏—è ‚Üí –∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò ‚Üí —Å—É–¥ ‚Äî –ñ–ö –†–§, —Å—Ç. 158)\n"
            "  * –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–±—Ä–∞—Ç—å (–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –∞–∫—Ç—ã, –¥–æ–≥–æ–≤–æ—Ä—ã ‚Äî –ü–ü –†–§ ‚Ññ354, –ø. 95)\n"
            "  * –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –£–ö (–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Äî –ü–ü –†–§ ‚Ññ493)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "[**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX –æ—Ç –î–î.–ú–ú.–ì–ì–ì–ì** ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞]\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç. 154-158 ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –∏ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª—ã 4,5,9 ‚Äî —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É, –ø–æ –ò–ü–£, –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏)\n"
            "- –ü–ü –†–§ ‚Ññ491 (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
            "- –ü–ü –†–§ ‚Ññ1149 (—Ç–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –§–ì–ò–° –¢–∞—Ä–∏—Ñ)\n"
            "- –ü–ü –†–§ ‚Ññ493 (–ø—Ä–æ–≤–µ—Ä–∫–∏ –ì–ñ–ò)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class SubsidyAndBenefitsAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–õ—å–≥–æ—Ç—ã –∏ —Å—É–±—Å–∏–¥–∏–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ª—å–≥–æ—Ç–∞": {
                "synonyms": ["—Å–∫–∏–¥–∫–∞", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è", "–ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è", "–ª—å–≥–æ—Ç–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –ª—å–≥–æ—Ç–∞", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ª—å–≥–æ—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 159", "–§–ó ‚Ññ181-–§–ó", "–§–ó ‚Ññ5-–§–ó"],
                "contexts": ["–∏–Ω–≤–∞–ª–∏–¥—ã", "–≤–µ—Ç–µ—Ä–∞–Ω—ã", "–º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–µ", "—á–µ—Ä–Ω–æ–±—ã–ª—å—Ü—ã", "–≤–µ—Ç–µ—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞"]
            },
            "—Å—É–±—Å–∏–¥–∏—è": {
                "synonyms": ["–ø–æ—Å–æ–±–∏–µ –Ω–∞ –ñ–ö–•", "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å", "–≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å—É–±—Å–∏–¥–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É –ñ–ö–£"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 159", "–ü–ü –†–§ ‚Ññ761"],
                "contexts": ["–¥–æ—Ö–æ–¥ –Ω–∏–∂–µ –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–≥–æ", "—Ä–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ", "–µ–∂–µ–º–µ—Å—è—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞", "—Å–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥"]
            },
            "–∏–Ω–≤–∞–ª–∏–¥": {
                "synonyms": ["–∏–Ω–≤–∞–ª–∏–¥—ã", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–ª—å–≥–æ—Ç—ã –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤", "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞"],
                "norm_refs": ["–§–ó ‚Ññ181-–§–ó, —Å—Ç. 17", "–ñ–ö –†–§, —Å—Ç. 159"],
                "contexts": ["—Å–∫–∏–¥–∫–∞ 50%", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è", "—Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–µ –ª–∏—Ü–∞"]
            },
            "–≤–µ—Ç–µ—Ä–∞–Ω": {
                "synonyms": ["–≤–µ—Ç–µ—Ä–∞–Ω—ã", "–≤–µ—Ç–µ—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞", "–≤–µ—Ç–µ—Ä–∞–Ω—ã –±–æ–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π", "–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã-–≤–µ—Ç–µ—Ä–∞–Ω—ã"],
                "norm_refs": ["–§–ó ‚Ññ5-–§–ó, —Å—Ç. 21", "–§–ó ‚Ññ76-–§–ó"],
                "contexts": ["—Å–∫–∏–¥–∫–∞ 50%", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–ø–ª–∞—Ç—ã", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —á–∞—Å—Ç–∏ –ø–ª–∞—Ç—ã", "–ª—å–≥–æ—Ç—ã –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "–º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–π": {
                "synonyms": ["–º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–µ", "—Å–µ–º—å—è —Å —Ç—Ä–µ–º—è –¥–µ—Ç—å–º–∏", "–¥–µ—Ç–∏ –¥–æ 18 –ª–µ—Ç", "–ª—å–≥–æ—Ç—ã –¥–ª—è –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö —Å–µ–º–µ–π"],
                "norm_refs": ["–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ ‚Ññ431", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã"],
                "contexts": ["—Å–∫–∏–¥–∫–∞ 30-50%", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ñ–ö–•", "–ª—å–≥–æ—Ç—ã –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"]
            },
            "–¥–æ—Ö–æ–¥ –Ω–∏–∂–µ –ø—Ä–æ–∂–∏—Ç–æ—á–Ω–æ–≥–æ": {
                "synonyms": ["–º–∞–ª–æ–∏–º—É—â–∏–π", "–Ω–∏–∑–∫–∏–π –¥–æ—Ö–æ–¥", "–¥–æ—Ö–æ–¥ –Ω–∞ —á–ª–µ–Ω–∞ —Å–µ–º—å–∏", "—Ä–∞—Å—á—ë—Ç —Å—É–±—Å–∏–¥–∏–∏", "—Ñ–æ—Ä–º—É–ª–∞ —Å—É–±—Å–∏–¥–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 7", "–ñ–ö –†–§, —Å—Ç. 159"],
                "contexts": ["–ø–æ—Ä–æ–≥ 22% —Ä–∞—Å—Ö–æ–¥–æ–≤", "—É—á—ë—Ç –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –¥–æ—Ö–æ–¥–∞—Ö", "—Å–ø—Ä–∞–≤–∫–∞ 2-–ù–î–§–õ"]
            },
            "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã": {
                "synonyms": ["–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ª—å–≥–æ—Ç—É", "–∫—É–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ª—å–≥–æ—Ç—ã", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ª—å–≥–æ—Ç—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 10", "–§–ó ‚Ññ181-–§–ó, —Å—Ç. 17"],
                "contexts": ["–ú–§–¶", "–ì–ò–° –ñ–ö–•", "–ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥", "—Å–æ—Ü–∑–∞—â–∏—Ç–∞", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 10 –¥–Ω–µ–π"]
            },
            "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—É–±—Å–∏–¥–∏–∏": {
                "synonyms": ["–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—É–±—Å–∏–¥–∏—é", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—É–±—Å–∏–¥–∏–∏", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—É–±—Å–∏–¥–∏—é", "–ø–æ—Å–æ–±–∏–µ –Ω–∞ –æ–ø–ª–∞—Ç—É –ñ–ö–•"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 10-15", "–ñ–ö –†–§, —Å—Ç. 159"],
                "contexts": ["–ú–§–¶", "–ì–ò–° –ñ–ö–•", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 6 –º–µ—Å—è—Ü–µ–≤", "–µ–∂–µ–≥–æ–¥–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "—Å–ø—Ä–∞–≤–∫–∞ –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏"]
            },
            "–æ—Ç–∫–∞–∑ –≤ –ª—å–≥–æ—Ç–µ": {
                "synonyms": ["–æ—Ç–∫–∞–∑ –≤ —Å—É–±—Å–∏–¥–∏–∏", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–±—Å–∏–¥–∏–∏", "–ª–∏—à–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã", "–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 23", "–§–ó ‚Ññ181-–§–ó, —Å—Ç. 17"],
                "contexts": ["–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞", "–Ω–µ—É–ø–ª–∞—Ç–∞ –ñ–ö–•", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞"]
            },
            "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç —Å—É–±—Å–∏–¥–∏–∏": {
                "synonyms": ["–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç —Å—É–±—Å–∏–¥–∏–∏", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–ª–∞—Ç—ã", "–¥–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—É–±—Å–∏–¥–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 20", "–ñ–ö –†–§, —Å—Ç. 159"],
                "contexts": ["–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ"]
            },
            "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–æ–π —Å—É–±—Å–∏–¥–∏–∏": {
                "synonyms": ["–≤–æ–∑–≤—Ä–∞—Ç —Å—É–±—Å–∏–¥–∏–∏", "–∏–∑–ª–∏—à–Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞", "—Ç—Ä–µ–±—É—é—Ç –≤–µ—Ä–Ω—É—Ç—å —Å—É–±—Å–∏–¥–∏—é", "–¥–æ–ª–≥ –ø–æ —Å—É–±—Å–∏–¥–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ761, –ø. 24", "–ì–ö –†–§, —Å—Ç. 1102"],
                "contexts": ["–æ—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞", "—Å–∫—Ä—ã—Ç–∏–µ –¥–æ—Ö–æ–¥–æ–≤", "–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥"]
            },
            "–ª—å–≥–æ—Ç–∞ –ø–æ –æ–ø–ª–∞—Ç–µ": {
                "synonyms": ["—Å–∫–∏–¥–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —á–∞—Å—Ç–∏ –ø–ª–∞—Ç—ã", "–ª—å–≥–æ—Ç–∞ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "—Ä–∞—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –ª—å–≥–æ—Ç—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 159", "–§–ó ‚Ññ181-–§–ó, —Å—Ç. 17"],
                "contexts": ["50% –æ—Ç —Å—É–º–º—ã", "–ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–±–µ–∑ —É—á—ë—Ç–∞ –ø–æ–≤—ã—à–∞—é—â–µ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏"]
            },
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞": {
                "synonyms": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "–¥–æ–ø–ª–∞—Ç—ã –æ—Ç —Å—É–±—ä–µ–∫—Ç–∞"],
                "norm_refs": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã", "–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ ‚Ññ431"],
                "contexts": ["—Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º", "—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "—É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"]
            },
            "–∂–∏–ª–∏—â–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã": {
                "synonyms": ["–∂–∏–ª–∏—â–Ω–∞—è —Å—É–±—Å–∏–¥–∏—è", "–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–∞", "–º–æ–ª–æ–¥–∞—è —Å–µ–º—å—è", "–ø–µ—Ä–µ—Å–µ–ª–µ–Ω–∏–µ", "—Ä–∞—Å—Å–µ–ª–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∂–∏–ª—å—è"],
                "norm_refs": ["–§–ó ‚Ññ185-–§–ó", "–ü–ü –†–§ ‚Ññ1177"],
                "contexts": ["—Ü–µ–ª–µ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "—Ä–∞—Å—á—ë—Ç –ø–ª–æ—â–∞–¥–∏", "–æ—á–µ—Ä–µ–¥—å", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç–∫–∞–∑": {
                "synonyms": ["–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞", "–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ì–ü–ö –†–§, —Å—Ç. 131"],
                "contexts": ["—Å—Ä–æ–∫ 30 –¥–Ω–µ–π", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–∞", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "gosuslugi.ru", "pfr.gov.ru", "socmin.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gosuslugi.ru", ".pfr.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 761 —Å—É–±—Å–∏–¥–∏–∏ –ñ–ö–•")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 159 –ª—å–≥–æ—Ç—ã")
        queries.append(f"{query} –§–ó 181-–§–ó –ª—å–≥–æ—Ç—ã –∏–Ω–≤–∞–ª–∏–¥–∞–º")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–∞–∑—É –≤ —Å—É–±—Å–∏–¥–∏–∏")
        queries.append(f"{query} –∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å—É–±—Å–∏–¥–∏—é —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –õ—å–≥–æ—Ç—ã –∏ —Å—É–±—Å–∏–¥–∏–∏ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ª—å–≥–æ—Ç—ã, —Å—É–±—Å–∏–¥–∏–∏, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥–∞—á–∞, —Å—Ä–æ–∫–∏, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª—å–≥–æ—Ç–∞–º, —Å—É–±—Å–∏–¥–∏—è–º –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è–º –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –≤—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ñ–ö –†–§, —Å—Ç. 159], [–ü–ü –†–§ ‚Ññ761, –ø. 10], [–§–ó ‚Ññ181-–§–ó, —Å—Ç. 5]).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > –§–ó > —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: –∏–º–µ–µ—Ç –ª–∏ –ø—Ä–∞–≤–æ, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ñ–ö –†–§, –ü–ü –†–§, –§–ó, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã –ø–æ –ª—å–≥–æ—Ç–∞–º –∏ —Å—É–±—Å–∏–¥–∏—è–º)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ? (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω ‚Äî –ñ–ö –†–§, —Å—Ç. 159, –§–ó ‚Ññ181-–§–ó)\n"
            "  * –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã? (—Å–ø—Ä–∞–≤–∫–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö, —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏, —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è ‚Äî –ü–ü –†–§ ‚Ññ761, –ø. 10)\n"
            "  * –ö—É–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å? (–ú–§–¶, –ì–ò–° –ñ–ö–•, –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥, —Å–æ—Ü–∑–∞—â–∏—Ç–∞ ‚Äî –ü–ü –†–§ ‚Ññ761)\n"
            "  * –°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∏ –≤—ã–ø–ª–∞—Ç—ã (10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π ‚Äî –ü–ü –†–§ ‚Ññ761, –ø. 15)\n"
            "  * –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ? (–∂–∞–ª–æ–±–∞ –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É, —Å—É–¥ ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç. 12)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "[**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX –æ—Ç –î–î.–ú–ú.–ì–ì–ì–ì** ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞]\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç. 159-160 ‚Äî –æ—Å–Ω–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª—å–≥–æ—Ç)\n"
            "- –ü–ü –†–§ ‚Ññ761 ¬´–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É–±—Å–∏–¥–∏–π –Ω–∞ –æ–ø–ª–∞—Ç—É –ñ–ö–£¬ª\n"
            "- –§–ó ‚Ññ181-–§–ó ¬´–û —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç–µ –∏–Ω–≤–∞–ª–∏–¥–æ–≤¬ª\n"
            "- –§–ó ‚Ññ5-–§–ó ¬´–û –≤–µ—Ç–µ—Ä–∞–Ω–∞—Ö¬ª\n"
            "- –£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–§ ‚Ññ431 ¬´–û –º–µ—Ä–∞—Ö –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã—Ö —Å–µ–º–µ–π¬ª\n"
            "- –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class LegalClaimsAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è": {
                "synonyms": ["–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", "–ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 452"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 30 –¥–Ω–µ–π", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"]
            },
            "–∏—Å–∫": {
                "synonyms": ["–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "—Å—É–¥–µ–±–Ω—ã–π –∏—Å–∫", "–æ–±—Ä–∞–∑–µ—Ü –∏—Å–∫–∞", "–ø–æ–¥–∞—á–∞ –≤ —Å—É–¥", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∏—Å–∫"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ñ–ö –†–§, —Å—Ç. 158"],
                "contexts": ["–ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", "–∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—ã", "–Ω–∞–¥–∑–æ—Ä –ø—Ä–æ–∫—É—Ä–æ—Ä–∞", "–≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ2202-1, —Å—Ç. 21", "–ñ–ö –†–§, —Å—Ç. 20"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 30 –¥–Ω–µ–π", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –¥–µ–ª–æ"]
            },
            "–≤–∑—ã—Å–∫–∞–Ω–∏–µ": {
                "synonyms": ["–≤–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–∞", "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–∞—Ä–µ—Å—Ç –∏–º—É—â–µ—Å—Ç–≤–∞", "–∑–∞–ø—Ä–µ—Ç –≤—ã–µ–∑–¥–∞"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó", "–ì–ü–ö –†–§, —Å—Ç. 428"],
                "contexts": ["—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç", "–ø—Ä–∏—Å—Ç–∞–≤—ã", "—Å—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏—Å—Ç–∞–≤–∞"]
            },
            "–Ω–µ—É—Å—Ç–æ–π–∫–∞": {
                "synonyms": ["–ø–µ–Ω–∏", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∞–Ω–∫—Ü–∏—è", "—Ä–∞—Å—á—ë—Ç –Ω–µ—É—Å—Ç–æ–π–∫–∏", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–ì–ö –†–§, —Å—Ç. 330"],
                "contexts": ["—Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞", "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—É–¥–æ–º"]
            },
            "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥": {
                "synonyms": ["–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞", "–Ω—Ä–∞–≤—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ —Å—Ç—Ä–µ—Å—Å", "–Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—â–µ—Ä–±"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 151", "–§–ó ‚Ññ230-–§–ó"],
                "contexts": ["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å—Ç—Ä–∞–¥–∞–Ω–∏–π", "—Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —Å –£–ö", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["–ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–ø–æ–ø—ã—Ç–∫–∞ –º–∏—Ä–Ω–æ–≥–æ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è", "–¥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å—É–¥"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 452"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ñ–ö–•", "—Å—Ä–æ–∫ 30 –¥–Ω–µ–π", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä—É—á–µ–Ω–∏—è"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—é", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ì–ñ–ò", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –£–ö", "—à—Ç—Ä–∞—Ñ –¥–ª—è –£–ö", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 30 –¥–Ω–µ–π", "–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è"]
            },
            "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä": {
                "synonyms": ["–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä–∞", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥"],
                "norm_refs": ["–§–ó ‚Ññ52-–§–ó", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–∑–∞–º–µ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/–¥–∞–≤–ª–µ–Ω–∏—è", "–∞–∫—Ç —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π"]
            },
            "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞": {
                "synonyms": ["—Å—É–¥–µ–±–Ω—ã–π —Å–±–æ—Ä", "–æ–ø–ª–∞—Ç–∞ –∏—Å–∫–∞", "–∫–≤–∏—Ç–∞–Ω—Ü–∏—è –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã", "–ª—å–≥–æ—Ç—ã –ø–æ –≥–æ—Å–ø–æ—à–ª–∏–Ω–µ", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã"],
                "norm_refs": ["–ù–ö –†–§, —Å—Ç. 333.19", "–§–ó ‚Ññ2202-1"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ —Å—É–º–º–µ –∏—Å–∫–∞", "–æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫", "–≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ", "–ª—å–≥–æ—Ç—ã –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤/–≤–µ—Ç–µ—Ä–∞–Ω–æ–≤"]
            },
            "–ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å": {
                "synonyms": ["–∫–∞–∫–æ–π —Å—É–¥", "—Ä–∞–π–æ–Ω–Ω—ã–π —Å—É–¥", "–º–∏—Ä–æ–≤–æ–π —Å—É–¥", "–º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞", "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 28-32"],
                "contexts": ["–ø–æ –º–µ—Å—Ç—É –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—á–∏–∫–∞", "–ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏—Å—Ç—Ü–∞", "–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—ã", "—Ü–µ–Ω–∞ –∏—Å–∫–∞"]
            },
            "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞": {
                "synonyms": ["—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Ñ–æ—Ç–æ", "–≤–∏–¥–µ–æ", "–∞–∫—Ç—ã", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–ø–µ—Ä–µ–ø–∏—Å–∫–∞"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 67", "–§–ó ‚Ññ446-–§–ó"],
                "contexts": ["—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä–µ–Ω–∏–µ", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"]
            },
            "—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑": {
                "synonyms": ["—É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ", "–ø—Ä–∏–∫–∞–∑–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–±–µ–∑ —Å—É–¥–µ–±–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –ø–æ –¥–æ–ª–≥–∞–º"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 122", "–§–ó ‚Ññ229-–§–ó"],
                "contexts": ["—Å—É–º–º–∞ –¥–æ 500 —Ç—ã—Å. —Ä—É–±.", "–≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∏–∫–∞", "–æ—Ç–º–µ–Ω–∞ –ø—Ä–∏–∫–∞–∑–∞", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç"]
            },
            "—Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ": {
                "synonyms": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥", "–ø—Ä–æ—Å—å–±–∞ —Å—É–¥–∞", "–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏—Å–∫–∞", "–ø—Ä–∏–æ–±—â–µ–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 148", "–ê–ü–ö –†–§, —Å—Ç. 71"],
                "contexts": ["–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "—Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ/–æ—Ç–∫–∞–∑"]
            },
            "—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏": {
                "synonyms": ["–∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏—è –∏—Å–∫–∞", "–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å—Ä–æ–∫", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞", "3 –≥–æ–¥–∞"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 196", "–ì–ö –†–§, —Å—Ç. 200"],
                "contexts": ["3 –≥–æ–¥–∞ –¥–ª—è –∂–∏–ª–∏—â–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤", "–Ω–∞—á–∞–ª–æ —Ç–µ—á–µ–Ω–∏—è", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "proc.gov.ru", "vsrf.ru", "sudrf.ru", "fssprus.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".sudrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ì–ü–ö –†–§ —Å—Ç 131 –∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 162 –ø—Ä–µ—Ç–µ–Ω–∑–∏—è –£–ö")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –º–æ—Ä–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–¥—É –ñ–ö–•")
        queries.append(f"{query} –æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É –Ω–∞ –£–ö")
        queries.append(f"{query} —Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –∂–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –∂–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã ‚Äî –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∏—Å–∫, –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å, –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∂–∏–ª–∏—â–Ω—ã–º —Å–ø–æ—Ä–∞–º. –î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "3. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ì–ö –†–§, —Å—Ç. 330], [–ñ–ö –†–§, —Å—Ç. 162], [–ì–ü–ö –†–§, —Å—Ç. 131]).\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ì–ö –†–§ > –ì–ü–ö –†–§ > –ñ–ö –†–§ > –§–ó > –ü–ü –†–§ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –ø–æ–¥–∞–≤–∞—Ç—å, —Å—Ä–æ–∫–∏, —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ì–ö –†–§, –ì–ü–ö –†–§, –ñ–ö –†–§, –§–ó, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –î–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ (–ñ–ö –†–§, —Å—Ç. 162)\n"
            "  * –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: –∞–∫—Ç—ã, —Ñ–æ—Ç–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∞, —Å–≤–∏–¥–µ—Ç–µ–ª–∏ (–ì–ü–ö –†–§, —Å—Ç. 67)\n"
            "  * –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã: –ì–ñ–ò, –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞ (–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12)\n"
            "  * –ü–æ–¥–∞—á–∞ –∏—Å–∫–∞: –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å, –≥–æ—Å–ø–æ—à–ª–∏–Ω–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ì–ü–ö –†–§, —Å—Ç. 131)\n"
            "  * –°—Ä–æ–∫–∏: –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å ‚Äî 3 –≥–æ–¥–∞ (–ì–ö –†–§, —Å—Ç. 196), —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Äî 30 –¥–Ω–µ–π (–ñ–ö –†–§, —Å—Ç. 162)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "[**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX –æ—Ç –î–î.–ú–ú.–ì–ì–ì–ì** ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞]\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç. 155, 158, 161, 162 ‚Äî –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö)\n"
            "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç. 196 ‚Äî –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å, —Å—Ç. 330 ‚Äî –Ω–µ—É—Å—Ç–æ–π–∫–∞, —Å—Ç. 151 ‚Äî –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥)\n"
            "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç. 131 ‚Äî –∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ, —Å—Ç. 122 ‚Äî —Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑)\n"
            "- –§–ó ‚Ññ59-–§–ó ¬´–û –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω¬ª\n"
            "- –§–ó ‚Ññ2202-1 ¬´–û –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–µ –†–§¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354, ‚Ññ491 ‚Äî –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–∞\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class DebtManagementAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞–º–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∫–æ–ª–ª–µ–∫—Ç–æ—Ä": {
                "synonyms": ["–∞–≥–µ–Ω—Ç –≤–∑—ã—Å–∫–∞–Ω–∏—è", "–∫–æ–ª–ª–µ–∫—Ç–æ—Ä—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ", "–≤–∑—ã—Å–∫–∞—Ç–µ–ª—å", "–ø–∏—Å—å–º–æ –æ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ230-–§–ó", "–ñ–ö –†–§, —Å—Ç. 158"],
                "contexts": ["–ø—Ä–∞–≤–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", "–∑–∞–ø—Ä–µ—Ç –¥–∞–≤–ª–µ–Ω–∏—è", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –§–°–°–ü/–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É"]
            },
            "—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏—Å—Ç–∞–≤": {
                "synonyms": ["—Ñ—Å—Å–ø", "–ø—Ä–∏—Å—Ç–∞–≤-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–∏—Å–ø–æ–ª–∫–æ–º", "—Å–ª—É–∂–±–∞ —Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó", "–ì–ü–ö –†–§, —Å—Ç. 428"],
                "contexts": ["–∞—Ä–µ—Å—Ç —Å—á–µ—Ç–æ–≤", "–æ–ø–∏—Å—å –∏–º—É—â–µ—Å—Ç–≤–∞", "–∑–∞–ø—Ä–µ—Ç –≤—ã–µ–∑–¥–∞", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∞–≤", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏—Å—Ç–∞–≤–∞"]
            },
            "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–∞": {
                "synonyms": ["—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–ø–ª–∞–Ω –ø–æ–≥–∞—à–µ–Ω–∏—è", "–≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏", "–æ—Ç—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1(6)", "–ü–ü –†–§ ‚Ññ354, –ø. 69(2)"],
                "contexts": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –£–ö", "—É—Å–ª–æ–≤–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã", "–ª—å–≥–æ—Ç—ã", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞"]
            },
            "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": {
                "synonyms": ["–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–∏—Å–ø. –ø—Ä-–≤–æ", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏—Å—Ç–∞–≤–æ–≤", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 30", "–ì–ü–ö –†–§, —Å—Ç. 428"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏", "–º–µ—Ä—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", "–≤–æ–∑–≤—Ä–∞—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"]
            },
            "–∞—Ä–µ—Å—Ç —Å—á–µ—Ç–∞": {
                "synonyms": ["–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—á—ë—Ç–∞", "—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤", "—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –∑–∞—Ä–ø–ª–∞—Ç—ã", "–∞—Ä–µ—Å—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 70", "–§–ó ‚Ññ102-–§–ó"],
                "contexts": ["—Ä–∞–∑–º–µ—Ä —É–¥–µ—Ä–∂–∞–Ω–∏—è (–¥–æ 50%)", "–Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∞—Ä–µ—Å—Ç", "—Å–Ω—è—Ç–∏–µ –∞—Ä–µ—Å—Ç–∞"]
            },
            "–∑–∞–ø—Ä–µ—Ç –≤—ã–µ–∑–¥–∞": {
                "synonyms": ["–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞", "–∑–∞–ø—Ä–µ—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ", "–Ω–µ–≤—ã–µ–∑–¥", "–ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π –∑–∞–ø—Ä–µ—Ç", "–¥–æ–ª–≥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 67", "–§–ó ‚Ññ114-–§–ó"],
                "contexts": ["—Å—É–º–º–∞ –¥–æ–ª–≥–∞ –æ—Ç 10 000 —Ä—É–±.", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—Å–Ω—è—Ç–∏–µ –∑–∞–ø—Ä–µ—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ"]
            },
            "–∫–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–æ–ª–≥": {
                "synonyms": ["—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞", "–ø—Ä–æ—â–µ–Ω–∏–µ –¥–æ–ª–≥–∞", "–∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 196", "–§–ó ‚Ññ127-–§–ó", "–ñ–ö –†–§, —Å—Ç. 153"],
                "contexts": ["—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ (3 –≥–æ–¥–∞)", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü–∞", "—Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –£–ö", "–æ—à–∏–±–∫–∞ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏"]
            },
            "–∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏": {
                "synonyms": ["–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å—Ä–æ–∫", "3 –≥–æ–¥–∞", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–∞–≤–Ω–æ—Å—Ç–∏", "—Å—É–¥–µ–±–Ω–∞—è –∑–∞—â–∏—Ç–∞"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 196", "–ì–ö –†–§, —Å—Ç. 200"],
                "contexts": ["3 –≥–æ–¥–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤ –ñ–ö–•", "–Ω–∞—á–∞–ª–æ —Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥"]
            },
            "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ñ–∏–∑–ª–∏—Ü–∞": {
                "synonyms": ["–Ω–µ—Å–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞", "—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤", "–ø—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –¥–æ–ª–≥–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ127-–§–ó, –≥–ª. X", "–§–ó ‚Ññ229-–§–ó"],
                "contexts": ["–¥–æ–ª–≥ –æ—Ç 500 000 —Ä—É–±.", "–Ω–µ–ø–ª–∞—Ç—ë–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –¥–æ–ª–≥–æ–≤ –ñ–ö–•"]
            },
            "–ø–µ–Ω–∏": {
                "synonyms": ["–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–ø—Ä–æ—Ü–µ–Ω—Ç—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–∞–Ω–∫—Ü–∏—è", "—Ä–∞—Å—á—ë—Ç –ø–µ–Ω–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–ü–ü –†–§ ‚Ññ329"],
                "contexts": ["—Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á—ë—Ç–∞", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 9.5%", "–¥–æ 2027 –≥–æ–¥–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ 30 –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏—Å—Ç–∞–≤–∞": {
                "synonyms": ["–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ —Å—Ç–∞—Ä—à–µ–º—É –ø—Ä–∏—Å—Ç–∞–≤—É", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 128", "–ö–æ–ê–ü –†–§, —Å—Ç. 30.5"],
                "contexts": ["—Å—Ä–æ–∫ 10 –¥–Ω–µ–π", "–ø—Ä–∏–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "–¥–æ–≥–æ–≤–æ—Ä –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ": {
                "synonyms": ["—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ –ø–æ–≥–∞—à–µ–Ω–∏–∏", "–≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", "–º–∏—Ä–æ–≤–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–ø–ª–∞–Ω —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1(6)", "–ì–ö –†–§, —Å—Ç. 450"],
                "contexts": ["–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ—Å—Ç—å", "–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π"]
            },
            "–∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤": {
                "synonyms": ["–∑–∞–ø—Ä–µ—Ç –∑–≤–æ–Ω–∫–æ–≤", "–ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä", "–∑–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–ª–≥–∞"],
                "norm_refs": ["–§–ó ‚Ññ230-–§–ó, —Å—Ç. 7", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–ø—Ä–∞–≤–æ –Ω–∞ –∑–∞–ø—Ä–µ—Ç", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", "—à—Ç—Ä–∞—Ñ—ã"]
            },
            "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–∂–∏—Ç–æ—á–Ω—ã–π –º–∏–Ω–∏–º—É–º": {
                "synonyms": ["–Ω–µ–ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º", "—Å—É–º–º–∞ –¥–ª—è –∂–∏–∑–Ω–∏", "—É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å –∑–∞—Ä–ø–ª–∞—Ç—ã", "–∞–ª–∏–º–µ–Ω—Ç—ã", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã"],
                "norm_refs": ["–§–ó ‚Ññ229-–§–ó, —Å—Ç. 99", "–§–ó ‚Ññ178-–§–ó"],
                "contexts": ["–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω–æ", "—Ä–∞—Å—á—ë—Ç —É–¥–µ—Ä–∂–∞–Ω–∏–π", "–∏—Å–∫–ª—é—á–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏–π"]
            },
            "–ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–∞": {
                "synonyms": ["–æ–ø–ª–∞—Ç–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "—á–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ", "–∑–∞—á—ë—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã", "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153", "–ì–ö –†–§, —Å—Ç. 409"],
                "contexts": ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–≥–∞—à–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç –æ—Å—Ç–∞—Ç–∫–∞", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã", "—Å–Ω—è—Ç–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ì–ò–° –ñ–ö–•"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "fssprus.ru", "vsrf.ru", "bankrot.fedresurs.ru", "roscomnadzor.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".fssprus.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö–• –§–ó 229-–§–ó")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–µ—Ç—É –≤—ã–µ–∑–¥–∞ –∑–∞ –¥–æ–ª–≥–∏")
        queries.append(f"{query} –∫–∞–∫ —Å–ø–∏—Å–∞—Ç—å –¥–æ–ª–≥ –∑–∞ –ñ–ö–• —á–µ—Ä–µ–∑ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ")
        queries.append(f"{query} –æ–±—Ä–∞–∑–µ—Ü –∑–∞—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Å—Ä–æ—á–∫–µ –¥–æ–ª–≥–∞ –£–ö")
        queries.append(f"{query} —Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–æ–ª–≥–∞–º –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å, –ø–µ–Ω–∏, —Ä–∞—Å—Å—Ä–æ—á–∫–∞, –≤–∑—ã—Å–∫–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å—é –≤ –ñ–ö–•. –î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "3. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–ñ–ö –†–§, —Å—Ç. 155.1], [–§–ó ‚Ññ229-–§–ó, —Å—Ç. 69]).\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –§–ó > –ü–ü –†–§ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: —á—Ç–æ –¥–µ–ª–∞—Ç—å, –ø—Ä–∞–≤–∞, —Å—Ä–æ–∫–∏)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–ñ–ö –†–§, –§–ó, –ü–ü –†–§, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏)\n"
            "- –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "  * –†–∞—Å—Å—Ä–æ—á–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–ñ–ö –†–§, —Å—Ç. 155.1)\n"
            "  * –ü–æ–¥–∞—á–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –£–ö, –ì–ñ–ò (–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12)\n"
            "  * –í–∑—ã—Å–∫–∞–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Å—É–¥ (–ì–ü–ö –†–§, —Å—Ç. 131)\n"
            "  * –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ (–§–ó ‚Ññ229-–§–ó, —Å—Ç. 69)\n"
            "  * –ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–∏–∫–∞ (–§–ó ‚Ññ127-–§–ó)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ü—Ä–∏–º–µ—Ä: –¥–æ–ª–≥ 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí –ü–µ–Ω–∏ = 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "[**–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX –æ—Ç –î–î.–ú–ú.–ì–ì–ì–ì** ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞]\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç. 155, 155.1, 158 ‚Äî —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã, –ø–µ–Ω–∏, –≤–∑—ã—Å–∫–∞–Ω–∏–µ)\n"
            "- –§–ó ‚Ññ229-–§–ó ¬´–û–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ¬ª\n"
            "- –§–ó ‚Ññ230-–§–ó ¬´–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –¥–æ–ª–∂–Ω–∏–∫–æ–≤¬ª\n"
            "- –§–ó ‚Ññ127-–§–ó ¬´–û –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ¬ª\n"
            "- –ì–ö –†–§ (—Å—Ç. 196 ‚Äî –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 8 ‚Äî –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á—ë—Ç–æ–≤)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
        
class IoTIntegrationAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IoT", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—É–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫": {
                "synonyms": ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫", "—Å—á—ë—Ç—á–∏–∫ —Å GSM", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)", "–ü–ü –†–§ ‚Ññ354, –ø. 31"],
                "contexts": ["–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–ò–° –ñ–ö–•", "—Ç–∞—Ä–∏—Ñ—ã", "–∑–∞–º–µ–Ω–∞", "–ø–æ–≤–µ—Ä–∫–∞"]
            },
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞": {
                "synonyms": ["–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "–∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞", "API –ø–µ—Ä–µ–¥–∞—á–∏"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 31(1)"],
                "contexts": ["–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–µ—Ä–µ–¥–∞—á–∏", "–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å", "–æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏", "—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –∫–∞–∫ –¥—É–±–ª—å"]
            },
            "–¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞": {
                "synonyms": ["—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", "–ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤", "—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ª–æ–≥–∏ —Å–µ–Ω—Å–æ—Ä–æ–≤", "–ø–∞–∫–µ—Ç—ã –¥–∞–Ω–Ω—ã—Ö"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó", "–ü–ü –†–§ ‚Ññ689"],
                "contexts": ["—Ñ–æ—Ä–º–∞—Ç—ã (JSON, XML)", "—á–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞", "—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–∞–Ω–æ–º–∞–ª–∏–∏", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"]
            },
            "–∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ": {
                "synonyms": ["—Ä–µ–∑–∫–∏–π —Å–∫–∞—á–æ–∫", "—É—Ç–µ—á–∫–∞ –≤–æ–¥—ã", "–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ", "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å", "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∞–Ω–æ–º–∞–ª–∏–∏"],
                "norm_refs": [],
                "contexts": ["–∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "–ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–∂—É—Ä–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π"]
            },
            "—É—Ç–µ—á–∫–∞ –≤–æ–¥—ã": {
                "synonyms": ["–ø—Ä–æ—Ç–µ—á–∫–∞", "–∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ", "–∞–≤–∞—Ä–∏—è –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", "–¥–∞—Ç—á–∏–∫ –ø—Ä–æ—Ç–µ—á–∫–∏", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ"],
                "norm_refs": [],
                "contexts": ["—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∫—Ä–∞–Ω–∞", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –£–ö", "–∞–∫—Ç –∞–≤–∞—Ä–∏–∏"]
            },
            "—ç–Ω–µ—Ä–≥–æ–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": {
                "synonyms": ["–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–∞–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏", "–ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "—Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç", "—É–º–Ω—ã–π –¥–æ–º"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["–≥—Ä–∞—Ñ–∏–∫–∏", "–ø–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏", "—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –∑–æ–Ω—ã", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–¢–ü"]
            },
            "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º": {
                "synonyms": ["–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "–¥–∞—à–±–æ—Ä–¥", "–≤–∏–¥–∂–µ—Ç—ã"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó", "–ü–ü –†–§ ‚Ññ689"],
                "contexts": ["UX/UI", "push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞", "—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"]
            },
            "MQTT": {
                "synonyms": ["–ø—Ä–æ—Ç–æ–∫–æ–ª MQTT", "IoT –ø—Ä–æ—Ç–æ–∫–æ–ª", "–±—Ä–æ–∫–µ—Ä MQTT", "publish/subscribe", "Mosquitto"],
                "norm_refs": [],
                "contexts": ["–ª—ë–≥–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª", "–Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å", "QoS —É—Ä–æ–≤–Ω–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (TLS)", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Home Assistant"]
            },
            "Zigbee": {
                "synonyms": ["—Ä–∞–¥–∏–æ–ø—Ä–æ—Ç–æ–∫–æ–ª Zigbee", "—É–º–Ω—ã–π –¥–æ–º Zigbee", "Zigbee 3.0", "—Å–µ–Ω—Å–æ—Ä—ã Zigbee", "—Ö–∞–± Zigbee"],
                "norm_refs": [],
                "contexts": ["—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å–µ—Ç—å-—è—á–µ–∏—Å—Ç–∞—è", "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å AES-128"]
            },
            "LoRaWAN": {
                "synonyms": ["–¥–∞–ª—å–Ω–∏–π —Ä–∞–¥–∏–æ–∫–∞–Ω–∞–ª", "LPWAN", "–≥–æ—Ä–æ–¥—Å–∫–∞—è —Å–µ—Ç—å", "–¥–∞—Ç—á–∏–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ", "—É–º–Ω—ã–π –≥–æ—Ä–æ–¥"],
                "norm_refs": [],
                "contexts": ["–±–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å", "–Ω–∏–∑–∫–æ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "–ø—É–±–ª–∏—á–Ω—ã–µ —Å–µ—Ç–∏", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "—Ç–∞—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"]
            },
            "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º": {
                "synonyms": ["Telegram-–±–æ—Ç", "–æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ WhatsApp", "push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "SMS-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "email-—Ä–∞—Å—Å—ã–ª–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó, —Å—Ç. 9", "–ü–ü –†–§ ‚Ññ689"],
                "contexts": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞", "—Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–æ—Ç–∫–∞–∑ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤", "—à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"]
            },
            "API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏": {
                "synonyms": ["–≤–µ–±—Ö—É–∫–∏", "REST API", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API", "SDK", "GraphQL"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (OAuth2, API-–∫–ª—é—á–∏)", "rate limiting", "–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "HTTPS"]
            },
            "–≤–µ–±—Ö—É–∫–∏": {
                "synonyms": ["webhook", "callback", "HTTP-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "event-driven"],
                "norm_refs": ["–§–ó ‚Ññ149-–§–ó", "–§–ó ‚Ññ152-–§–ó"],
                "contexts": ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ URL", "–ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (HMAC)", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (HTTPS)"]
            },
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö": {
                "synonyms": ["–∑–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ", "GDPR", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
                "norm_refs": ["–§–ó ‚Ññ152-–§–ó", "–ü–ü –†–§ ‚Ññ689", "–§–ó ‚Ññ149-–§–ó"],
                "contexts": ["TLS/SSL", "–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∞—É–¥–∏—Ç—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"]
            },
            "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è": {
                "synonyms": ["–±—É–¥—É—â–µ–µ IoT", "—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ñ–ö–•", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫"],
                "norm_refs": [],
                "contexts": ["–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã", "–≥—Ä–∞–Ω—Ç—ã", "–ø–∏–ª–æ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è", "–∏–º–ø–æ—Ä—Ç–æ–∑–∞–º–µ—â–µ–Ω–∏–µ"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "digital.gov.ru", "roskomnadzor.ru", "fct.gov.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".roskomnadzor.ru", ".digital.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 152-–§–ó IoT –ñ–ö–•")
        queries.append(f"{query} –ü–ü –†–§ 689 –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        queries.append(f"{query} —É–º–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API")
        queries.append(f"{query} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–∞—Ç—á–∏–∫–∏ –ø—Ä–æ—Ç–µ—á–∫–∏")
        queries.append(f"{query} MQTT Zigbee LoRaWAN —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IoT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: IoT, —Ü–∏—Ñ—Ä–æ–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –ø–æ –¥–∞–Ω–Ω—ã–º
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = [
            "–ø–µ–Ω–∏", "–ø–µ–Ω—è", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É",
            "—Å—Ç–∞–≤–∫–∞ —Ü–±", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏"
        ]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é IoT –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –ñ–ö–•. "
            "–î–∞–π —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Üí –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
            "3. –ü–æ–¥–∫—Ä–µ–ø–ª—è–π –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã ([–§–ó ‚Ññ152-–§–ó, —Å—Ç. 9], [–ü–ü –†–§ ‚Ññ689, –ø. 4]).\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –§–ó > –ü–ü –†–§ > —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:\n"
            "- –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n"
            "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ / –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–≥–ª–∞—Å–∏–µ –∂–∏–ª—å—Ü–æ–≤, –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)\n"
            "- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é (—ç—Ç–∞–ø—ã, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏, –ø—Ä–∏–º–µ—Ä—ã –∫–µ–π—Å–æ–≤)\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á–µ—Ç –ø–µ–Ω–∏ (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞: [–ñ–ö –†–§, —Å—Ç. 155.1]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö [–§–ó ‚Ññ44-–§–ó, –ü–ü –†–§ ‚Ññ329]\n"
                "- –ü—Ä–∏–º–µ—Ä: –¥–æ–ª–≥ 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí –ü–µ–Ω–∏ = 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã.\n"
            )
    
        system_prompt += (
            "\n### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ152-–§–ó ¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª\n"
            "- –ü–ü –†–§ ‚Ññ689 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª\n"
            "- –§–ó ‚Ññ149-–§–ó ¬´–û–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ò–¢ –∏ –∑–∞—â–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏¬ª\n"
            "- –§–ó ‚Ññ261-–§–ó (—É–º–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤)\n\n"
            f"{self.get_role_instruction(role)}"
        )
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

        
class WasteManagementAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–í—ã–≤–æ–∑ –¢–ö–û", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ç–∫–æ": {
                "synonyms": ["—Ç–≤–µ—Ä–¥—ã–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã", "–±—ã—Ç–æ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã", "–º—É—Å–æ—Ä", "–≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞", "–æ–±—Ä–∞—â–µ–Ω–∏–µ —Å –æ—Ç—Ö–æ–¥–∞–º–∏"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 8"],
                "contexts": ["—Ç–∞—Ä–∏—Ñ", "–Ω–æ—Ä–º–∞—Ç–∏–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–æ–±—ä—ë–º"]
            },
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä": {
                "synonyms": ["—Ä–æ", "–æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–∫–æ", "—Ä–µ–≥–æ–ø–µ—Ä–∞—Ç–æ—Ä", "–∫–æ–º–ø–∞–Ω–∏—è –ø–æ –≤—ã–≤–æ–∑—É –º—É—Å–æ—Ä–∞"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 24.7", "–ü–ü –†–§ ‚Ññ1156"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "—Ç–∞—Ä–∏—Ñ—ã", "–≥—Ä–∞—Ñ–∏–∫ –≤—ã–≤–æ–∑–∞", "–∂–∞–ª–æ–±—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞": {
                "synonyms": ["–º—É—Å–æ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞", "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "—É–±–æ—Ä–∫–∞ –ø–ª–æ—â–∞–¥–∫–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 8.1"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö", "–≥—Ä–∞—Ñ–∏–∫ —É–±–æ—Ä–∫–∏", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", "–∫—Ä—ã—Å—ã", "–º—É—Ö–∏", "–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è"]
            },
            "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –∑–∞ –º—É—Å–æ—Ä": {
                "synonyms": ["–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç —Ç–∫–æ", "–Ω–µ –≤—ã–≤–æ–∑—è—Ç –º—É—Å–æ—Ä", "–Ω–µ –æ–∫–∞–∑–∞–Ω–∞ —É—Å–ª—É–≥–∞", "–∞–∫—Ç –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤—ã–≤–æ–∑–∞", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 154", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Å—Ä–æ–∫–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∂–∞–ª–æ–±–∞ –≤ –£–ö/–†–û", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–Ω–æ—Ä–º–∞—Ç–∏–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è": {
                "synonyms": ["–æ–±—ä—ë–º —Ç–∫–æ", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∫—É–±–æ–º–µ—Ç—Ä—ã –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞", "—Ç–∞—Ä–∏—Ñ –ø–æ –ø–ª–æ—â–∞–¥–∏", "—Ç–∞—Ä–∏—Ñ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 148", "–ü–ü –†–§ ‚Ññ269"],
                "contexts": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è", "—Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞", "—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã"]
            },
            "—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä": {
                "synonyms": ["—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", "—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–∑", "–≤—Ç–æ—Ä—Å—ã—Ä—å—ë", "–ø–ª–∞—Å—Ç–∏–∫", "—Å—Ç–µ–∫–ª–æ", "–±—É–º–∞–≥–∞", "–º–µ—Ç–∞–ª–ª"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 13.1", "–ü–ü –†–§ ‚Ññ1342"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å 2025 –≥–æ–¥–∞", "—Ü–≤–µ—Ç–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", "—ç–∫–æ–º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", "–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è": {
                "synonyms": ["–∑–∞–ø–∞—Ö", "–∫—Ä—ã—Å—ã", "–º—ã—à–∏", "–≥—Ä—ã–∑—É–Ω—ã", "–º—É—Ö–∏", "–¥–µ—Ä–∞—Ç–∏–∑–∞—Ü–∏—è", "–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è", "—Å–∞–Ω—ç–ø–∏–¥–µ–º—Å—Ç–∞–Ω—Ü–∏—è", "—Å—ç—Å"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 8.1", "–§–ó ‚Ññ52-–§–ó"],
                "contexts": ["–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä", "–∞–∫—Ç —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –£–ö", "—à—Ç—Ä–∞—Ñ—ã", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ-—ç–ø–∏–¥–µ–º–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"]
            },
            "–Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞": {
                "synonyms": ["–Ω–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å–≤–∞–ª–∫–∞", "—Å–≤–∞–ª–∫–∞", "–Ω–∞–≤–∞–ª", "—Å–∫–æ–ø–ª–µ–Ω–∏–µ", "–Ω–∞–≤–∞–ª–µ–Ω–æ", "–ø–æ–∂–∞—Ä–æ–æ–ø–∞—Å–Ω—ã–π", "–æ–ø–∞—Å–Ω—ã–π"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 8.1", "–ö–æ–ê–ü –†–§, —Å—Ç. 8.2"],
                "contexts": ["–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø—Ä–∏—Ä–æ–¥–Ω–∞–¥–∑–æ—Ä", "—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–Ω–æ–≤–Ω—ã—Ö", "—É–±–æ—Ä–∫–∞ –∑–∞ —Å—á—ë—Ç –±—é–¥–∂–µ—Ç–∞", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã": {
                "synonyms": ["–±–∞—Ç–∞—Ä–µ–π–∫–∏", "–ª–∞–º–ø–æ—á–∫–∏", "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã", "—Ä—Ç—É—Ç—å—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ", "–≥—Ä–∞–¥—É—Å–Ω–∏–∫", "—Ç–µ—Ä–º–æ–º–µ—Ç—Ä", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Ññ712"],
                "contexts": ["–∫–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–∑–∞–ø—Ä–µ—Ç –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ", "—É—Ç–∏–ª–∏–∑–∞—Ü–∏—è"]
            },
            "–∞–≤—Ç–æ—à–∏–Ω—ã": {
                "synonyms": ["–ø–æ–∫—Ä—ã—à–∫–∏", "—Ä–µ–∑–∏–Ω–∞", "–∫–æ–ª—ë—Å–∞", "—É—Ç–∏–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω", "–ø—É–Ω–∫—Ç –ø—Ä–∏—ë–º–∞ —à–∏–Ω"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω–ø—Ä–∏—Ä–æ–¥—ã ‚Ññ779"],
                "contexts": ["–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –¢–ö–û", "–∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞", "—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–∑–∞", "—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–æ–≥—Ä—É–∑—á–∏–∫"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –º—É—Å–æ—Ä": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ —Ç–∫–æ", "–Ω–µ —É–±—Ä–∞–ª–∏", "—Å–∫–æ–ø–∏–ª–æ—Å—å", "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–∂–∞–ª–æ–±–∞ –Ω–∞ —É–∫"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 30 –¥–Ω–µ–π", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò/–†–æ—Å–ø—Ä–∏—Ä–æ–¥–Ω–∞–¥–∑–æ—Ä", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ"]
            },
            "–≥—Ä–∞—Ñ–∏–∫ –≤—ã–≤–æ–∑–∞": {
                "synonyms": ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–≤–æ–∑–∞", "—á–∞—Å—Ç–æ—Ç–∞ –≤—ã–≤–æ–∑–∞", "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "—á–µ—Ä–µ–∑ –¥–µ–Ω—å", "–ø–æ –≥—Ä–∞—Ñ–∏–∫—É"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 24.7", "–ü–ü –†–§ ‚Ññ1156"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ", "–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –†–û", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"]
            },
            "—Ç–∞—Ä–∏—Ñ –Ω–∞ –≤—ã–≤–æ–∑": {
                "synonyms": ["—Ç–∞—Ä–∏—Ñ —Ç–∫–æ", "—Ä–∞—Å—á–µ—Ç –∑–∞ —Ç–∫–æ", "–ø–ª–∞—Ç–∞ –∑–∞ –º—É—Å–æ—Ä", "–Ω–æ—Ä–º–∞—Ç–∏–≤ + —Ç–∞—Ä–∏—Ñ", "–æ–±—ä—ë–º √ó —Ç–∞—Ä–∏—Ñ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 148", "–§–ó ‚Ññ210-–§–ó"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –ø–ª–æ—â–∞–¥–∏/–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", "–∂–∞–ª–æ–±–∞ –≤ –§–ê–°", "–§–ì–ò–° –¢–ö–û"]
            },
            "–ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞": {
                "synonyms": ["–ø—É–Ω–∫—Ç –ø—Ä–∏—ë–º–∞", "—ç–∫–æ–ø—É–Ω–∫—Ç", "—Ü–µ–Ω—Ç—Ä –ø—Ä–∏—ë–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è", "–ø—É–Ω–∫—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", "–ø—É–Ω–∫—Ç —Å–±–æ—Ä–∞ –æ–ø–∞—Å–Ω—ã—Ö –æ—Ç—Ö–æ–¥–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 13.1", "–ü–ü –†–§ ‚Ññ1342"],
                "contexts": ["–∞–¥—Ä–µ—Å–∞", "–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "–ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –æ—Ç—Ö–æ–¥—ã", "–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–¥–∞—á–∞", "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–æ–Ω—É—Å—ã"]
            },
            "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç—Ö–æ–¥–æ–≤": {
                "synonyms": ["—Å–º–µ—à–∏–≤–∞—Ç—å –æ—Ç—Ö–æ–¥—ã", "–±–∞—Ç–∞—Ä–µ–π–∫–∏ —Å –º—É—Å–æ—Ä–æ–º", "—Ä—Ç—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ", "–æ–ø–∞—Å–Ω—ã–µ —Å –±—ã—Ç–æ–≤—ã–º–∏", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ89-–§–ó, —Å—Ç. 13.1", "–ö–æ–ê–ü –†–§, —Å—Ç. 8.2"],
                "contexts": ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–∑–∞–ø—Ä–µ—Ç", "—Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä", "—à—Ç—Ä–∞—Ñ—ã", "—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —É—â–µ—Ä–±"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "rpn.gov.ru", "mnr.gov.ru", "rosconsumnadzor.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".rpn.gov.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 89-–§–ó –¢–ö–û")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 8")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç—É –∑–∞ –¢–ö–û")
        queries.append(f"{query} –∫–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–µ–∫ –ª–∞–º–ø–æ—á–µ–∫")
        queries.append(f"{query} –∫—É–¥–∞ —Å–¥–∞—Ç—å –∞–≤—Ç–æ—à–∏–Ω—ã –ø–æ–∫—Ä—ã—à–∫–∏")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –í—ã–≤–æ–∑ –¢–ö–û
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤, –∑–∞–ø—Ä–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è, –ø–æ—Ä—è–¥–æ–∫ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏, —Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        hazardous_keywords = [
            "–∞–≤—Ç–æ—à–∏–Ω—ã", "–ø–æ–∫—Ä—ã—à–∫–∏", "—Ä–µ–∑–∏–Ω–∞", "–±–∞—Ç–∞—Ä–µ–π–∫–∏", "–ª–∞–º–ø–æ—á–∫–∏",
            "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã", "—Ä—Ç—É—Ç—å—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ", "–≥—Ä–∞–¥—É—Å–Ω–∏–∫",
            "—Ç–µ—Ä–º–æ–º–µ—Ç—Ä", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Ç—Ö–æ–¥—ã", "—Ä—Ç—É—Ç—å", "–∫–∏—Å–ª–æ—Ç–∞",
            "–∫—Ä–∞—Å–∫–∞", "–ª–∞–∫", "–º–∞—Å–ª–æ", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –º—É—Å–æ—Ä", "—Ç–µ—Ö–Ω–∏–∫–∞", "–º–µ–±–µ–ª—å"
        ]
        mentions_hazardous = any(kw in q_lower for kw in hazardous_keywords)
    
        mixing_keywords = [
            "—Å–º–µ—à–∏–≤–∞–Ω–∏–µ", "—Å–º–µ—à–∏–≤–∞—Ç—å", "–±–∞—Ç–∞—Ä–µ–π–∫–∏ —Å –º—É—Å–æ—Ä–æ–º", "—Ä—Ç—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ",
            "–æ–ø–∞—Å–Ω—ã–µ —Å –±—ã—Ç–æ–≤—ã–º–∏", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", "–≤–º–µ—Å—Ç–µ —Å —Ç–∫–æ"
        ]
        mentions_mixing = any(kw in q_lower for kw in mixing_keywords)
    
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é —Å —Ç–≤—ë—Ä–¥—ã–º–∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏ (–¢–ö–û) –≤ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –£–ö.'\n"
            "2. –£–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (–§–ó, –ü–ü –†–§, –°–∞–Ω–ü–∏–ù, –ö–æ–ê–ü).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤ ‚Üí –∑–∞–ø—Ä–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è ‚Üí –ø–æ—Ä—è–¥–æ–∫ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ ‚Üí –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç—ã ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏ –∏–ª–∏ —à—Ç—Ä–∞—Ñ–æ–≤.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤ –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
        )
    
        if mentions_hazardous:
            system_prompt += (
                "--- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤ ---\n"
                "1. –ö–ª–∞—Å—Å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: [—É–∫–∞–∑–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ '–Ω–µ —É–∫–∞–∑–∞–Ω']\n"
                "2. –û—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∫ –¢–ö–û: [–î–∞/–ù–µ—Ç]\n"
                "3. –†–∞–∑—Ä–µ—à–µ–Ω–æ –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏–µ: [–î–∞/–ù–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –§–ó ‚Ññ89-–§–ó, —Å—Ç.12]\n"
                "4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é: [–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫/–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω]\n"
                "5. –°–ø–æ—Å–æ–± —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏: [–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞, —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞]\n\n"
            )
    
        if mentions_mixing:
            system_prompt += (
                "--- –ó–∞–ø—Ä–µ—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è ---\n"
                "–°–º–µ—à–∏–≤–∞–Ω–∏–µ –æ—Ç—Ö–æ–¥–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –§–ó ‚Ññ89-–§–ó, —Å—Ç. 13.1.\n"
                "–ù–∞—Ä—É—à–µ–Ω–∏–µ –≤–ª–µ—á–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Å—Ç. 8.2 –ö–æ–ê–ü –†–§.\n\n"
            )
    
        system_prompt += (
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó ‚Ññ89-–§–ó, –ü–ü –†–§, –°–∞–Ω–ü–∏–ù]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: [—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞, —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è]\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: [–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∑–∞—Ç—å; –∏–Ω–∞—á–µ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']\n\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ89-–§–ó ¬´–û–± –æ—Ç—Ö–æ–¥–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã –∑–∞ –¢–ö–û)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21\n"
            "- –ö–æ–ê–ü –†–§, —Å—Ç. 8.2\n"
        )
    
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: ‚â§ 9.5% –≥–æ–¥–æ–≤—ã—Ö\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        return (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )

class AccountManagementAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç": {
                "synonyms": ["–ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç", "–µ–¥–∏–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç", "–µ–¥–ª—Å", "—Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç –∂–∏–ª—å—Ü–∞", "–Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 93"],
                "contexts": ["–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–∑–∞–∫—Ä—ã—Ç–∏–µ", "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ", "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã"]
            },
            "–æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—á–µ—Ç–∞": {
                "synonyms": ["–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤", "—Å–ª–∏—è–Ω–∏–µ —Å—á–µ—Ç–æ–≤", "–µ–¥–∏–Ω—ã–π —Å—á—ë—Ç –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–æ–¥–∏–Ω —Å—á—ë—Ç –Ω–∞ –≤—Å–µ—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 93(4)"],
                "contexts": ["–ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", "–∂—É—Ä–Ω–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
            },
            "—Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—á–µ—Ç": {
                "synonyms": ["—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∏", "–æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á—ë—Ç –Ω–∞ –¥–æ–ª—é", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154(2)", "–ü–ü –†–§ ‚Ññ354, –ø. 94(2)"],
                "contexts": ["–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è", "—Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º"]
            },
            "–ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å —Å—á–µ—Ç": {
                "synonyms": ["—Å–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—á—ë—Ç–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 93(3)"],
                "contexts": ["–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø—Ä–∞–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–∞–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "—Å—Ä–æ–∫–∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"]
            },
            "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": {
                "synonyms": ["–ø–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 185", "–ñ–ö –†–§, —Å—Ç. 154"],
                "contexts": ["–ø—Ä–∞–≤–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–æ–±—Ä–∞–∑–µ—Ü –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –£–ö", "–æ—Ç–º–µ–Ω–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"]
            },
            "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫": {
                "synonyms": ["–Ω–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–≤–ª–∞–¥–µ–ª–µ—Ü", "–ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å", "–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä", "–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 153", "–§–ó ‚Ññ218-–§–ó"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ –æ–ø–ª–∞—Ç–µ", "–ø—Ä–∞–≤–æ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–æ–º", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∞"]
            },
            "–ø—Ä–∞–≤–æ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã": {
                "synonyms": ["–≤—ã–ø–∏—Å–∫–∞ –µ–≥—Ä–Ω", "–¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏", "–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç", "–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç"],
                "norm_refs": ["–§–ó ‚Ññ218-–§–ó", "–ñ–ö –†–§, —Å—Ç. 154"],
                "contexts": ["–¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∞", "–≥–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∞—Ä—Ö–∏–≤–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏"]
            },
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∞": {
                "synonyms": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–ø—Ä–æ–ø–∏—Å–∫–∞", "–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª"],
                "norm_refs": ["–§–ó ‚Ññ5242-1", "–ü–ü –†–§ ‚Ññ713"],
                "contexts": ["–≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Å—Ä–æ–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
            },
            "–æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç": {
                "synonyms": ["—Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç–∞", "–ø–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —É—á—ë—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 93(1)"],
                "contexts": ["–ø—Ä–∏ –∑–∞—Å–µ–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏", "–ø–æ—Å–ª–µ –ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏–∏", "–ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∞", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è"]
            },
            "–∑–∞–∫—Ä—ã—Ç—å —Å—á–µ—Ç": {
                "synonyms": ["–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —É—á—ë—Ç–∞", "–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è —Å—á—ë—Ç–∞", "—Å—á—ë—Ç –∑–∞–∫—Ä—ã—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ354, –ø. 93(5)"],
                "contexts": ["–ø—Ä–∏ —Å–Ω–æ—Å–µ –¥–æ–º–∞", "–ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å—á—ë—Ç–æ–≤", "–ø—Ä–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞", "–ø–æ–≥–∞—à–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–∞—Ä—Ö–∏–≤–∞—Ü–∏—è"]
            },
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏": {
                "synonyms": ["—Ä–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±—ë–Ω–∫–∞", "—Å–º–µ—Ä—Ç—å", "—Ä–∞–∑–≤–æ–¥", "–±—Ä–∞–∫", "–≤—ã–ø–∏—Å–∫–∞/–ø—Ä–æ–ø–∏—Å–∫–∞", "–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 93(3)", "–ñ–ö –†–§, —Å—Ç. 154"],
                "contexts": ["–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ì–ò–° –ñ–ö–•", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –£–ö", "—Å—Ä–æ–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (5 –¥–Ω–µ–π)"]
            },
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": {
                "synonyms": ["–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É", "–≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–ø–∞—Å–ø–æ—Ä—Ç", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–µ ‚Ññ6", "–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713", "–§–ó ‚Ññ5242-1"],
                "contexts": ["–ú–§–¶", "–ì–æ—Å—É—Å–ª—É–≥–∏", "–ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª", "—Å—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (3-8 –¥–Ω–µ–π)", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤"]
            },
            "–ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤": {
                "synonyms": ["–¥–∞—Ä–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–∫—É–ø–ª—è-–ø—Ä–æ–¥–∞–∂–∞", "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ", "—Ä–µ–Ω—Ç–∞", "–º–µ–Ω–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É"],
                "norm_refs": ["–ì–ö –†–§, –≥–ª. 30-33", "–§–ó ‚Ññ218-–§–ó"],
                "contexts": ["—Ä–µ–µ—Å—Ç—Ä–æ–≤–∞—è –∑–∞–ø–∏—Å—å", "–∞–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –£–ö", "–ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–¥–æ–ª–≥–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"]
            },
            "–≤—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ù": {
                "synonyms": ["–≤—ã–ø–∏—Å–∫–∞ –µ–≥—Ä–Ω", "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –ø—Ä–∞–≤–µ", "–¥–æ–∫—É–º–µ–Ω—Ç –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–æ–Ω–ª–∞–π–Ω –≤—ã–ø–∏—Å–∫–∞", "–∞—Ä—Ö–∏–≤–Ω–∞—è –≤—ã–ø–∏—Å–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ218-–§–ó, —Å—Ç. 62", "–ü–ü –†–§ ‚Ññ753"],
                "contexts": ["–¥–ª—è –£–ö", "–¥–ª—è —Å—É–¥–∞", "–¥–ª—è –Ω–æ—Ç–∞—Ä–∏—É—Å–∞", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", "–ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç": {
                "synonyms": ["–∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç", "—Ç–µ—Ö–ø–ª–∞–Ω", "—ç–∫—Å–ø–ª–∏–∫–∞—Ü–∏—è", "–ø–æ—ç—Ç–∞–∂–Ω—ã–π –ø–ª–∞–Ω", "–ë–¢–ò"],
                "norm_refs": ["–§–ó ‚Ññ221-–§–ó", "–ü–ü –†–§ ‚Ññ1463"],
                "contexts": ["–¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—á—ë—Ç–∞", "–¥–ª—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏", "–¥–ª—è —Å—É–¥–∞", "–¥–ª—è –Ω–æ—Ç–∞—Ä–∏—É—Å–∞", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "rosreestr.gov.ru", "gosuslugi.ru", "–º—Ñ—Ü.—Ä—Ñ", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".rosreestr.gov.ru", ".gosuslugi.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 154 –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 9")
        queries.append(f"{query} –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞")
        queries.append(f"{query} –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞")
        queries.append(f"{query} –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã–º —Å—á–µ—Ç–æ–º –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –æ—Ç–∫—Ä—ã—Ç–∏–µ, –∑–∞–∫—Ä—ã—Ç–∏–µ, —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–∏—Ü–µ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –£–ö.'\n"
            "2. –£–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (–ñ–ö –†–§, –ü–ü –†–§, –§–ó).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ‚Üí —Å–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤ –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, –ü–ü –†–§, –§–ó]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ/–ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏ ‚Äî –ñ–ö –†–§, —Å—Ç.154; –ü–ü –†–§ ‚Ññ354, –ø.93)\n"
            "- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ/–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—á—ë—Ç–∞ (—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, —Å—É–¥–µ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.94)\n"
            "- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –£–ö ‚Äî –ì–ö –†–§, —Å—Ç.185)\n"
            "- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ–º—å–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 5 –¥–Ω–µ–π ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.93(3))\n"
            "- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–∏—Å–∫–∏ –ï–ì–†–ù –∏–ª–∏ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (–†–æ—Å—Ä–µ–µ—Å—Ç—Ä, –ú–§–¶ ‚Äî –§–ó ‚Ññ218-–§–ó)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: [–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∑–∞—Ç—å; –∏–Ω–∞—á–µ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç.153-155)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø.93-94)\n"
            "- –§–ó ‚Ññ218-–§–ó ¬´–û –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏¬ª\n"
            "- –ì–ö –†–§, —Å—Ç.185 (–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è Saiga/LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class ContractAndMeetingAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–î–æ–≥–æ–≤–æ—Ä—ã –∏ —Ä–µ—à–µ–Ω–∏—è –û–°–°", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è": {
                "synonyms": ["–∫–æ–Ω—Ç—Ä–∞–∫—Ç", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–¥–æ–≥–æ–≤–æ—Ä —Å —É–∫", "—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ", "–∑–∞–∫–ª—é—á–µ–Ω", "–ø–æ–¥–ø–∏—Å–∞–Ω"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161-162", "–ü–ü –†–§ ‚Ññ416"],
                "contexts": ["—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ—Ç–∫–∞–∑", "—Å—É–¥–µ–±–Ω–æ–µ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ"]
            },
            "–æ–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤": {
                "synonyms": ["–æ—Å—Å", "—Å–æ–±—Ä–∞–Ω–∏–µ", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "—Ä–µ—à–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è", "—Ä–µ—à–µ–Ω–∏–µ –æ—Å—Å", "–ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Å—Å", "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 44-48", "–ü–ü –†–§ ‚Ññ416"],
                "contexts": ["–æ—á–Ω–∞—è/–∑–∞–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–∫–≤–æ—Ä—É–º", "–ø–æ–≤–µ—Å—Ç–∫–∞", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤"]
            },
            "—Ä–µ–∫–ª–∞–º–∞ –≤ –¥–æ–º–µ": {
                "synonyms": ["—Ä–µ–∫–ª–∞–º–∞ –≤ –ª–∏—Ñ—Ç–µ", "—Ä–µ–∫–ª–∞–º–∞ –≤ –ø–æ–¥—ä–µ–∑–¥–µ", "—Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã", "–¥–æ—Ö–æ–¥ –æ—Ç —Ä–µ–∫–ª–∞–º—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ì–ö –†–§, —Å—Ç. 672"],
                "contexts": ["—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—à–µ–Ω–∏–µ –û–°–°", "—Ü–µ–ª–µ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤", "–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã", "–∑–∞–ø—Ä–µ—Ç –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è"]
            },
            "–∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫": {
                "synonyms": ["–ø—Ä–∏–¥–æ–º–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è", "–∑–µ–º–ª—è –ø–æ–¥ –¥–æ–º–æ–º", "–∞—Ä–µ–Ω–¥–∞ –∑–µ–º–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–º–ª–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ó–ö –†–§, —Å—Ç. 39.20"],
                "contexts": ["–ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–∞—Ä–µ–Ω–¥–∞ —Å –¥–æ—Ö–æ–¥–æ–º", "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Ä–µ—à–µ–Ω–∏–µ –û–°–°", "–≥–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]
            },
            "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä": {
                "synonyms": ["—Å—Ç–∞—Ç—É—Å –¥–æ–≥–æ–≤–æ—Ä–∞", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –¥–æ–≥–æ–≤–æ—Ä–∞"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 168", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ñ–ö –†–§", "—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "—Å—É–¥–µ–±–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"]
            },
            "–Ω–µ—Ü–µ–ª–µ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—Å–ø–∏—Å–∞–ª–∞ –¥–µ–Ω—å–≥–∏", "—Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Å", "—Ü–µ–ª–µ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–æ–ª–≥–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ì–ö –†–§, —Å—Ç. 1102"],
                "contexts": ["–¥–æ—Ö–æ–¥—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã", "—Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—à—Ç—Ä–∞—Ñ—ã", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥", "—Ä–µ–≤–∏–∑–∏—è —Å—á–µ—Ç–æ–≤"]
            },
            "–ø—Ä–∏–µ–º–∫–∞ —Ä–∞–±–æ—Ç": {
                "synonyms": ["–ø—Ä–∏–Ω–∏–º–∞–ª —Ä–∞–±–æ—Ç—ã", "–∞–∫—Ç –ø—Ä–∏–µ–º–∫–∏", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "–∏—Å–ø–æ—Ä—Ç–∏–ª–∏ –∏–º—É—â–µ—Å—Ç–≤–æ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤–µ—Ä—å", "–∫—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 723, 753"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "—Ä–µ–≥—Ä–µ—Å—Å –∫ –ø–æ–¥—Ä—è–¥—á–∏–∫—É"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "–∏—Å–ø–æ—Ä—Ç–∏–ª–∏ –∏–º—É—â–µ—Å—Ç–≤–æ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "–≤–æ–∑–º–µ—Å—Ç–∏—Ç—å —É—â–µ—Ä–±", "–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 723", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["–∞–∫—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "—Å—É–¥–µ–±–Ω—ã–π –∏—Å–∫"]
            },
            "—Ä–µ—à–µ–Ω–∏–µ –æ—Å—Å": {
                "synonyms": ["—Ä–µ—à–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è", "–ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Å—Å", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46", "–ü–ü –†–§ ‚Ññ416, –ø. 21"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö", "—Å—Ä–æ–∫ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è (6 –º–µ—Å—è—Ü–µ–≤)", "–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò"]
            },
            "–∞—Ä–µ–Ω–¥–∞ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞": {
                "synonyms": ["—Ä–µ–∫–ª–∞–º–∞", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–Ω–∫–æ–º–∞—Ç–∞", "–∞—Ä–µ–Ω–¥–∞ –ø–æ–¥–≤–∞–ª–∞", "—Å–¥–∞—á–∞ –≤ –∞—Ä–µ–Ω–¥—É", "–¥–æ—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç—å—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36(4)", "–ì–ö –†–§, —Å—Ç. 672"],
                "contexts": ["—Ä–µ—à–µ–Ω–∏–µ –û–°–° –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ", "–¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã", "—Ü–µ–ª–µ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤", "–æ—Ç—á—ë—Ç –ø–µ—Ä–µ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏"]
            },
            "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞": {
                "synonyms": ["–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞", "–æ—Ç–∫–∞–∑ –æ—Ç —É—Å–ª—É–≥", "—Å–º–µ–Ω–∞ —É–∫", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ—Ç–∫–∞–∑", "–≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162(8)", "–ì–ö –†–§, —Å—Ç. 450"],
                "contexts": ["–ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–ø–æ —Ä–µ—à–µ–Ω–∏—é –û–°–°", "–ø–æ –≤–∏–Ω–µ –£–ö", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –¥–Ω–µ–π", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"]
            },
            "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞": {
                "synonyms": ["–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä", "–Ω–∏—á—Ç–æ–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞", "–æ—Å–ø–æ—Ä–∏–º–∞—è —Å–¥–µ–ª–∫–∞", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –æ—Å—Å"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 166-181", "–ñ–ö –†–§, —Å—Ç. 46(5)"],
                "contexts": ["–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–≤–æ—Ä—É–º–∞", "–Ω–µ–ø—Ä–∞–≤–æ–º–æ—á–Ω–æ—Å—Ç—å –£–ö", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è"]
            },
            "—Ü–µ–ª–µ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞": {
                "synonyms": ["–¥–æ—Ö–æ–¥—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã", "—Å—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã", "—Å—Ä–µ–¥—Å—Ç–≤–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—Å–ø–µ—Ü—Å—á—ë—Ç", "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ü–ü –†–§ ‚Ññ416, –ø. 22"],
                "contexts": ["–∑–∞–ø—Ä–µ—Ç –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –¥–æ–ª–≥–æ–≤", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "—Ä–µ–≤–∏–∑–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥"]
            },
            "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–•", "–∑–∞–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–∫–≤–æ—Ä—É–º", "–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 47", "–ü–ü –†–§ ‚Ññ416, –ø. 12"],
                "contexts": ["2/3 –≥–æ–ª–æ—Å–æ–≤", "50%+1", "—Ä–∞—Å—á—ë—Ç –ø–æ –¥–æ–ª—è–º", "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–æ–ª–æ—Å—É—é—â–∏—Ö", "–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"]
            },
            "–∞–∫—Ç –ø—Ä–∏–µ–º–∫–∏": {
                "synonyms": ["–∞–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç", "–ø—Ä–∏—ë–º–∫–∞-–ø–µ—Ä–µ–¥–∞—á–∞", "–ø–æ–¥–ø–∏—Å–∞—Ç—å –∞–∫—Ç", "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω", "–∑–∞–º–µ—á–∞–Ω–∏—è", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 753", "–ü–ü –†–§ ‚Ññ416, –ø. 20"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è (5 –¥–Ω–µ–π)", "—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "dom.gosuslugi.ru", "gjirf.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gosuslugi.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 161 –¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        queries.append(f"{query} –ü–ü –†–§ 416 –æ–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –£–ö")
        queries.append(f"{query} –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç")
        queries.append(f"{query} –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –æ—Ç —Ä–µ–∫–ª–∞–º—ã –Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏–µ –¥–æ–ª–≥–æ–≤")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –î–æ–≥–æ–≤–æ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –û–°–°
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –û–°–°, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Ä–µ–∫–ª–∞–º–∞
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–≥–æ–≤–æ—Ä–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è–º –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –£–ö.'\n"
            "2. –£–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (–ñ–ö –†–§, –ì–ö –†–§, –ü–ü –†–§).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤ –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, –ì–ö –†–§, –ü–ü –†–§]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ/—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–µ—à–µ–Ω–∏–µ –û–°–°, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –ñ–ö –†–§, —Å—Ç.161-162)\n"
            "- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –û–°–° –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–≤–æ—Ä—É–º, –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ ‚Äî –ü–ü –†–§ ‚Ññ416)\n"
            "- –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã (—Ç–æ–ª—å–∫–æ —Å —Ä–µ—à–µ–Ω–∏–µ–º –û–°–° ‚Äî –ñ–ö –†–§, —Å—Ç.36)\n"
            "- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–º–æ–Ω—Ç–µ (–∞–∫—Ç, –ø—Ä–µ—Ç–µ–Ω–∑–∏—è, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ ‚Äî –ì–ö –†–§, —Å—Ç.723)\n"
            "- –ñ–∞–ª–æ–±—ã –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –û–°–° (–ì–ñ–ò, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞, —Å—É–¥ ‚Äî –ñ–ö –†–§, —Å—Ç.20)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: [–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∑–∞—Ç—å; –∏–Ω–∞—á–µ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (–ì–ª–∞–≤–∞ 6 ‚Äî –û–°–°, —Å—Ç.161-162 ‚Äî –¥–æ–≥–æ–≤–æ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)\n"
            "- –ü–ü –†–§ ‚Ññ416 ¬´–û –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è...¬ª\n"
            "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç.168 ‚Äî –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫, —Å—Ç.723 ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞)\n"
            "- –ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç.39.20 ‚Äî –∞—Ä–µ–Ω–¥–∞ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –ø–æ–¥ –ú–ö–î)\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è Saiga/LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class RegionalMunicipalAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω": {
                "synonyms": ["–∑–∞–∫–æ–Ω —Å—É–±—ä–µ–∫—Ç–∞", "–∑–∞–∫–æ–Ω [–æ–±–ª–∞—Å—Ç—å/–∫—Ä–∞–π/—Ä–µ—Å–ø—É–±–ª–∏–∫–∞]", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç —Ä–µ–≥–∏–æ–Ω–∞", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 158.1", "–§–ó ‚Ññ131-–§–ó, —Å—Ç. 26"],
                "contexts": ["—Ç–∞—Ä–∏—Ñ—ã", "–ª—å–≥–æ—Ç—ã", "–ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–Ω–æ—Ä–º–∞—Ç–∏–≤—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã"]
            },
            "–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –∞–∫—Ç": {
                "synonyms": ["–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º—ç—Ä–∏–∏", "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≤—ã", "–∞–∫—Ç –º–µ—Å—Ç–Ω–æ–≥–æ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]", "—Ä–µ—à–µ–Ω–∏–µ –≥–æ—Ä–æ–¥—Å–∫–æ–π –¥—É–º—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155", "–§–ó ‚Ññ131-–§–ó, —Å—Ç. 14"],
                "contexts": ["—Ç–∞—Ä–∏—Ñ—ã –Ω–∞ —É—Å–ª—É–≥–∏", "—Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã", "–ª—å–≥–æ—Ç—ã", "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"]
            },
            "—Ç–∞—Ä–∏—Ñ –≤ —Ä–µ–≥–∏–æ–Ω–µ": {
                "synonyms": ["—Ç–∞—Ä–∏—Ñ –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –≤ –º–æ—Å–∫–≤–µ", "—Ç–∞—Ä–∏—Ñ –Ω–∞ –≤–æ–¥—É –≤ —Å–ø–±", "—Ç–∞—Ä–∏—Ñ –Ω–∞ —Ç–∫–æ –≤ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ", "—Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –≤ –Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –†–¢–°", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", "–∂–∞–ª–æ–±–∞ –≤ –§–ê–°", "—Ä–∞—Å—á—ë—Ç", "–§–ì–ò–° –¢–∞—Ä–∏—Ñ"]
            },
            "–Ω–æ—Ä–º–∞—Ç–∏–≤ –≤ –≥–æ—Ä–æ–¥–µ": {
                "synonyms": ["–Ω–æ—Ä–º–∞—Ç–∏–≤ –ø–æ —Ç–∫–æ –≤ —Å–ø–±", "–Ω–æ—Ä–º–∞—Ç–∏–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –≤ –º–æ—Å–∫–≤–µ", "–Ω–æ—Ä–º–∞—Ç–∏–≤ –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –∫–∞–∑–∞–Ω–∏", "–Ω–æ—Ä–º–∞—Ç–∏–≤ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –≤ –Ω–∏–∂–Ω–µ–º –Ω–æ–≤–≥–æ—Ä–æ–¥–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ306", "–ü–ü –†–§ ‚Ññ354, –ø. 42"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞", "—Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∂–∞–ª–æ–±–∞ –Ω–∞ –∑–∞–≤—ã—à–µ–Ω–∏–µ"]
            },
            "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞": {
                "synonyms": ["–ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞ [—Ä–µ–≥–∏–æ–Ω]", "–≥—Ä–∞—Ñ–∏–∫ —Ä–µ–º–æ–Ω—Ç–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É", "–ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–º–æ–≤ –Ω–∞ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç", "—Å—Ä–æ–∫–∏ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞ –≤ [–≥–æ—Ä–æ–¥–µ]"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 168", "–§–ó ‚Ññ271-–§–ó"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–æ–º –†–§", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–ø–µ—Ä–µ–Ω–æ—Å —Å—Ä–æ–∫–æ–≤", "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å"]
            },
            "–ª—å–≥–æ—Ç—ã –≤ —Å—É–±—ä–µ–∫—Ç–µ": {
                "synonyms": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã –≤ [—Ä–µ–≥–∏–æ–Ω–µ]", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –≤ [–≥–æ—Ä–æ–¥–µ]", "—Å—É–±—Å–∏–¥–∏–∏ –≤ [–æ–±–ª–∞—Å—Ç–∏]"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 159", "–£–∫–∞–∑ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ ‚Ññ431"],
                "contexts": ["–º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–µ", "–≤–µ—Ç–µ—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞", "–º–æ–ª–æ–¥—ã–µ —Å–µ–º—å–∏", "–ª—å–≥–æ—Ç—ã –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–¥–æ–ø–ª–∞—Ç—ã –∫ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –ª—å–≥–æ—Ç–∞–º"]
            },
            "–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞": {
                "synonyms": ["–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã", "–ø—Ä–∞–≤–∏–ª–∞ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", "–º–µ—Å—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ131-–§–ó, —Å—Ç. 14", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—É–±–æ—Ä–∫–∞ –¥–≤–æ—Ä–æ–≤", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫", "–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞": {
                "synonyms": ["—É–∫–∞–∑ –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞", "–ø—Ä–∏–∫–∞–∑ –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–∞", "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≤—ã —Å—É–±—ä–µ–∫—Ç–∞"],
                "norm_refs": ["–§–ó ‚Ññ131-–§–ó", "–ñ–ö –†–§, —Å—Ç. 158.1"],
                "contexts": ["–≤–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ß–°", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "–ª—å–≥–æ—Ç—ã", "–ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Ä—ã"]
            },
            "—Ñ–≥–∏—Å —Ç–∞—Ä–∏—Ñ": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞—Ä–∏—Ñ", "—Ç–∞—Ä–∏—Ñ—ã –æ–Ω–ª–∞–π–Ω", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "—Ä–µ–µ—Å—Ç—Ä —Ç–∞—Ä–∏—Ñ–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø", "–ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É", "—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "–∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"]
            },
            "—Ä—Ç—Å": {
                "synonyms": ["—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞—Ä–∏—Ñ–Ω–∞—è —Å–ª—É–∂–±–∞", "—Ç–∞—Ä–∏—Ñ–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç", "–¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ü–µ–Ω –∏ —Ç–∞—Ä–∏—Ñ–æ–≤", "—Å–ª—É–∂–±–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º [—Ä–µ–≥–∏–æ–Ω–∞]"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1149"],
                "contexts": ["—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ", "–ø—É–±–ª–∏—á–Ω—ã–µ —Å–ª—É—à–∞–Ω–∏—è", "–∂–∞–ª–æ–±—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã": {
                "synonyms": ["–Ω–æ—Ä–º–∞—Ç–∏–≤—ã –¥–ª—è –ª—å–≥–æ—Ç–Ω–∏–∫–æ–≤", "–ª—å–≥–æ—Ç–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã", "–Ω–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –¥–ª—è –º–∞–ª–æ–∏–º—É—â–∏—Ö", "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä—ë–º—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–∫–æ–Ω—ã"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç —Å—É–±—Å–∏–¥–∏–π", "–ª—å–≥–æ—Ç—ã", "—Ç–∞—Ä–∏—Ñ—ã", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"]
            },
            "–ø—É–±–ª–∏—á–Ω—ã–µ —Å–ª—É—à–∞–Ω–∏—è": {
                "synonyms": ["–æ–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤", "—Å–ª—É—à–∞–Ω–∏—è –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º", "–ø—Ä–∏—ë–º –≥—Ä–∞–∂–¥–∞–Ω", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ñ–ö–•"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó, —Å—Ç. 10", "–§–ó ‚Ññ131-–§–ó"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫–∏", "—É—á–∞—Å—Ç–∏–µ –∂–∏–ª—å—Ü–æ–≤", "–ø—Ä–æ—Ç–æ–∫–æ–ª—ã", "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–∫—Ç": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–∂–∞–ª–æ–±–∞ –≤ –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "–Ω–∞–¥–∑–æ—Ä –ø—Ä–æ–∫—É—Ä–æ—Ä–∞"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó", "–ì–ü–ö –†–§, —Å—Ç. 254"],
                "contexts": ["—Å—Ä–æ–∫ 3 –º–µ—Å—è—Ü–∞", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Å—É–¥–æ–º", "–ø—Ä–∏–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç–∞", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –¥–µ–ª–æ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞"]
            },
            "—Å–∞–π—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞": {
                "synonyms": ["–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç [—Ä–µ–≥–∏–æ–Ω]", "–ø–æ—Ä—Ç–∞–ª [–æ–±–ª–∞—Å—Ç—å].—Ä—Ñ", "—Ç–∞—Ä–∏—Ñ—ã [–≥–æ—Ä–æ–¥].—Ä—Ñ", "–∂–∫—Ö [–∫—Ä–∞–π].—Ä—Ñ"],
                "norm_refs": [],
                "contexts": ["–¥–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º", "–ø–æ–∏—Å–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤", "—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–∫—Ç–∞–º": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Å—É–¥–µ", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∞–∫—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ç—Ä–∏–∏", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 254", "–ö–æ–ê–ü –†–§, —Å—Ç. 30.17"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Ä–æ–ª—å –ø—Ä–æ–∫—É—Ä–æ—Ä–∞", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "regulation.gov.ru", "vsrf.ru", "fstrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".fgis-tarif.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        region_keywords = [
            "–º–æ—Å–∫–≤–∞", "–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥", "—Å–ø–±", "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–∫–∞–∑–∞–Ω—å",
            "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥", "—Å–∞–º–∞—Ä–∞", "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É", "—á–µ–ª—è–±–∏–Ω—Å–∫", "–æ–º—Å–∫"
        ]
        detected_region = None
        for region in region_keywords:
            if region in query.lower():
                detected_region = region
                break

        if detected_region:
            queries.append(f"{query} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç {detected_region}")
            queries.append(f"{query} –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ {detected_region}")
            queries.append(f"{query} —Ç–∞—Ä–∏—Ñ—ã {detected_region} –§–ì–ò–° –¢–∞—Ä–∏—Ñ")
        else:
            queries.append(f"{query} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –ñ–ö–•")
            queries.append(f"{query} –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π –∞–∫—Ç –ñ–ö–•")

        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤")
        queries.append(f"{query} –∫–∞–∫ –Ω–∞–π—Ç–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º—ç—Ä–∏–∏")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –∞–∫—Ç—ã –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ø–æ–∏—Å–∫, –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å, –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö/–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–º –∞–∫—Ç–∞–º –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –≤–∞—à—É –£–ö.'\n"
            "2. –£–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ, —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ).\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö/–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤ –Ω–∞–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç, –≥–¥–µ –Ω–∞–π—Ç–∏, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–æ–º–µ—Ä–∞, –¥–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö/–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö –∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–æ–≤]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ì–¥–µ –Ω–∞–π—Ç–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–∫—Ç–∞ (—Å–∞–π—Ç —Ä–µ–≥–∏–æ–Ω–∞, –§–ì–ò–° –¢–∞—Ä–∏—Ñ, –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥)\n"
            "- –ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å (–¥–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–º–µ–Ω—è—é—â–∏–µ –∞–∫—Ç—ã)\n"
            "- –ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å –∞–∫—Ç (–∂–∞–ª–æ–±–∞ –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É, —Å—É–¥ ‚Äî –§–ó ‚Ññ59-–§–ó, –ì–ü–ö –†–§, —Å—Ç.254)\n"
            "- –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∞–∫—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ (—Ä–∞—Å—á—ë—Ç —Ç–∞—Ä–∏—Ñ–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã, —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–µ)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: [–µ—Å–ª–∏ –µ—Å—Ç—å, —É–∫–∞–∑–∞—Ç—å; –∏–Ω–∞—á–µ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']\n"
            "### –ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç.155, —Å—Ç.158.1, –≥–ª.7 ‚Äî –º–µ—Å—Ç–Ω–æ–µ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)\n"
            "- –§–ó ‚Ññ131-–§–ó ¬´–û–± –æ–±—â–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Å—Ç–Ω–æ–≥–æ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è¬ª\n"
            "- –§–ó ‚Ññ210-–§–ó ¬´–û–± –æ—Å–Ω–æ–≤–∞—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354, ‚Ññ491 ‚Äî —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
            "- –ü–ü –†–§ ‚Ññ1149 ‚Äî –æ –§–ì–ò–° –¢–∞—Ä–∏—Ñ\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class CourtPracticeAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞": {
                "synonyms": ["–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø—Ä–∞–∫—Ç–∏–∫–∞ —Å—É–¥–æ–≤", "—Å—É–¥–µ–±–Ω—ã–µ –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã", "–ø–æ–∑–∏—Ü–∏—è —Å—É–¥–æ–≤", "–∫–∞–∫ —Å—É–¥—ã —Ç—Ä–∞–∫—Ç—É—é—Ç"],
                "norm_refs": [],
                "contexts": ["–∂–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å —Ä—Ñ": {
                "synonyms": ["—Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ —Å—É–¥–∞", "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§", "—Å—É–¥–µ–±–Ω—ã–π –∞–∫—Ç –í–° –†–§", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§"],
                "norm_refs": [],
                "contexts": ["–∏–Ω–¥–µ–∫—Å –¥–µ–ª–∞", "–¥–∞—Ç–∞ –≤—ã–Ω–µ—Å–µ–Ω–∏—è", "–∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è", "–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏—Ö —Å—É–¥–æ–≤", "—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏—Å–∫–∞—Ö"]
            },
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–Ω—É–º–∞ –≤—Å —Ä—Ñ": {
                "synonyms": ["—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤—Å —Ä—Ñ", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–Ω—É–º–∞", "–æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–ª–µ–Ω—É–º–∞", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã—Å—à–µ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏"],
                "norm_refs": [],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Å—É–¥–æ–≤", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º", "–µ–¥–∏–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–ø–æ—Ä–∞—Ö", "—Å—Å—ã–ª–∫–∞ –≤ —Å—É–¥–µ–±–Ω—ã—Ö –∞–∫—Ç–∞—Ö"]
            },
            "–æ–±–∑–æ—Ä —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏": {
                "synonyms": ["–æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏", "–∞–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏–π", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É–¥–æ–≤", "–æ–±–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—É–¥–∞–º"],
                "norm_refs": [],
                "contexts": ["–í–° –†–§", "–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—É–¥—ã", "–∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ —Å—É–¥—ã", "–ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–µ–ª", "–ø–æ –∏—Ç–æ–≥–∞–º –≥–æ–¥–∞/–∫–≤–∞—Ä—Ç–∞–ª–∞"]
            },
            "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ –º–∏–Ω—Å—Ç—Ä–æ—è": {
                "synonyms": ["–ø–∏—Å—å–º–æ –º–∏–Ω—Å—Ç—Ä–æ—è", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"],
                "norm_refs": ["–ñ–ö –†–§", "–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["–Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏", "–Ω–æ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å—É–¥–∞–º–∏", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π", "–ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á—ë—Ç–æ–≤", "—Ñ–æ—Ä–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"]
            },
            "–ø–∏—Å—å–º–æ —Ä–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞": {
                "synonyms": ["—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞", "–ø–∏—Å—å–º–∞ –Ω–∞–¥–∑–æ—Ä–Ω–æ–≥–æ –≤–µ–¥–æ–º—Å—Ç–≤–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"],
                "contexts": ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø–æ–≤–µ—Ä–∫–∞", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"]
            },
            "–ø–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ —Å—É–¥–∞": {
                "synonyms": ["–º–Ω–µ–Ω–∏–µ –í–° –†–§", "–ø–æ–¥—Ö–æ–¥ –í–° –†–§", "–ø—Ä–∞–≤–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è", "–∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å—É–¥–∞", "–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è"],
                "norm_refs": [],
                "contexts": ["—Ü–∏—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∞–ø–µ–ª–ª—è—Ü–∏—è—Ö", "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ—à–µ–Ω–∏–π", "—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"]
            },
            "–∫–∞–∫ —Å—É–¥—ã —Ç—Ä–∞–∫—Ç—É—é—Ç": {
                "synonyms": ["—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞", "—Å—É–¥–µ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ", "–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "–µ–¥–∏–Ω—ã–π –ø–æ–¥—Ö–æ–¥"],
                "norm_refs": [],
                "contexts": ["–Ω–µ—è—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏", "–ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–∫–æ–Ω–µ", "–∞–Ω–∞–ª–æ–≥–∏—è –∑–∞–∫–æ–Ω–∞", "–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ü–ª–µ–Ω—É–º–∞"]
            },
            "–æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∂–∫—Ö": {
                "synonyms": ["–æ–±–∑–æ—Ä –∂–∏–ª–∏—â–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤", "–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç—É", "—Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º", "–∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —É—Å–ª—É–≥", "–æ–±–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–æ–ª–≥–∞–º"],
                "norm_refs": [],
                "contexts": ["–í–° –†–§", "–∫–∞—Å—Å–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–∫—Ä—É–≥–∞", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—É–¥—ã", "–ø–æ –∏—Ç–æ–≥–∞–º –≥–æ–¥–∞", "—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –¥–µ–ª"]
            },
            "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏—Ö –æ—Ä–≥–∞–Ω–æ–≤": {
                "synonyms": ["–ø–∏—Å—å–º–∞ –ì–ñ–ò", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä–∞", "–æ—Ç–≤–µ—Ç—ã –§–ê–°", "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§", "–§–ó ‚Ññ59-–§–ó"],
                "contexts": ["–Ω–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ, –Ω–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ", "–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–µ—Ç–µ–Ω–∑–∏—è—Ö", "–ø—Ä–∏–ª–∞–≥–∞—é—Ç—Å—è –∫ –∏—Å–∫–∞–º", "—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å—É–¥–∞–º–∏", "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫"]
            },
            "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–µ–ª–∞": {
                "synonyms": ["—à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö", "—Ä–∏—Å–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞", "–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è", "—á—Ç–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–¥", "–∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–±–µ–¥—ã"],
                "norm_refs": [],
                "contexts": ["–Ω–∞–ª–∏—á–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –¥–æ—Å—É–¥–µ–±–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§", "–∫–∞—á–µ—Å—Ç–≤–æ –∏—Å–∫–æ–≤–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è"]
            },
            "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π": {
                "synonyms": ["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–∑–∞–≤—ã—à–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–æ—à–∏–±–∫–∞ –≤ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ü–ü –†–§ ‚Ññ354, –ø. 95"],
                "contexts": ["—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–° –†–§", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—à–∏–±–∫–∏", "—Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫": {
                "synonyms": ["–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ—ã", "—Ä–µ–≥—Ä–µ—Å—Å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ì–ö –†–§, —Å—Ç. 1064"],
                "contexts": ["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–∏–Ω—ã", "–∞–∫—Ç—ã, —Ñ–æ—Ç–æ, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è–º", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§ –ø–æ –º–æ—Ä–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–¥—É"]
            },
            "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—Å–ª–∞–±—ã–π –Ω–∞–ø–æ—Ä –≤–æ–¥—ã", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–±–æ—Ä–∫–∏", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–∑–∞–º–µ—Ä—ã", "–∞–∫—Ç—ã", "–∂–∞–ª–æ–±—ã", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –ø–ª–∞—Ç—ã"]
            },
            "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤": {
                "synonyms": ["–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –≤–∑—ã—Å–∫–∞–Ω–∏–∏", "—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "–ø–µ–Ω–∏", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–µ–∑–¥–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 155.1", "–§–ó ‚Ññ229-–§–ó"],
                "contexts": ["–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–ª–≥–∞", "—Ä–∞—Å—á—ë—Ç –ø–µ–Ω–∏", "—Å—Ä–æ–∫–∏ –¥–∞–≤–Ω–æ—Å—Ç–∏", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§ –ø–æ –∑–∞–≤—ã—à–µ–Ω–∏—é –ø–µ–Ω–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–≥–æ –ø—Ä–∏–∫–∞–∑–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "vsrf.ru", "sudrf.ru", "kad.arbitr.ru", "rosreestr.gov.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".sudrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –í–° –†–§ —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ñ–ö–•")
        queries.append(f"{query} –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ –∂–∏–ª–∏—â–Ω—ã–µ —Å–ø–æ—Ä—ã")
        queries.append(f"{query} –æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏ –í–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ –°—É–¥–∞ –ø–æ –ñ–ö–•")
        queries.append(f"{query} —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è –ø–æ –ü–ü –†–§ 354")
        queries.append(f"{query} –ø–∏—Å—å–º–∞ –†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞ –ø–æ –ø–æ–≤–µ—Ä–∫–µ —Å—á—ë—Ç—á–∏–∫–æ–≤")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–π
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è–º –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º –∏ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∏ —Å—É–¥–µ–±–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ ‚Üí –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ > –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –í–° –†–§ > –û–±–∑–æ—Ä—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ > –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è > –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏—Ö —Å—É–¥–æ–≤.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞, —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö, –∫–ª—é—á–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, –ü–ü –†–§, –§–ó ‚Äî —Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–ª–µ–Ω—É–º–∞ –í–° –†–§ ‚ÑñX ‚Äî –∫–ª—é—á–µ–≤–æ–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ\n"
            "- –û–±–∑–æ—Ä —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –≤—ã–≤–æ–¥—ã, —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏\n"
            "- –ü–∏—Å—å–º–æ –ú–∏–Ω—Å—Ç—Ä–æ—è/–†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä–∞ ‚ÑñXXX ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–æ—Ä–º—ã\n\n"
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "- –î–æ–∫—É–º–µ–Ω—Ç—ã: –∞–∫—Ç—ã, —Ä–∞—Å—á—ë—Ç—ã, –ø–µ—Ä–µ–ø–∏—Å–∫–∞\n"
            "- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤ –∏—Å–∫–µ: —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –í–° –†–§\n"
            "- –†–∏—Å–∫–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç—ã: –ø–æ–∑–∏—Ü–∏—è –æ—Ç–≤–µ—Ç—á–∏–∫–∞, –ø—Ä–∞–∫—Ç–∏–∫–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –¥–µ–ª\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            "- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –í–° –†–§ (https://www.vsrf.ru)\n"
            "- –°—É–¥–µ–±–Ω—ã–µ –∞–∫—Ç—ã: kad.arbitr.ru, sudrf.ru, –ì–ê–° ¬´–ü—Ä–∞–≤–æ—Å—É–¥–∏–µ¬ª\n"
            "- –†–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è: –ú–∏–Ω—Å—Ç—Ä–æ–π –†–§, –†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä, –§–ê–°, –ì–ñ–ò\n"
            "- –ù–æ—Ä–º–∞—Ç–∏–≤—ã: –ñ–ö –†–§, –ü–ü –†–§ ‚Ññ354, ‚Ññ491\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class LicensingControlAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –£–ö", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ª–∏—Ü–µ–Ω–∑–∏—è —É–∫": {
                "synonyms": ["–ª–∏—Ü–µ–Ω–∑–∏—è –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ª–∏—Ü–µ–Ω–∑–∏—è –ú–ö–î", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è", "–ø–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏"],
                "norm_refs": ["–§–ó ‚Ññ99-–§–ó, —Å—Ç. 16", "–ñ–ö –†–§, —Å—Ç. 193"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (5 –ª–µ—Ç)", "—É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è", "—Ä–µ–µ—Å—Ç—Ä –ª–∏—Ü–µ–Ω–∑–∏–π", "–æ—Ç–∫–∞–∑ –≤ –≤—ã–¥–∞—á–µ"]
            },
            "–≥–∂–∏": {
                "synonyms": ["–≥–æ—Å–∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–∂–∏–ª–∏—â–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∂–∏–ª–∏—â–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–π –æ—Ä–≥–∞–Ω", "–æ—Ä–≥–∞–Ω –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–§–ó ‚Ññ294-–§–ó"],
                "contexts": ["–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫", "–≤—ã–¥–∞—á–∞ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π", "–∂–∞–ª–æ–±—ã –Ω–∞ –£–ö", "–æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏", "—Ä–µ–µ—Å—Ç—Ä –ª–∏—Ü–µ–Ω–∑–∏–π"]
            },
            "–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∫": {
                "synonyms": ["–ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Å–∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏–∏", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–≤—ã–µ–∑–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó, —Å—Ç. 9-11", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"]
            },
            "–æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏": {
                "synonyms": ["–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–ª–∏—à–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏ —É–∫", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"],
                "norm_refs": ["–§–ó ‚Ññ99-–§–ó, —Å—Ç. 20", "–ñ–ö –†–§, —Å—Ç. 193.1"],
                "contexts": ["–Ω–∞—Ä—É—à–µ–Ω–∏—è", "–Ω–µ—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π", "–∂–∞–ª–æ–±—ã –∂–∏–ª—å—Ü–æ–≤", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–ª—è –£–ö"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –≥–∂–∏": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—é", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ —É–∫", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∂–∞–ª–æ–±–µ", "–¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —É–∫"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–§–ó ‚Ññ294-–§–ó, —Å—Ç. 10"],
                "contexts": ["—Ñ–æ—Ä–º–∞ –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è (30 –¥–Ω–µ–π)", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"]
            },
            "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –≥–∂–∏": {
                "synonyms": ["–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ —É–∫", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó, —Å—Ç. 16", "–ñ–ö –†–§, —Å—Ç. 20"],
                "contexts": ["—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "—à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ", "–ø—Ä–∏–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫": {
                "synonyms": ["—à—Ç—Ä–∞—Ñ –¥–ª—è —É–∫", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ", "—Ä–µ–≥—Ä–µ—Å—Å"],
                "norm_refs": ["–ö–æ–ê–ü –†–§, —Å—Ç. 7.23", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—Ä–∞–∑–º–µ—Ä—ã —à—Ç—Ä–∞—Ñ–æ–≤", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "—Ä–µ–µ—Å—Ç—Ä –ª–∏—Ü–µ–Ω–∑–∏–π": {
                "synonyms": ["–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é —É–∫", "–µ–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ª–∏—Ü–µ–Ω–∑–∏–π", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä", "—Å—Ç–∞—Ç—É—Å –ª–∏—Ü–µ–Ω–∑–∏–∏", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ99-–§–ó, —Å—Ç. 18", "–ü–ü –†–§ ‚Ññ1110"],
                "contexts": ["–≥–¥–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ì–ñ–ò —Ä–µ–≥–∏–æ–Ω–∞)", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ", "–¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏/–æ–∫–æ–Ω—á–∞–Ω–∏—è", "–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è"]
            },
            "—É—Å–ª–æ–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏": {
                "synonyms": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É–∫", "–ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å —É–∫ –≤ –≥–∂–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 193", "–§–ó ‚Ññ99-–§–ó, —Å—Ç. 16"],
                "contexts": ["–Ω–∞–ª–∏—á–∏–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—É–¥–∏–º–æ—Å—Ç–∏", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏", "—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤"]
            },
            "–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å —É–∫ –≤ –≥–∂–∏": {
                "synonyms": ["–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤", "–µ–∂–µ–≥–æ–¥–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å", "–æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞", "–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∂–∏", "—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ü–ü –†–§ ‚Ññ731"],
                "contexts": ["—Å—Ä–æ–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è", "—Ñ–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ì–ò–° –ñ–ö–•", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏"]
            },
            "–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏": {
                "synonyms": ["–ø–æ–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∂–∞–ª–æ–±–∞ –∂–∏–ª—å—Ü–æ–≤", "–∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –°–ú–ò", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó, —Å—Ç. 10", "–ü–ü –†–§ ‚Ññ493"],
                "contexts": ["–ø–ª–∞–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–∞–∑ –≤ 3 –≥–æ–¥–∞)", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ (–ø–æ –∂–∞–ª–æ–±–∞–º, –∞–≤–∞—Ä–∏—è–º, –°–ú–ò)", "–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ/–≤—ã–µ–∑–¥–Ω—ã–µ", "—Å—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"]
            },
            "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≥–∂–∏": {
                "synonyms": ["–∂–∞–ª–æ–±–∞ –Ω–∞ –≥–∂–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—É—Ä–æ—Ä–∞", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó, —Å—Ç. 22", "–ö–æ–ê–ü –†–§, —Å—Ç. 30.5"],
                "contexts": ["—Å—Ä–æ–∫ 10 –¥–Ω–µ–π", "–ø–æ–¥–∞—á–∞ –≤ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω –∏–ª–∏ —Å—É–¥", "–ø—Ä–∏–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"]
            },
            "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏": {
                "synonyms": ["–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–µ—Ç", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π", "–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤", "–º–µ—Ä—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ99-–§–ó, —Å—Ç. 20(1)", "–ñ–ö –†–§, —Å—Ç. 193.1"],
                "contexts": ["—É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏/–∑–¥–æ—Ä–æ–≤—å—é", "–Ω–µ–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π", "—Å—Ä–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
            },
            "–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è": {
                "synonyms": ["–∑–∞–ø—Ä–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–ª–∏—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–ö–æ–ê–ü –†–§, —Å—Ç. 3.11", "–§–ó ‚Ññ99-–§–ó, —Å—Ç. 20(2)"],
                "contexts": ["–≥—Ä—É–±—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "—Å—Ä–æ–∫ –¥–æ 3 –ª–µ—Ç", "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—é –£–ö", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—è–º": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–π –≥–∂–∏", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—é", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å —É–∫"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 254", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Å—Ä–æ–∫–∏", "—Ä–æ–ª—å –ø—Ä–æ–∫—É—Ä–æ—Ä–∞", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "reformagkh.ru", "gjirf.ru", "vsrf.ru", "kad.arbitr.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".gjirf.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 99-–§–ó –ª–∏—Ü–µ–Ω–∑–∏—è –£–ö")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 193 –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ç–∑—ã–≤—É –ª–∏—Ü–µ–Ω–∑–∏–∏ –£–ö")
        queries.append(f"{query} –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –£–ö –Ω–∞ —Å–∞–π—Ç–µ –ì–ñ–ò")
        queries.append(f"{query} –æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã –≤ –ì–ñ–ò –Ω–∞ –£–ö")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –õ–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –£–ö
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        q_lower = summary.lower()
        should_calculate_penalty = any(kw in q_lower for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã –∏ —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –§–ó ‚Ññ99-–§–ó > –§–ó ‚Ññ294-–§–ó > –ü–ü –†–§ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–∑–∞–∫–æ–Ω–Ω–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –£–ö, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ä—ã]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, –§–ó ‚Ññ99-–§–ó, –§–ó ‚Ññ294-–§–ó, –ü–ü –†–§ ‚Äî —Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –£–ö (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –ì–ñ–ò ‚Äî –§–ó ‚Ññ99-–§–ó, —Å—Ç.18)\n"
            "- –ñ–∞–ª–æ–±–∞ –≤ –ì–ñ–ò (–ø–∏—Å—å–º–µ–Ω–Ω–æ, —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–• ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç.12)\n"
            "- –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ, —à—Ç—Ä–∞—Ñ, –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏ ‚Äî –§–ó ‚Ññ99-–§–ó, —Å—Ç.20)\n"
            "- –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ì–ñ–ò (–≤—ã—à–µ—Å—Ç–æ—è—â–∏–π –æ—Ä–≥–∞–Ω –∏–ª–∏ —Å—É–¥ ‚Äî –§–ó ‚Ññ294-–§–ó, —Å—Ç.22)\n"
            "- –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –£–ö (–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—É–¥–∏–º–æ—Å—Ç–∏ ‚Äî –ñ–ö –†–§, —Å—Ç.193)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
            "- –ñ–ö –†–§, –§–ó ‚Ññ99-–§–ó, –§–ó ‚Ññ294-–§–ó, –ü–ü –†–§ ‚Ññ493, –ü–ü –†–§ ‚Ññ731\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class RSOInteractionAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –†–°–û", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ä—Å–æ": {
                "synonyms": ["—Ä–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–ø–æ—Å—Ç–∞–≤—â–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤", "–≤–æ–¥–æ–∫–∞–Ω–∞–ª", "—Ç–µ–ø–ª–æ—Å–µ—Ç—å", "—ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç", "–≥–∞–∑–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 10"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–¥–æ–≥–æ–≤–æ—Ä—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–∞–≤–∞—Ä–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–ø—Ä—è–º–æ–π –¥–æ–≥–æ–≤–æ—Ä —Å —Ä—Å–æ": {
                "synonyms": ["–ø—Ä—è–º—ã–µ –ø–ª–∞—Ç–µ–∂–∏", "–æ–ø–ª–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é", "–¥–æ–≥–æ–≤–æ—Ä —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º", "—Ä–∞–∑—Ä—ã–≤ —Å —É–∫", "–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä—è–º—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157.1", "–ü–ü –†–§ ‚Ññ354, –ø. 105"],
                "contexts": ["—É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –û–°–°", "—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –†–°–û", "–æ—Ç–∫–∞–∑ –£–ö"]
            },
            "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏ —Å —Ä—Å–æ": {
                "synonyms": ["—Å–≤–µ—Ä–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–∞–∫—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –æ–±—ä—ë–º–æ–≤", "–∞–∫—Ç –≤–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç–æ–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 101", "–ì–ö –†–§, —Å—Ç. 409"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ"]
            },
            "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Ä—Å–æ": {
                "synonyms": ["–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–¥–∞–Ω–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä—Å–æ", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(1)", "–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13"],
                "contexts": ["—Å—Ä–æ–∫–∏ (23-25 —á–∏—Å–ª–æ)", "—Å–ø–æ—Å–æ–±—ã (–ª–∏—á–Ω–æ, –æ–Ω–ª–∞–π–Ω, —á–µ—Ä–µ–∑ –£–ö)", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—á—É", "—Ä–∞—Å—á—ë—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É"]
            },
            "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä—Å–æ": {
                "synonyms": ["–ø–ª–∞—Ç–µ–∂ —Ä—Å–æ", "—Ç–∞—Ä–∏—Ñ —Ä—Å–æ", "—Ä–∞—Å—á—ë—Ç —Ä—Å–æ", "–æ–±—ä—ë–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏ —Ä—Å–æ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 10"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É/—Å—á—ë—Ç—á–∏–∫—É", "–æ—à–∏–±–∫–∏ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–∂–∞–ª–æ–±—ã"]
            },
            "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä—Å–æ": {
                "synonyms": ["–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ª—É–≥–∏", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–∞—á–∏", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ –Ω–µ—É–ø–ª–∞—Ç—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 117-118", "–ñ–ö –†–§, —Å—Ç. 157.1"],
                "contexts": ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞ 30 –¥–Ω–µ–π)", "–Ω–µ–ø–æ–ª–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ (–æ—Ç–æ–ø–ª–µ–Ω–∏–µ, —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞)", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"]
            },
            "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥–∏ —Ä—Å–æ": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞", "–Ω–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", "–Ω–æ—Ä–º–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–ø–µ—Ä–µ–±–æ–∏", "–∑–∞–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–∑–∞–º–µ—Ä", "–∞–∫—Ç", "–∂–∞–ª–æ–±–∞", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –†–°–û", "—à—Ç—Ä–∞—Ñ—ã"]
            },
            "–≥—Ä–∞–Ω–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏": {
                "synonyms": ["–≥—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "—Ç–æ—á–∫–∞ –ø–æ—Å—Ç–∞–≤–∫–∏", "—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π", "–≤–Ω—É—Ç—Ä–∏–¥–æ–º–æ–≤—ã–µ —Å–µ—Ç–∏", "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 3", "–ü–ü –†–§ ‚Ññ354, –ø. 103"],
                "contexts": ["–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ", "—Å—Ö–µ–º–∞ —Å–µ—Ç–µ–π", "–∞–∫—Ç —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∞–≤–∞—Ä–∏–∏", "—Ä–µ–º–æ–Ω—Ç –∑–∞ —á–µ–π —Å—á—ë—Ç"]
            },
            "—Ç–µ–ø–ª–æ–≤–∞—è —Å–µ—Ç—å": {
                "synonyms": ["—Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≥–æ—Ä—è—á–µ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "—Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥", "–¶–¢–ü", "–ò–¢–ü"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2"],
                "contexts": ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ", "–∞–≤–∞—Ä–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –†–°–û/–£–ö", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å": {
                "synonyms": ["—Ö–æ–ª–æ–¥–Ω–æ–µ –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "–≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥", "–Ω–∞–ø–æ—Ä –≤–æ–¥—ã", "–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã", "–∞–≤–∞—Ä–∏—è –Ω–∞ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(1)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.4"],
                "contexts": ["–¥–∞–≤–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ–±–æ–∏", "–∑–∞–º—É—Ç–Ω–µ–Ω–∏–µ", "–∞–∫—Ç –∑–∞–º–µ—Ä–∞", "–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä"]
            },
            "–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Ç—å": {
                "synonyms": ["—Å–ª–∏–≤", "—Å—Ç–æ–∫–∏", "–∑–∞—Å–æ—Ä –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "–∑–∞–ø–∞—Ö", "–∞–≤–∞—Ä–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏", "–æ—Ç–∫–∞—á–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98(3)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.5"],
                "contexts": ["–∑–∞—Å–æ—Ä—ã", "–∑–∞—Ç–æ–ø–ª–µ–Ω–∏—è", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã", "—Å—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ä–µ–º–æ–Ω—Ç"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ—Å–µ—Ç–∏": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ", "–ø–µ—Ä–µ–ø–∞–¥—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(3)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—É—Å—Ç–∞–Ω–æ–≤–æ–∫"],
                "contexts": ["–ø–µ—Ä–µ–±–æ–∏", "–∫–æ—Ä–æ—Ç–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–∂–∞–ª–æ–±–∞ –≤ –ú–ß–°/–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä—É", "—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "–≥–∞–∑–æ–≤—ã–µ —Å–µ—Ç–∏": {
                "synonyms": ["–≥–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "—É—Ç–µ—á–∫–∞ –≥–∞–∑–∞", "–∑–∞–ø–∞—Ö –≥–∞–∑–∞", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(4)", "–ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≥–∞–∑–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"],
                "contexts": ["—É–≥—Ä–æ–∑–∞ –≤–∑—Ä—ã–≤–∞", "–≤—ã–∑–æ–≤ –∞–≤–∞—Ä–∏–π–Ω–æ–π —Å–ª—É–∂–±—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É—Ç–µ—á–∫—É", "—à—Ç—Ä–∞—Ñ—ã"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä—Å–æ": {
                "synonyms": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Ä—Å–æ", "–Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—Ä–µ–≥—Ä–µ—Å—Å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 156", "–ì–ö –†–§, —Å—Ç. 393"],
                "contexts": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞", "–∞–≤–∞—Ä–∏–∏", "–Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", "–¥–æ–≥–æ–≤–æ—Ä–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏"]
            },
            "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä—Å–æ": {
                "synonyms": ["–æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏", "API —Å —Ä—Å–æ", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–µ–¥–∏–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–ì–ò–° –ñ–ö–•"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)", "–ü–ü –†–§ ‚Ññ354, –ø. 31(1)"],
                "contexts": ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "—Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –†–°–û", "–æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "mchs.gov.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".mchs.gov.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 157 –†–°–û")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞–∑–¥–µ–ª 10")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø—Ä—è–º—ã–º –¥–æ–≥–æ–≤–æ—Ä–∞–º —Å –†–°–û")
        queries.append(f"{query} –∞–∫—Ç —Å–≤–µ—Ä–∫–∏ —Å —Ä–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π –æ–±—Ä–∞–∑–µ—Ü")
        queries.append(f"{query} –≥—Ä–∞–Ω–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –†–°–û –£–ö")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –†–°–û
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –¥–æ–≥–æ–≤–æ—Ä—ã, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –∞–∫—Ç—ã —Å–≤–µ—Ä–∫–∏, –≥—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏ –¢–°–ñ —Å —Ä–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–∏–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (–†–°–û) –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –ñ–ö –†–§ > –ü–ü –†–§ > —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –ú–∏–Ω—Å—Ç—Ä–æ—è > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, –ü–ü –†–§ ‚Äî —Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –†–°–û (–û–°–° ‚Äî –ñ–ö –†–§, —Å—Ç.157.1)\n"
            "- –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Å—Ä–æ–∫–∏, —Å–ø–æ—Å–æ–±—ã ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.31)\n"
            "- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ (—Å—Ä–æ–∫–∏, —É—á–∞—Å—Ç–Ω–∏–∫–∏, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.101)\n"
            "- –ì—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ (–¥–æ–≥–æ–≤–æ—Ä, —Å—Ö–µ–º–∞ ‚Äî –ü–ü –†–§ ‚Ññ491, –ø.3)\n"
            "- –û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –†–°–û (–∂–∞–ª–æ–±–∞, –∞–∫—Ç, —Å—É–¥ ‚Äî –ñ–ö –†–§, —Å—Ç.157)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.154 ‚Äî —Å–æ—Å—Ç–∞–≤ –ø–ª–∞—Ç—ã, —Å—Ç.156 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –†–°–û, —Å—Ç.157 ‚Äî —Ä–∞—Å—á—ë—Ç—ã —Å –†–°–û)\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 10 ‚Äî –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –†–°–û, –ø.31 ‚Äî –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –ø.101 ‚Äî –∞–∫—Ç—ã —Å–≤–µ—Ä–∫–∏)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–ø.3 ‚Äî –≥—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥)\n"
            "- –§–ó ‚Ññ261-–§–ó (–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£)\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class SafetySecurityAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": {
                "synonyms": ["–ø–æ–∂–±–µ–∑", "–ø–æ–∂–∞—Ä–Ω–∞—è –∑–∞—â–∏—Ç–∞", "–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–∞", "–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–∞—è –∑–∞—â–∏—Ç–∞", "–ø–æ–∂–∞—Ä–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479", "–§–ó ‚Ññ69-–§–ó", "–ñ–ö –†–§, —Å—Ç. 36"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–ß–°", "—à—Ç—Ä–∞—Ñ—ã", "–ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π"]
            },
            "–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä": {
                "synonyms": ["–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å", "–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º—É", "–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"],
                "norm_refs": ["–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ ‚Ññ730", "–§–ó ‚Ññ35-–§–ó"],
                "contexts": ["–ø–∞—Å–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", "–ø–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª–∏—Ü–∏–µ–π", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "–ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ": {
                "synonyms": ["—Å–∏—Å—Ç–µ–º–∞ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏—è", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∂–∞—Ä–æ—Ç—É—à–µ–Ω–∏–µ", "—Å–ø—Ä–∏–Ω–∫–ª–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–ø–æ–∂–∞—Ä–Ω—ã–π –∫—Ä–∞–Ω", "–ø–æ–∂–∞—Ä–Ω—ã–π –≥–∏–¥—Ä–∞–Ω—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 58", "–°–ü 5.13130.2009"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "–ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è": {
                "synonyms": ["—Å–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–æ–∂–∞—Ä–µ", "—Å–∏—Ä–µ–Ω–∞", "–∑–≤—É–∫–æ–≤–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 58", "–°–ü 3.13130.2009"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π", "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å", "—à—Ç—Ä–∞—Ñ—ã"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π —â–∏—Ç": {
                "synonyms": ["–ø–æ–∂–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "–ø–æ–∂–∞—Ä–Ω—ã–π —É–≥–æ–ª–æ–∫", "–ø–æ–∂–∞—Ä–Ω—ã–π —Å—Ç–µ–Ω–¥", "–æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å", "–ø–æ–∂–∞—Ä–Ω—ã–π —Ä—É–∫–∞–≤"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 71", "–°–ü 9.13130.2009"],
                "contexts": ["–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è", "–º–µ—Å—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –∑–∞–º–µ–Ω—ã", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ú–ß–°", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"]
            },
            "—ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥": {
                "synonyms": ["–ø–æ–∂–∞—Ä–Ω—ã–π –≤—ã—Ö–æ–¥", "–∞–≤–∞—Ä–∏–π–Ω—ã–π –≤—ã—Ö–æ–¥", "—ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É—Ç—å", "–ø–æ–∂–∞—Ä–Ω–∞—è –ª–µ—Å—Ç–Ω–∏—Ü–∞", "–∑–∞–ø–∞—Å–Ω–æ–π –≤—ã—Ö–æ–¥"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 65", "–°–ü 1.13130.2009"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–µ–Ω–∏—è", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –¥–≤–µ—Ä–µ–π", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π –∫—Ä–∞–Ω": {
                "synonyms": ["–ø–æ–∂–∞—Ä–Ω—ã–π —à–∫–∞—Ñ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∂–∞—Ä–Ω—ã–π –∫—Ä–∞–Ω", "–ü–ö", "–ø–æ–∂–∞—Ä–Ω—ã–π —Ä—É–∫–∞–≤", "–ø–æ–∂–∞—Ä–Ω—ã–π —Å—Ç–≤–æ–ª"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 59", "–°–ü 10.13130.2009"],
                "contexts": ["–º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å", "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π –≥–∏–¥—Ä–∞–Ω—Ç": {
                "synonyms": ["–Ω–∞—Ä—É–∂–Ω—ã–π –ø–æ–∂–∞—Ä–Ω—ã–π –≥–∏–¥—Ä–∞–Ω—Ç", "–≥–∏–¥—Ä–∞–Ω—Ç", "–ø–æ–∂–∞—Ä–Ω—ã–π –≤–æ–¥–æ–∏—Å—Ç–æ—á–Ω–∏–∫", "–ø–æ–∂–∞—Ä–Ω—ã–π –∫–æ–ª–æ–¥–µ—Ü"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 60", "–°–ü 8.13130.2009"],
                "contexts": ["–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", "–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å", "—Å–µ–∑–æ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ú–ß–°"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π –Ω–∞–¥–∑–æ—Ä": {
                "synonyms": ["–º—á—Å", "–ø–æ–∂–∞—Ä–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è", "–≥–ø–Ω", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –º—á—Å", "–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –º—á—Å"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó", "–§–ó ‚Ññ69-–§–ó"],
                "contexts": ["–ø–ª–∞–Ω–æ–≤—ã–µ –∏ –≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "—à—Ç—Ä–∞—Ñ—ã", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": {
                "synonyms": ["—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ø–æ–∂–∞—Ä–Ω—ã–π –∞—É–¥–∏—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"],
                "norm_refs": ["–§–ó ‚Ññ123-–§–ó", "–ü–ü –†–§ ‚Ññ1479"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö –∑–¥–∞–Ω–∏–π", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"]
            },
            "–ø–æ–∂–∞—Ä–Ω—ã–π –º–∏–Ω–∏–º—É–º": {
                "synonyms": ["–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ø–æ–∂–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂", "–æ–±—É—á–µ–Ω–∏–µ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 7", "–ü—Ä–∏–∫–∞–∑ –ú–ß–° ‚Ññ645"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –£–ö", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (1 —Ä–∞–∑ –≤ –≥–æ–¥)", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∂—É—Ä–Ω–∞–ª–µ", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–æ–±—É—á–µ–Ω–∏–µ"]
            },
            "–ø–ª–∞–Ω —ç–≤–∞–∫—É–∞—Ü–∏–∏": {
                "synonyms": ["—Å—Ö–µ–º–∞ —ç–≤–∞–∫—É–∞—Ü–∏–∏", "—ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞", "–º–∞—Ä—à—Ä—É—Ç —ç–≤–∞–∫—É–∞—Ü–∏–∏", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —ç–≤–∞–∫—É–∞—Ü–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 7", "–ì–û–°–¢ –† 12.2.143-2009"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "—Å–≤–µ—Ç—è—â–∏–µ—Å—è —Ç–∞–±–ª–∏—á–∫–∏", "–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –∂–∏–ª—å—Ü–æ–≤", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ú–ß–°"]
            },
            "–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç": {
                "synonyms": ["–ø–∞—Å–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–ø–∞—Å–ø–æ—Ä—Ç –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç–∏", "–¥–æ–∫—É–º–µ–Ω—Ç –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä", "–ø–∞—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–∞"],
                "norm_refs": ["–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ ‚Ññ730, –ø. 12", "–ü—Ä–∏–∫–∞–∑ –§–°–ë ‚Ññ555"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ú–ö–î", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (5 –ª–µ—Ç)", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"]
            },
            "–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ": {
                "synonyms": ["–∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π", "—ç–≤–∞–∫—É–∞—Ü–∏—è", "–≤—ã–∑–æ–≤ –ø–æ–∂–∞—Ä–Ω—ã—Ö", "—Å–æ–æ–±—â–∏—Ç—å –æ –ø–æ–∂–∞—Ä–µ", "–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–µ–º"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1479, –ø. 7", "–ü—Ä–∏–∫–∞–∑ –ú–ß–° ‚Ññ645"],
                "contexts": ["–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–æ–¥—ä–µ–∑–¥–∞—Ö", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –º—á—Å", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–º", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É—â–µ—Ä–±–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫ –∑–∞ –ø–æ–∂–∞—Ä"],
                "norm_refs": ["–ö–æ–ê–ü –†–§, —Å—Ç. 20.4", "–ì–ö –†–§, —Å—Ç. 1064"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "mchs.gov.ru", "fssb.ru", "vsrf.ru", "roscomnadzor.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".mchs.gov.ru", ".fssb.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 1479 –ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
        queries.append(f"{query} –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ 730 –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —à—Ç—Ä–∞—Ñ–∞–º –ú–ß–°")
        queries.append(f"{query} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∂–∞—Ä–Ω–æ–º—É —â–∏—Ç—É –≤ –ú–ö–î")
        queries.append(f"{query} –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–∞ –ñ–ö–•")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç—å
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç—å
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç–∏ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó > –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ > –ü–ü –†–§ > –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ü–ü –†–§ ‚Äî —Ç–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö (–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º ‚Äî –ñ–ö –†–§, —Å—Ç.161.1; –ü–ü –†–§ ‚Ññ1479)\n"
            "- –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (–Ω–µ –∑–∞–≥—Ä–æ–º–æ–∂–¥–∞—Ç—å —ç–≤–∞–∫—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É—Ç–∏ ‚Äî –ñ–ö –†–§, —Å—Ç.36)\n"
            "- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ú–ß–° (–ø–∞—Å–ø–æ—Ä—Ç –æ–±—ä–µ–∫—Ç–∞, –∂—É—Ä–Ω–∞–ª—ã –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–µ–π, –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è ‚Äî –ü–ü –†–§ ‚Ññ1479)\n"
            "- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ (–≤—ã–∑–æ–≤ 101, —ç–≤–∞–∫—É–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—è ‚Äî –ü–ü –†–§ ‚Ññ1479, –ø.7)\n"
            "- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ (–∑–∞–∫–∞–∑ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ‚Äî –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ‚Ññ730)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.36 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, —Å—Ç.161.1 ‚Äî –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö)\n"
            "- –§–ó ‚Ññ69-–§–ó ¬´–û –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª\n"
            "- –§–ó ‚Ññ35-–§–ó ¬´–û –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º—É¬ª\n"
            "- –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–§ ‚Ññ730 ¬´–û –ø—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º—É...¬ª\n"
            "- –ü–ü –†–§ ‚Ññ1479 ¬´–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤ –†–§¬ª\n"
            "- –§–ó ‚Ññ123-–§–ó ¬´–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏¬ª\n"
            "- –ü—Ä–∏–∫–∞–∑—ã –ú–ß–° –∏ –§–°–ë –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∞ –∏ –ø–∞—Å–ø–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class EnergyEfficiencyAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ": {
                "synonyms": ["—ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "—ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤", "—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 3", "–ü–ü –†–§ ‚Ññ1818"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–º–µ—Ä—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "—Å—É–±—Å–∏–¥–∏–∏", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å"]
            },
            "—Ñ–∑ 261": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω 261", "–∑–∞–∫–æ–Ω –æ–± —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–∏", "261-—Ñ–∑", "—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–∫–æ–Ω"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó"],
                "contexts": ["–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏", "–ø—Ä–∏–±–æ—Ä—ã —É—á—ë—Ç–∞", "—ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç", "–∞—É–¥–∏—Ç —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è", "—Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–º–µ—Ä"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 16", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ889/–ø—Ä"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å (1 —Ä–∞–∑ –≤ 5 –ª–µ—Ç)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ú–ö–î", "—Å–æ—Å—Ç–∞–≤ –æ—Ç—á—ë—Ç–∞", "–∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"]
            },
            "–æ–¥–ø—É": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤–æ–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–æ–±—â–µ–¥–æ–º–æ–≤–æ–π —Å—á—ë—Ç—á–∏–∫", "–¥–æ–º–æ–≤–æ–π —Å—á—ë—Ç—á–∏–∫", "—É–∑–µ–ª —É—á—ë—Ç–∞", "–≤–≤–æ–¥–Ω–æ–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13", "–ü–ü –†–§ ‚Ññ354, –ø. 31"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "–∏–ø—É": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Å—á—ë—Ç—á–∏–∫ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "—É–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13", "–ü–ü –†–§ ‚Ññ354, –ø. 31"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "—Å—Ä–æ–∫–∏ –º–æ–Ω—Ç–∞–∂–∞", "–ø–æ–≤–µ—Ä–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"]
            },
            "—Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—Ç–µ–ø–ª–æ–≤–∏–∑–æ—Ä", "—Ç–µ–ø–ª–æ—Å—ä—ë–º–∫–∞", "–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∞—Å–∞–¥–∞", "–≤—ã—è–≤–ª–µ–Ω–∏–µ –º–æ—Å—Ç–∏–∫–æ–≤ —Ö–æ–ª–æ–¥–∞"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ889/–ø—Ä", "–°–ü 50.13330.2012"],
                "contexts": ["—á–∞—Å—Ç—å —ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç–∞", "—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–∑–∏–º–æ–π)", "–æ—Ç—á—ë—Ç —Å —Ñ–æ—Ç–æ", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ç–µ–ø–ª–µ–Ω–∏—é", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–µ"]
            },
            "—É—Ç–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞—Å–∞–¥–∞": {
                "synonyms": ["—Ç–µ–ø–ª–æ–∏–∑–æ–ª—è—Ü–∏—è", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞—Å–∞–¥–∞", "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–π —Ñ–∞—Å–∞–¥", "–≤–µ–Ω—Ç–∏–ª–∏—Ä—É–µ–º—ã–π —Ñ–∞—Å–∞–¥", "—à—É–±–∞"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 25", "–°–ü 23-101-2004"],
                "contexts": ["–≤–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç", "—Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å", "—Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏"]
            },
            "–∑–∞–º–µ–Ω–∞ –æ–∫–æ–Ω": {
                "synonyms": ["–ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –æ–∫–Ω–∞", "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –æ–∫–Ω–∞", "—Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç—ã", "–∑–∞–º–µ–Ω–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –æ–∫–æ–Ω", "–æ–∫–Ω–∞ —Å —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ–º"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 25", "–ì–û–°–¢ 30674-99"],
                "contexts": ["–≤ –ú–ö–î –∏ –ø–æ–¥—ä–µ–∑–¥–∞—Ö", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è", "–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å", "—Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å"]
            },
            "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º": {
                "synonyms": ["–∑–∞–º–µ–Ω–∞ –∫–æ—Ç–ª–æ–≤", "–º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –ª–∏—Ñ—Ç–æ–≤", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ò–¢–ü", "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è", "–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –ê–°–£"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 25", "–ü–ü –†–§ ‚Ññ1289"],
                "contexts": ["—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "—Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏", "–≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏"]
            },
            "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç": {
                "synonyms": ["—ç—Å–∫", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–∞", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "–æ–ø–ª–∞—Ç–∞ –∑–∞ —Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 14", "–ü–ü –†–§ ‚Ññ1289"],
                "contexts": ["–º–æ–¥–µ–ª—å —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏", "—Å—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", "–≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
                "synonyms": ["—Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ", "—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª–∏", "—Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã", "—É–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 25", "–°–ü 60.13330.2016"],
                "contexts": ["–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –≤ –ú–ö–î", "—Ä–∞—Å—á—ë—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–æ–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞", "–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫–æ–Ω–æ–º–∏–∏"]
            },
            "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤": {
                "synonyms": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∂–∏–ª—å—Ü–æ–≤", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—é", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–¥–æ–ø—É—Å–∫ –∫ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é", "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 9", "–ñ–ö –†–§, —Å—Ç. 36"],
                "contexts": ["—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ò–ü–£", "–¥–æ–ø—É—Å–∫ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É", "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–æ–≤", "—É—á–∞—Å—Ç–∏–µ –≤ –û–°–° –ø–æ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—Ç–∫–∞–∑"]
            },
            "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞": {
                "synonyms": ["—Å—É–±—Å–∏–¥–∏–∏", "–≥—Ä–∞–Ω—Ç—ã", "–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", "–ª—å–≥–æ—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã", "–≤–æ–∑–º–µ—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 25.1", "–ü–ü –†–§ ‚Ññ1289"],
                "contexts": ["—É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è", "–ø–æ—Ä—è–¥–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å", "–∫–∞–ø—Ä–µ–º–æ–Ω—Ç"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è": {
                "synonyms": ["—à—Ç—Ä–∞—Ñ—ã", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "—Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 27", "–ö–æ–ê–ü –†–§, —Å—Ç. 9.16"],
                "contexts": ["–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–Ω–µ –ø—Ä–æ–≤–µ–¥—ë–Ω —ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç", "—Ñ–∞–ª—å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤", "–∂–∞–ª–æ–±—ã", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ñ–∑ 261": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤", "—Å–ø–æ—Ä—ã –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å—É", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 421", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —ç–∫–æ–Ω–æ–º–∏–∏", "—Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "—Ä–æ–ª—å —ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "mce.gov.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".mce.gov.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 261-–§–ó —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ")
        queries.append(f"{query} –ü–ü –†–§ 1289 —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º")
        queries.append(f"{query} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ò–ü–£ –û–î–ü–£")
        queries.append(f"{query} —Ç–µ–ø–ª–æ–≤–∏–∑–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ú–ö–î –Ω–æ—Ä–º—ã")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ, —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ò–ü–£, —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å, –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—é –∏ —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó ‚Ññ261-–§–ó > –ü–ü –†–§ > –ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó, –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–∫–∞–∑—ã ‚Äî —Ç–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (—Å—Ä–æ–∫–∏, –∞–∫–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äî –§–ó ‚Ññ261-–§–ó, —Å—Ç.16; –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ889/–ø—Ä)\n"
            "- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–≤–µ—Ä–∫–∞ –ò–ü–£/–û–î–ü–£ (—Å—Ä–æ–∫–∏, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –§–ó ‚Ññ261-–§–ó, —Å—Ç.13)\n"
            "- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (—Ä–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏, —Å—Ä–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ‚Äî –ü–ü –†–§ ‚Ññ1289)\n"
            "- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ä —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É—Ç–µ–ø–ª–µ–Ω–∏–µ, –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º ‚Äî –§–ó ‚Ññ261-–§–ó, —Å—Ç.25)\n"
            "- –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –ü–ü –†–§ ‚Ññ1289)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ261-–§–ó ¬´–û–± —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–∏ –∏ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏¬ª\n"
            "- –ü–ü –†–§ ‚Ññ1289 ¬´–û —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ —ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å–Ω—ã–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º...¬ª\n"
            "- –ü–ü –†–§ ‚Ññ1818 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ü—Ä–∞–≤–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...¬ª\n"
            "- –ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ889/–ø—Ä ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ü—Ä–∞–≤–∏–ª –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è...¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354 (–≤ —á–∞—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á—ë—Ç–∞)\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class ReceiptProcessingAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫": {
                "synonyms": ["–∫–∞—Å—Å–æ–≤—ã–π —á–µ–∫", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫", "–±—É–º–∞–∂–Ω—ã–π —á–µ–∫", "—á–µ–∫ –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—ã", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–¥–∞—á–∏", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "QR-–∫–æ–¥"]
            },
            "qr-–∫–æ–¥": {
                "synonyms": ["qr", "qr-code", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π qr", "—Å–∫–∞–Ω qr", "—á–µ–∫ –ø–æ qr"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7(5)", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@"],
                "contexts": ["—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞", "–æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏"]
            },
            "–æ—Ñ–¥": {
                "synonyms": ["–æ–ø–µ—Ä–∞—Ç–æ—Ä —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", "–æ—Ñ–¥ —á–µ–∫–æ–≤", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ñ–¥", "–∞—Ä—Ö–∏–≤ —á–µ–∫–æ–≤", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –æ—Ñ–¥"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.2", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è (5 –ª–µ—Ç)", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "–æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "—Ç–µ–≥–∏ —á–µ–∫–∞": {
                "synonyms": ["—Ç–µ–≥ 1008", "—Ç–µ–≥ 1020", "—Ç–µ–≥ 1054", "—Ç–µ–≥ 1055", "—Ç–µ–≥ 1081", "—Ç–µ–≥ 1102", "—Ç–µ–≥ 1162", "—Ç–µ–≥ 1163", "—Ç–µ–≥ 1187", "—Ç–µ–≥ 1192", "—Ç–µ–≥ 1203", "—Ç–µ–≥ 1207", "—Ç–µ–≥ 1227"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@", "–§–§–î 1.2"],
                "contexts": ["—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–≥–æ–≤", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏", "–ø—Ä–∏–∑–Ω–∞–∫ —Ä–∞—Å—á—ë—Ç–∞", "–ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á—ë—Ç–∞", "–Ω–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "–ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–≥–µ–Ω—Ç"]
            },
            "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å": {
                "synonyms": ["—Ñ–Ω", "—Ñ–∏—Å–∫–∞–ª", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–∑–∞–º–µ–Ω–∞ —Ñ–Ω", "—Å—Ä–æ–∫ —Å–ª—É–∂–±—ã —Ñ–Ω"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.1", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@"],
                "contexts": ["—Å—Ä–æ–∫ –∑–∞–º–µ–Ω—ã (13/15 –º–µ—Å—è—Ü–µ–≤)", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "–∞—Ä—Ö–∏–≤ —Ñ–Ω", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å"]
            },
            "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫": {
                "synonyms": ["—Ñ–ø–¥", "—Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞", "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7(1)", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏", "–æ—à–∏–±–∫–∏ –≤ —Ñ–ø–¥", "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"]
            },
            "–æ—à–∏–±–∫–∞ –≤ —á–µ–∫–µ": {
                "synonyms": ["–Ω–µ–≤–µ—Ä–Ω—ã–π —á–µ–∫", "—á–µ–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç", "—á–µ–∫ –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è", "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥", "–±–∏—Ç—ã–π qr-–∫–æ–¥"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 14.5", "–ö–æ–ê–ü –†–§, —Å—Ç. 14.5"],
                "contexts": ["–ø—Ä–∏—á–∏–Ω—ã", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–µ—á–∞—Ç—å", "—à—Ç—Ä–∞—Ñ—ã", "–∂–∞–ª–æ–±–∞ –≤ –§–ù–°"]
            },
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞": {
                "synonyms": ["–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π", "–ø–∞—Ä—Å–∏–Ω–≥ —á–µ–∫–æ–≤", "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–æ–≤", "ocr —á–µ–∫–æ–≤", "api –æ—Ñ–¥"],
                "norm_refs": [],
                "contexts": ["—Ñ–æ—Ä–º–∞—Ç—ã (xml, json)", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", "–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", "–æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"]
            },
            "xml —á–µ–∫": {
                "synonyms": ["json —á–µ–∫", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ–∫–∞", "—Ñ–∞–π–ª —á–µ–∫–∞", "–≤—ã–≥—Ä—É–∑–∫–∞ —á–µ–∫–æ–≤"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@", "–§–§–î 1.2"],
                "contexts": ["—Å—Ö–µ–º–∞ xml", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", "–≤–∞–ª–∏–¥–∞—Ü–∏—è", "–ø–æ–¥–ø–∏—Å—å", "—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ø–µ—Ä–µ–¥–∞—á–∞ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—é"]
            },
            "–±—Å–æ": {
                "synonyms": ["–±–ª–∞–Ω–∫ —Å—Ç—Ä–æ–≥–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏", "–±—É–º–∞–∂–Ω—ã–π –±—Å–æ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±—Å–æ", "–±—Å–æ –≤–º–µ—Å—Ç–æ –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 2.1", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@"],
                "contexts": ["–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–∑–∞–º–µ–Ω–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å—É", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–æ–Ω–ª–∞–π–Ω-–∫–∞—Å—Å–∞": {
                "synonyms": ["–∫–∫—Ç", "–∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "–∫–∞—Å—Å–∞ 54-—Ñ–∑", "–Ω–æ–≤–∞—è –∫–∞—Å—Å–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∫—Ç"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –§–ù–°", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –û–§–î", "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"]
            },
            "–ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–≥–µ–Ω—Ç": {
                "synonyms": ["–ø–æ—Å—Ä–µ–¥–Ω–∏–∫", "–∞–≥–µ–Ω—Ç –ø–æ –ø—Ä–∏—ë–º—É –ø–ª–∞—Ç–µ–∂–µ–π", "—Ä–∞—Å—á—ë—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç", "–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–µ–π", "–∞–≥–µ–Ω—Ç –±–∞–Ω–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 1.2(10)", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ (1020, 1054)", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∞–≥–µ–Ω—Ç–∞", "–∫–æ–º–∏—Å—Å–∏—è", "–æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–ø–æ—Å—Ç–∞–≤—â–∏–∫": {
                "synonyms": ["–ø—Ä–æ–¥–∞–≤–µ—Ü", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "–∏–Ω–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"],
                "norm_refs": ["–§–ó ‚Ññ54-–§–ó, —Å—Ç. 4.7(1)", "–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —á–µ–∫–µ", "–∏–Ω–Ω/–∫–ø–ø", "–∞–¥—Ä–µ—Å", "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–æ—à–∏–±–∫–∏ –≤ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö"]
            },
            "–ø—Ä–∏–∑–Ω–∞–∫ —Ä–∞—Å—á—ë—Ç–∞": {
                "synonyms": ["—Ç–µ–≥ 1054", "–ø—Ä–∏—Ö–æ–¥", "–≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏—Ö–æ–¥–∞", "—Ä–∞—Å—Ö–æ–¥", "–≤–æ–∑–≤—Ä–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞", "–∞–≤–∞–Ω—Å", "–∫—Ä–µ–¥–∏—Ç"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@", "–§–§–î 1.2"],
                "contexts": ["–∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–≥–∞", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–æ—à–∏–±–∫–∏", "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –±—É—Ö—É—á—ë—Ç", "–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —á–µ–∫–∞–º": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —á–µ–∫–∏", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ —á–µ–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ—à–∏–±–∫–∏ –≤ —á–µ–∫–∞—Ö", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ 54-—Ñ–∑"],
                "norm_refs": ["–ö–ê–° –†–§, —Å—Ç. 218", "–ö–æ–ê–ü –†–§, —Å—Ç. 14.5"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —à—Ç—Ä–∞—Ñ–∞", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏", "–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "nalog.gov.ru", "ofd.ru", "fns.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".nalog.gov.ru", ".fns.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 54-–§–ó —á–µ–∫–∏")
        queries.append(f"{query} –ü—Ä–∏–∫–∞–∑ –§–ù–° –ú–ú–í-7-20/229@ —Ç–µ–≥–∏ —á–µ–∫–∞")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º –≤ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–∞—Ö")
        queries.append(f"{query} –∫–∞–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —á–µ–∫–∞")
        queries.append(f"{query} –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤ —Å 1–° –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ —á–µ–∫–∏, QR-–∫–æ–¥—ã, —Ç–µ–≥–∏ –§–§–î, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –§–ó ‚Ññ54-–§–ó
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó ‚Ññ54-–§–ó > –ü—Ä–∏–∫–∞–∑—ã –§–ù–° > –ü–ü –†–§ > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó, –ø—Ä–∏–∫–∞–∑—ã, –ü–ü ‚Äî —Ç–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è / –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
            "- –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ QR-–∫–æ–¥–∞ –∏ —Ç–µ–≥–æ–≤ —á–µ–∫–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è ‚Äî –ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@)\n"
            "- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ —á–µ–∫–µ (–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–µ—á–∞—Ç—å ‚Äî –§–ó ‚Ññ54-–§–ó, —Å—Ç.4.7)\n"
            "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤ —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π (—Ñ–æ—Ä–º–∞—Ç—ã XML/JSON, API –û–§–î ‚Äî –ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@)\n"
            "- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–∫–µ (–ò–ù–ù, –ø—Ä–∏–∑–Ω–∞–∫ —Ä–∞—Å—á—ë—Ç–∞, –§–ü–î ‚Äî –§–ó ‚Ññ54-–§–ó, —Å—Ç.4.7)\n"
            "- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –û–§–î (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ö–ö–¢, –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ54-–§–ó ¬´–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ-–∫–∞—Å—Å–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏¬ª\n"
            "- –ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ú–ú–í-7-20/229@ ¬´–û —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤¬ª\n"
            "- –ü—Ä–∏–∫–∞–∑ –§–ù–° ‚Ññ–ï–î-7-20/662@ ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ö–ö–¢¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354 (–≤ —á–∞—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ñ–ö–•)\n"
            "- –§–§–î 1.2 (—Ñ–æ—Ä–º–∞—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted
        
class PassportRegistrationAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —É—á–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ø—Ä–æ–ø–∏—Å–∫–∞": {
                "synonyms": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—á–µ—Ç", "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä–æ–ø–∏—Å–∫—É", "–ø—Ä–æ–ø–∏—Å–∞—Ç—å—Å—è"],
                "norm_refs": ["–§–ó ‚Ññ5242-1", "–ü–ü –†–§ ‚Ññ713, –ø. 9"],
                "contexts": ["–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Å—Ä–æ–∫–∏", "–≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å", "—á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"]
            },
            "–≤—ã–ø–∏—Å–∫–∞": {
                "synonyms": ["—Å–Ω—è—Ç–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞", "–≤—ã–ø–∏—Å–∞—Ç—å—Å—è", "–∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Å–Ω—è—Ç–∏–µ —Å —É—á—ë—Ç–∞", "–æ—Ç–∫–∞–∑ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 28", "–§–ó ‚Ññ5242-1"],
                "contexts": ["–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞—è", "–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è", "–ø–æ —Å—É–¥—É", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–æ–≤–æ–º—É –º–µ—Å—Ç—É", "–¥–æ–∫—É–º–µ–Ω—Ç—ã"]
            },
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": {
                "synonyms": ["—á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–ø–∏—Å–∫–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–∞—Å–ø–æ—Ä—Ç–∏—Å—Ç—É", "—Ñ–æ—Ä–º–∞ ‚Ññ6", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 15", "–ü—Ä–∏–∫–∞–∑ –ú–í–î ‚Ññ984"],
                "contexts": ["–ø–∞—Å–ø–æ—Ä—Ç", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–µ ‚Ññ6", "–¥–æ–∫—É–º–µ–Ω—Ç-–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–¥–æ–≥–æ–≤–æ—Ä, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ)", "—Å–æ–≥–ª–∞—Å–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–≥–¥–µ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é": {
                "synonyms": ["–ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª", "–º—Ñ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–≥–æ—Å—É—Å–ª—É–≥–∏ –ø—Ä–æ–ø–∏—Å–∫–∞", "–æ–º–≤–¥", "–æ—Ç–¥–µ–ª –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–∏–≥—Ä–∞—Ü–∏–∏", "–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 10", "–§–ó ‚Ññ5242-1"],
                "contexts": ["–ª–∏—á–Ω—ã–π –≤–∏–∑–∏—Ç", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞", "–ø–æ—á—Ç–∞", "–º—Ñ—Ü", "–≥–æ—Å—É—Å–ª—É–≥–∏", "—Å—Ä–æ–∫–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏"]
            },
            "–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": {
                "synonyms": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è", "—Ñ–æ—Ä–º–∞ ‚Ññ3", "–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–ø–∏—Å–∫–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å—Ä–æ–∫", "–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —É—á–µ—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 20", "–§–ó ‚Ññ109-–§–ó"],
                "contexts": ["—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "–æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π"]
            },
            "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞": {
                "synonyms": ["—á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–æ–ø–∏—Å–∫—É", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∂–∏–ª—å—Ü–æ–≤", "–Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 31", "–ü–ü –†–§ ‚Ññ713, –ø. 32", "–ö–æ–ê–ü –†–§, —Å—Ç. 19.15.1"],
                "contexts": ["—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –§–ú–°", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", "–ø—Ä–∞–≤–æ –Ω–∞ –≤—ã—Å–µ–ª–µ–Ω–∏–µ", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"]
            },
            "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —É–∫": {
                "synonyms": ["–¥–µ–π—Å—Ç–≤–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö", "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ç–æ–ª–æ–º", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 31(3)", "–ü–ü –†–§ ‚Ññ713, –ø. 32"],
                "contexts": ["–ø–µ—Ä–µ–¥–∞—á–∞ —Å–≤–µ–¥–µ–Ω–∏–π –≤ –û–í–ú", "—Å—Ä–æ–∫–∏ (3 –¥–Ω—è)", "—Ñ–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∂–∏–ª—å—Ü–∞–º–∏"]
            },
            "—Ñ–æ—Ä–º–∞ ‚Ññ6": {
                "synonyms": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–±–ª–∞–Ω–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã 6"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –ú–í–î ‚Ññ984, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ü–ü –†–§ ‚Ññ713"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", "–≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "–ø–æ–¥–ø–∏—Å—å –∑–∞—è–≤–∏—Ç–µ–ª—è –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä–µ–Ω–∏–µ"]
            },
            "—Ñ–æ—Ä–º–∞ ‚Ññ7": {
                "synonyms": ["–ª–∏—Å—Ç–æ–∫ —É–±—ã—Ç–∏—è", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞", "—Ñ–æ—Ä–º–∞ —Å–Ω—è—Ç–∏—è —Å —É—á–µ—Ç–∞", "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã 7"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –ú–í–î ‚Ññ984, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 4", "–ü–ü –†–§ ‚Ññ713"],
                "contexts": ["–∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞", "–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ —Å–Ω—è—Ç–∏–µ", "–ø–æ —Å—É–¥—É", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ", "–∞—Ä—Ö–∏–≤–Ω—ã–µ —Å–ø—Ä–∞–≤–∫–∏"]
            },
            "—Å–ø—Ä–∞–≤–∫–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": {
                "synonyms": ["–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–∞–¥—Ä–µ—Å–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞", "–≤—ã–ø–∏—Å–∫–∞ –∏–∑ –¥–æ–º–æ–≤–æ–π –∫–Ω–∏–≥–∏", "—Ñ–æ—Ä–º–∞ ‚Ññ9", "—Ñ–æ—Ä–º–∞ ‚Ññ8"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 36", "–ü—Ä–∏–∫–∞–∑ –ú–í–î ‚Ññ984"],
                "contexts": ["–≥–¥–µ –ø–æ–ª—É—á–∏—Ç—å", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "–¥–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è", "–ø–ª–∞—Ç–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏"]
            },
            "—Å—Ä–æ–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è": {
                "synonyms": ["—Å–∫–æ–ª—å–∫–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–æ–ø–∏—Å–∫–∞", "—Å—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Å—Ä–æ–∫ –≤—ã–ø–∏—Å–∫–∏", "—Å—Ä–æ–∫–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏", "—Å—Ä–æ—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 21", "–§–ó ‚Ññ5242-1"],
                "contexts": ["3 –¥–Ω—è –ø—Ä–∏ –ª–∏—á–Ω–æ–π –ø–æ–¥–∞—á–µ", "8 –¥–Ω–µ–π –ø—Ä–∏ –ø–æ–¥–∞—á–µ —á–µ—Ä–µ–∑ –ú–§–¶/–ø–æ—á—Ç—É", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"]
            },
            "—Ñ–∏–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": {
                "synonyms": ["—Ñ–∞–ª—å—à–∏–≤–∞—è –ø—Ä–æ–ø–∏—Å–∫–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "–ø–æ–∫—É–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–Ω–µ–∑–∞–∫–æ–Ω–Ω–∞—è –ø—Ä–æ–ø–∏—Å–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"],
                "norm_refs": ["–£–ö –†–§, —Å—Ç. 322.2", "–ü–ü –†–§ ‚Ññ713, –ø. 32"],
                "contexts": ["–ø—Ä–∏–∑–Ω–∞–∫–∏", "–Ω–∞–∫–∞–∑–∞–Ω–∏–µ (—à—Ç—Ä–∞—Ñ, –ª–∏—à–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥—ã)", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–∞—Ç—å", "–ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–í–î", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö": {
                "synonyms": ["–ø—Ä–æ–ø–∏—Å–∫–∞ —Ä–µ–±–µ–Ω–∫–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π", "—Å–æ–≥–ª–∞—Å–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞", "–Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã–π", "–¥–µ—Ç–∏ –¥–æ 14 –ª–µ—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ713, –ø. 27", "–§–ó ‚Ññ5242-1"],
                "contexts": ["–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤", "—à—Ç–∞–º–ø –≤ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–µ"]
            },
            "–≤–æ–µ–Ω–Ω–æ–æ–±—è–∑–∞–Ω–Ω—ã–µ": {
                "synonyms": ["–≤–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–µ–Ω–Ω–æ–æ–±—è–∑–∞–Ω–Ω—ã—Ö", "–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –≤–æ–∏–Ω—Å–∫–∏–π —É—á–µ—Ç", "–≤–æ–µ–Ω–∫–æ–º–∞—Ç", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–µ–Ω–∫–æ–º–∞—Ç–∞"],
                "norm_refs": ["–§–ó ¬´–û –≤–æ–∏–Ω—Å–∫–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏¬ª, —Å—Ç. 10", "–ü–ü –†–§ ‚Ññ713"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–æ–µ–Ω–∫–æ–º–∞—Ç", "—Å—Ä–æ–∫–∏", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ç–æ–ª–æ–º"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–≤—ã—Å–µ–ª–µ–Ω–∏–µ –∑–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–ø–∏—Å–∫—É", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É–∫ —É–≤–µ–¥–æ–º–ª—è—Ç—å", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 254", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "—Ä–æ–ª—å —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "–º–≤–¥.—Ä—Ñ", "–≥–æ—Å—É—Å–ª—É–≥–∏.—Ä—Ñ", "–º—Ñ—Ü.—Ä—Ñ", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".–º–≤–¥.—Ä—Ñ", ".–≥–æ—Å—É—Å–ª—É–≥–∏.—Ä—Ñ", ".–º—Ñ—Ü.—Ä—Ñ", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 713 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        queries.append(f"{query} –§–ó 5242-1 –ø—Ä–æ–ø–∏—Å–∫–∞")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        queries.append(f"{query} –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏")
        queries.append(f"{query} –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —É—á–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ –≥—Ä–∞–∂–¥–∞–Ω —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞, –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –£–ö
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–∞—Å–ø–æ—Ä—Ç–Ω–æ–º—É —É—á—ë—Ç—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•. "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó > –ü–ü –†–§ > –ñ–ö –†–§ > –ü—Ä–∏–∫–∞–∑—ã –ú–í–î > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –∏–¥—Ç–∏, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó, –ü–ü –†–§, –ñ–ö –†–§ ‚Äî —Ç–æ—á–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –ø—É–Ω–∫—Ç—ã]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π/–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å—Ä–æ–∫–∏, —Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∞—á–∏ ‚Äî –ü–ü –†–§ ‚Ññ713, –ø.9, 20)\n"
            "- –í—ã–ø–∏—Å–∫–∞ –∏–∑ –∫–≤–∞—Ä—Ç–∏—Ä—ã (–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á–µ—Ä–µ–∑ —Å—É–¥ ‚Äî –ü–ü –†–§ ‚Ññ713, –ø.28)\n"
            "- –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (—Å–æ–≥–ª–∞—Å–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –ñ–ö –†–§, —Å—Ç.31; –ü–ü –†–§ ‚Ññ713, –ø.32)\n"
            "- –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–í–ú –≤ 3-–¥–Ω–µ–≤–Ω—ã–π —Å—Ä–æ–∫ ‚Äî –ñ–ö –†–§, —Å—Ç.31(3))\n"
            "- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ú–§–¶, –ì–æ—Å—É—Å–ª—É–≥–∏, –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª ‚Äî –ü–ü –†–§ ‚Ññ713, –ø.36)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ5242-1 ¬´–û –ø—Ä–∞–≤–µ –≥—Ä–∞–∂–¥–∞–Ω –†–§ –Ω–∞ —Å–≤–æ–±–æ–¥—É –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è‚Ä¶¬ª\n"
            "- –ü–ü –†–§ ‚Ññ713 ¬´–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–Ω—è—Ç–∏–∏ –≥—Ä–∞–∂–¥–∞–Ω —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É—á–µ—Ç–∞‚Ä¶¬ª\n"
            "- –ñ–ö –†–§, —Å—Ç.31 ‚Äî –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –Ω–∞–Ω–∏–º–∞—Ç–µ–ª–µ–π\n"
            "- –§–ó ¬´–û –≤–æ–∏–Ω—Å–∫–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ¬ª (–¥–ª—è –≤–æ–µ–Ω–Ω–æ–æ–±—è–∑–∞–Ω–Ω—ã—Ö)\n"
            "- –£–ö –†–§, —Å—Ç.322.2 ‚Äî —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            "- –ü—Ä–∏–∫–∞–∑ –ú–í–î ‚Ññ984 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞‚Ä¶¬ª\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class RecalculationAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü–µ—Ä–µ—Ä–∞—Å—á–µ—Ç—ã –ñ–ö–£", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç": {
                "synonyms": ["–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "–¥–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ", "–≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–ø–µ—Ä–µ—Å—á–µ—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–ü–ü –†–§ ‚Ññ354, –ø. 90-91"],
                "contexts": ["–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞", "–æ—à–∏–±–∫–∞ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏", "–ø–æ–≤–µ—Ä–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞", "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"]
            },
            "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ": {
                "synonyms": ["–æ—Ç–ø—É—Å–∫", "–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "–±–æ–ª—å–Ω–∏—Ü–∞", "—É–µ—Ö–∞–ª", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ 5 –¥–Ω–µ–π"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 86", "–ü–ü –†–§ ‚Ññ354, –ø. 90"],
                "contexts": ["–º–∞–∫—Å–∏–º—É–º 6 –º–µ—Å—è—Ü–µ–≤", "–¥–æ–∫—É–º–µ–Ω—Ç—ã (–±–∏–ª–µ—Ç—ã, —Å–ø—Ä–∞–≤–∫–∏)", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è", "–∏—Å–∫–ª—é—á–µ–Ω–∏—è (–æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –û–î–ù)"]
            },
            "–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—Å–ª–∞–±—ã–π –Ω–∞–ø–æ—Ä –≤–æ–¥—ã", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–ü–ü –†–§ ‚Ññ354, –ø. 90"],
                "contexts": ["–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–∑–∞–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–∂–∞–ª–æ–±–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ", "—Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"]
            },
            "–∏–ø—É": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "—Å—á—ë—Ç—á–∏–∫", "–≤–æ–¥–æ–º–µ—Ä", "—ç–ª–µ–∫—Ç—Ä–æ—Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ø–ª–æ—Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31", "–ü–ü –†–§ ‚Ññ354, –ø. 81"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º", "–ø–æ–≤–µ—Ä–∫–∞", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ –ø–æ–≤–µ—Ä–∫–∏"]
            },
            "–æ–¥–ø—É": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤–æ–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–¥–æ–º–æ–≤–æ–π —Å—á—ë—Ç—á–∏–∫", "—É–∑–µ–ª —É—á—ë—Ç–∞", "–û–î–ü–£"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 40", "–ü–ü –†–§ ‚Ññ354, –ø. 42"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É", "–≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç—Ä–æ—è", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ": {
                "synonyms": ["–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–∞–≤–∞—Ä–∏–π–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–ø–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98", "–ü–ü –†–§ ‚Ññ354, –ø. 117"],
                "contexts": ["—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 30 –¥–Ω–µ–π", "–Ω–µ–ø–æ–ª–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ", "–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"]
            },
            "–æ—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π": {
                "synonyms": ["–ø–µ—Ä–µ–ø–ª–∞—Ç–∞", "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–∑–∞–≤—ã—à–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ", "–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 95", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–∞–∫—Ç —Å–≤–µ—Ä–∫–∏", "–∂–∞–ª–æ–±–∞ –≤ –£–ö", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–≤–æ–∑–≤—Ä–∞—Ç –∏–∑–ª–∏—à–Ω–µ —É–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ", "—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏"]
            },
            "–∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç": {
                "synonyms": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "—Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 91", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "—Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ (30 –¥–Ω–µ–π)", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è (5 –¥–Ω–µ–π)"]
            },
            "—Ñ–æ—Ä–º—É–ª–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞": {
                "synonyms": ["—Ä–∞—Å—á—ë—Ç –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "—Ñ–æ—Ä–º—É–ª–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", "–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç", "–ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—é 2"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2, —Ñ–æ—Ä–º—É–ª–∞ 1", "–ü–ü –†–§ ‚Ññ354, –ø. 90"],
                "contexts": ["–ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é", "–ø–æ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —É—Å–ª—É–≥–µ", "–ø–æ –æ—à–∏–±–∫–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á—ë—Ç–æ–≤", "–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã"]
            },
            "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞": {
                "synonyms": ["–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç—É", "–∏—Å–∫–ª—é—á–µ–Ω–∏—è", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–æ–¥–Ω", "–∫—Ä—É", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 86(2)", "–ü–ü –†–§ ‚Ññ354, –ø. 90(2)"],
                "contexts": ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ –≤ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", "—É—Å–ª—É–≥–∏ –Ω–∞ –æ–±—â–µ–¥–æ–º–æ–≤—ã–µ –Ω—É–∂–¥—ã", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞", "–ø–æ—á–µ–º—É –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é—Ç", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å": {
                "synonyms": ["–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Å—Ç–∞", "–≤–µ—Ç—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±", "–æ—Ç–∫–∞–∑ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 85", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∞"]
            },
            "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ": {
                "synonyms": ["–æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "—Ö–æ–ª–æ–¥–Ω–æ", "–Ω–µ –≥—Ä–µ–µ—Ç", "—Ä–∞–¥–∏–∞—Ç–æ—Ä"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 54(2)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21, –ø. 9.2"],
                "contexts": ["–Ω–æ—Ä–º–∞ +18¬∞C", "–∑–∞–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã", "–∞–∫—Ç", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏"]
            },
            "–æ–¥–Ω": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤—ã–µ –Ω—É–∂–¥—ã", "–∫—Ä—É –Ω–∞ —Å–æ–∏", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "—Ä–∞—Å—á—ë—Ç –æ–¥–Ω"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 9", "–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "–∂–∞–ª–æ–±—ã –Ω–∞ –∑–∞–≤—ã—à–µ–Ω–∏–µ", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—Å—Ä–æ–∫–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞": {
                "synonyms": ["—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", "—Å—Ä–æ–∫ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "–∫–æ–≥–¥–∞ –≤–µ—Ä–Ω—É—Ç –¥–µ–Ω—å–≥–∏", "—Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 91(5)", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", "30 –¥–Ω–µ–π –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–∏–æ–¥–µ", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞–º": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞–º", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å —É–∫"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è/–Ω–∞—Ä—É—à–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "vsrf.ru", "gjirf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".gjirf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç")
        queries.append(f"{query} –ü–ü –†–§ 354 –ø 86 –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç—É –∑–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ")
        queries.append(f"{query} —Ñ–æ—Ä–º—É–ª–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏")
        queries.append(f"{query} –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –∑–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫—É")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü–µ—Ä–µ—Ä–∞—Å—á—ë—Ç—ã –ñ–ö–£
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —É—Å–ª–æ–≤–∏—è, —Ñ–æ—Ä–º—É–ª—ã, —Å—Ä–æ–∫–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞–º –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
        - –ñ—ë—Å—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞–º –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ (–ñ–ö–£). "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ü–ü –†–§ ‚Ññ354 > –ñ–ö –†–§ > –ü–ü –†–§ ‚Ññ491 > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–ø–æ–ª–æ–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ø—É–Ω–∫—Ç—ã –ü–ü –†–§ ‚Ññ354, —Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ü–æ–ª–æ–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç? (—É—Å–ª–æ–≤–∏—è ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.86, 90)\n"
            "- –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ? (—Å—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞, –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.91)\n"
            "- –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞? (—Ñ–æ—Ä–º—É–ª–∞ –∏–∑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è 2 ‚Äî –ü–ü –†–§ ‚Ññ354)\n"
            "- –ò—Å–∫–ª—é—á–µ–Ω–∏—è? (–æ—Ç–æ–ø–ª–µ–Ω–∏–µ, –û–î–ù ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.86(2))\n"
            "- –°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: 5 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, 30 –¥–Ω–µ–π –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.91(5)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ü–ü –†–§ ‚Ññ354 ¬´–û –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥‚Ä¶¬ª (–ø.86, 90, 91; –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2)\n"
            "- –ñ–ö –†–§, —Å—Ç.157 ‚Äî –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—Ç\n"
            "- –ü–ü –†–§ ‚Ññ491 ‚Äî —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥\n"
        )
    
        # --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫: —Ä–∞—Å—á–µ—Ç –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA-3 ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class CommonPropertyAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–±—â–∏–º –ò–º—É—â–µ—Å—Ç–≤–æ–º", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–æ–±—â–µ–µ –∏–º—É—â–µ—Å—Ç–≤–æ": {
                "synonyms": ["oi", "–æ–±—â–µ–¥–æ–º–æ–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ", "–æ–∏", "–∏–º—É—â–µ—Å—Ç–≤–æ –º–∫–¥", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ü–ü –†–§ ‚Ññ491, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤", "–ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ"]
            },
            "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–∏": {
                "synonyms": ["—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∏", "–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–∏", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –æ–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 154", "–ü–ü –†–§ ‚Ññ491, –ø. 10-12"],
                "contexts": ["–ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç", "—Ç–∞—Ä–∏—Ñ", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–∫–∞—á–µ—Å—Ç–≤–æ", "–∂–∞–ª–æ–±—ã", "—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã"]
            },
            "—Ä–µ–º–æ–Ω—Ç –æ–∏": {
                "synonyms": ["—Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç", "–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –æ–∏", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∏", "—Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–∞–ª–∞", "—Ä–µ–º–æ–Ω—Ç –∫—Ä—ã—à–∏", "—Ä–µ–º–æ–Ω—Ç —Ñ–∞—Å–∞–¥–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ü–ü –†–§ ‚Ññ491, –ø. 12"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞–∫—Ç—ã –ø—Ä–∏—ë–º–∫–∏", "–≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å—Ä–æ–∫", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"]
            },
            "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": {
                "synonyms": ["–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏–¥–æ–º–æ–≤–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", "–æ–∑–µ–ª–µ–Ω–µ–Ω–∏–µ", "—É–±–æ—Ä–∫–∞ –¥–≤–æ—Ä–∞", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–¥–µ—Ç—Å–∫–∏–µ –ø–ª–æ—â–∞–¥–∫–∏", "–ø–∞—Ä–∫–æ–≤–∫–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12(1)", "–ü—Ä–∞–≤–∏–ª–∞ –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–∂–∞–ª–æ–±—ã", "—Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç—ã", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã"]
            },
            "–æ–¥–Ω": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤—ã–µ –Ω—É–∂–¥—ã", "–∫—Ä—É –Ω–∞ —Å–æ–∏", "–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "—Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–¥–Ω", "—Ñ–æ—Ä–º—É–ª–∞ –æ–¥–Ω"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 9", "–ü–ü –†–§ ‚Ññ491, –ø. 20"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º –û–î–ü–£", "–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞", "–∂–∞–ª–æ–±—ã –Ω–∞ –∑–∞–≤—ã—à–µ–Ω–∏–µ", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–æ–¥–ø—É": {
                "synonyms": ["–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫", "–æ–±—â–µ–¥–æ–º–æ–≤–æ–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–¥–æ–º–æ–≤–æ–π —Å—á—ë—Ç—á–∏–∫", "—É–∑–µ–ª —É—á—ë—Ç–∞", "–≤–≤–æ–¥–Ω–æ–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 40", "–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "—Ä–∞—Å—á—ë—Ç –û–î–ù", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–∞–∫—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã", "–Ω–µ —É–±–∏—Ä–∞—é—Ç", "–Ω–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É—é—Ç", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 156", "–ü–ü –†–§ ‚Ññ354, –ø. 106"],
                "contexts": ["–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "—Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã", "–∂–∞–ª–æ–±–∞ –≤ –£–ö/–ì–ñ–ò", "—Å—É–¥–µ–±–Ω–æ–µ –≤–∑—ã—Å–∫–∞–Ω–∏–µ"]
            },
            "–µ–∂–µ–≥–æ–¥–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–∏": {
                "synonyms": ["—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ–∏", "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–ª–∞—Ç—ã –∑–∞ –æ–∏", "–≥–æ–¥–æ–≤–æ–π –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "—Å–≤–µ—Ä–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤", "–æ—Ç—á—ë—Ç –æ —Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–∏–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 32", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Å—Ä–æ–∫–∏ (–¥–æ 1 –∞–ø—Ä–µ–ª—è)", "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (–∞–∫—Ç—ã, —Å—á—ë—Ç—á–∏–∫–∏)", "—Ä–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ", "–≤–æ–∑–≤—Ä–∞—Ç/–¥–æ–ø–ª–∞—Ç–∞", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ì–ò–° –ñ–ö–•"]
            },
            "—Ä–∞–±–æ—Ç—ã –Ω–∞ –æ–∏": {
                "synonyms": ["–ø–µ—Ä–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–ø–ª–∞–Ω —Ä–∞–±–æ—Ç", "–≥—Ä–∞—Ñ–∏–∫ —Ä–µ–º–æ–Ω—Ç–∞", "—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π", "—Ç–µ–∫—É—â–∏–π —Ä–µ–º–æ–Ω—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 10-12", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "–∫–∞—á–µ—Å—Ç–≤–æ", "–ø—Ä–∏—ë–º–∫–∞", "–∞–∫—Ç—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö"]
            },
            "—Å–æ—Å—Ç–∞–≤ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞": {
                "synonyms": ["—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–∏", "—ç–ª–µ–º–µ–Ω—Ç—ã –æ–∏", "–ø–µ—Ä–µ—á–µ–Ω—å –æ–∏", "–∫—Ä—ã—à–∞, –ø–æ–¥–≤–∞–ª, —Å—Ç–µ–Ω—ã", "–ª–∏—Ñ—Ç, —Å—Ç–æ—è–∫–∏, —á–µ—Ä–¥–∞–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ü–ü –†–§ ‚Ññ491, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1"],
                "contexts": ["–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–ë–¢–ò", "–∞–∫—Ç —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã"]
            },
            "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–∏–¥–æ–º–æ–≤–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏": {
                "synonyms": ["–¥–≤–æ—Ä", "–≥–∞–∑–æ–Ω", "—Ç—Ä–æ—Ç—É–∞—Ä", "–ø–∞—Ä–∫–æ–≤–∫–∞", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–¥–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞", "–º—É—Å–æ—Ä–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12(1)", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —É–±–æ—Ä–∫–∏", "–æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∂–∞–ª–æ–±—ã"]
            },
            "—Ä–µ–º–æ–Ω—Ç –ø–æ–¥–≤–∞–ª–∞": {
                "synonyms": ["—Ä–µ–º–æ–Ω—Ç —Ü–æ–∫–æ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≤–∞–ª–∞", "–≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è –ø–æ–¥–≤–∞–ª–∞", "—ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç—ã"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491, –ø. 12", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["—Ç–µ–∫—É—â–∏–π/–∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç", "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏—ë–º–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è", "–∂–∞–ª–æ–±—ã –Ω–∞ –∑–∞—Ç–æ–ø–ª–µ–Ω–∏–µ"]
            },
            "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É–∫": {
                "synonyms": ["–Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π", "—Ö–∞–ª–∞—Ç–Ω–æ—Å—Ç—å", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–ª–æ–±", "—à—Ç—Ä–∞—Ñ—ã", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ì–ö –†–§, —Å—Ç. 1064"],
                "contexts": ["–∞–∫—Ç—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π", "–∂–∞–ª–æ–±—ã –≤ –ì–ñ–ò", "—Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "–æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–∏": {
                "synonyms": ["–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è —É–∫", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–∂–∏", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∫", "—Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12"],
                "contexts": ["—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ (30 –¥–Ω–µ–π)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ–∏": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—ã –∑–∞ –æ–∏", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤ –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ –æ–¥–Ω", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å —É–∫"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π", "—Ä–∞—Å—á—ë—Ç —É–±—ã—Ç–∫–æ–≤", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "vsrf.ru", "gjirf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".gjirf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 491 –æ–±—â–µ–µ –∏–º—É—â–µ—Å—Ç–≤–æ")
        queries.append(f"{query} –ü–ü –†–§ 354 —Ä–∞—Å—á–µ—Ç –æ–¥–Ω")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –ø–ª–∞—Ç—ã –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–∏")
        queries.append(f"{query} —Å–æ—Å—Ç–∞–≤ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ –ú–ö–î –ñ–ö –†–§ —Å—Ç 36")
        queries.append(f"{query} –µ–∂–µ–≥–æ–¥–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –∑–∞ –æ–∏ –ü–ü –†–§ 491 –ø 32")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏–º –∏–º—É—â–µ—Å—Ç–≤–æ–º
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —Å–æ—Å—Ç–∞–≤, –ø–ª–∞—Ç–∞, –û–î–ù, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–±—â–∏–º –∏–º—É—â–µ—Å—Ç–≤–æ–º –≤ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –¥–æ–º–∞—Ö (–ú–ö–î). "
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ñ–ö –†–§ > –ü–ü –†–§ ‚Ññ491 > –ü–ü –†–§ ‚Ññ354 > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –û–ò, –ø–æ–ª–æ–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, –∫–∞–∫ —Å–Ω–∏–∑–∏—Ç—å –ø–ª–∞—Ç—É]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –ø—É–Ω–∫—Ç—ã –ü–ü –†–§]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –°–æ—Å—Ç–∞–≤ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞ (–∫—Ä—ã—à–∏, —Å—Ç–µ–Ω—ã, –ª–∏—Ñ—Ç—ã, –ø–æ–¥–≤–∞–ª—ã ‚Äî –ñ–ö –†–§, —Å—Ç.36; –ü–ü –†–§ ‚Ññ491, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1)\n"
            "- –†–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –û–ò (—Ç–∞—Ä–∏—Ñ, —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –û–°–° ‚Äî –ñ–ö –†–§, —Å—Ç.156)\n"
            "- –†–∞—Å—á—ë—Ç –û–î–ù (–ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –∏–ª–∏ –û–î–ü–£ ‚Äî –ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 9)\n"
            "- –°–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã –∑–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ (–∞–∫—Ç, –∑–∞—è–≤–ª–µ–Ω–∏–µ ‚Äî –ü–ü –†–§ ‚Ññ354, –ø.106)\n"
            "- –ï–∂–µ–≥–æ–¥–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç (–¥–æ 1 –∞–ø—Ä–µ–ª—è, –ø–æ —Ñ–∞–∫—Ç—É ‚Äî –ü–ü –†–§ ‚Ññ491, –ø.32)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.36, —Å—Ç.154-158 ‚Äî —Å–æ—Å—Ç–∞–≤ –û–ò, –ø–ª–∞—Ç–∞, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)\n"
            "- –ü–ü –†–§ ‚Ññ491 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ü—Ä–∞–≤–∏–ª —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –û–ò‚Ä¶¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354 (—Ä–∞–∑–¥–µ–ª 9 ‚Äî –û–î–ù, –ø.106 ‚Äî —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π)\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class DisputeResolutionAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –°–ø–æ—Ä–æ–≤ —Å –£–ö/–†–°–û", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å–ø–æ—Ä —Å —É–∫": {
                "synonyms": ["–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —É–∫", "—Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Å —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π", "–∂–∞–ª–æ–±–∞ –Ω–∞ —É–∫", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –∫ —É–∫", "–Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161-162", "–ì–ö –†–§, —Å—Ç. 309"],
                "contexts": ["–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–æ—Ç–∫–∞–∑ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏–π", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞"]
            },
            "—Å–ø–æ—Ä —Å —Ä—Å–æ": {
                "synonyms": ["–∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Ä—Å–æ", "—Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏—è —Å —Ä–µ—Å—É—Ä—Å–æ—Å–Ω–∞–±–∂–∞—é—â–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π", "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä—Å–æ", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –∫ —Ä—Å–æ", "–æ—à–∏–±–∫–∏ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 156-157", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 10"],
                "contexts": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞", "–Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è", "–æ—Ç–∫–∞–∑ –≤ –∞–∫—Ç–µ —Å–≤–µ—Ä–∫–∏", "–Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä—Å–æ"]
            },
            "–¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["–ø—Ä–µ—Ç–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "–¥–æ—Å—É–¥–µ–±–∫–∞", "–ø–æ–ø—ã—Ç–∫–∞ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –¥–æ —Å—É–¥–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 452"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ñ–ö–•", "—Å—Ä–æ–∫ 30 –¥–Ω–µ–π", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä—É—á–µ–Ω–∏—è", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ –≥–∂–∏": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—é", "–ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∂–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ —É–∫", "–∂–∞–ª–æ–±–∞ –Ω–∞ —É–∫ –≤ –≥–∂–∏", "–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 20", "–§–ó ‚Ññ294-–§–ó, —Å—Ç. 10"],
                "contexts": ["–æ–±—Ä–∞–∑–µ—Ü –∂–∞–ª–æ–±—ã", "—Å—Ä–æ–∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è 30 –¥–Ω–µ–π", "–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "—à—Ç—Ä–∞—Ñ—ã –¥–ª—è –£–ö"]
            },
            "–∂–∞–ª–æ–±–∞ –≤ —Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä–∞", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–∑–∞–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ52-–§–ó", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–∑–∞–º–µ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã/–¥–∞–≤–ª–µ–Ω–∏—è", "–∞–∫—Ç —Å–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ", "–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "–æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏": {
                "synonyms": ["—à–∞–±–ª–æ–Ω –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", "—Ñ–æ—Ä–º–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", "–∑–∞—è–≤–ª–µ–Ω–∏–µ-–ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —É–∫", "–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 452"],
                "contexts": ["—Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "–æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]
            },
            "—Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏ –∏—Å–∫–∞": {
                "synonyms": ["–∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å—Ä–æ–∫", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞", "3 –≥–æ–¥–∞"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 196", "–ì–ö –†–§, —Å—Ç. 200"],
                "contexts": ["3 –≥–æ–¥–∞ –¥–ª—è –∂–∏–ª–∏—â–Ω—ã—Ö —Å–ø–æ—Ä–æ–≤", "–Ω–∞—á–∞–ª–æ —Ç–µ—á–µ–Ω–∏—è", "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –∂–∫—Ö": {
                "synonyms": ["–∞–∫—Ç—ã", "—Ñ–æ—Ç–æ", "–≤–∏–¥–µ–æ", "–ø–µ—Ä–µ–ø–∏—Å–∫–∞", "–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏", "–ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 67", "–§–ó ‚Ññ446-–§–ó"],
                "contexts": ["—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä–µ–Ω–∏–µ", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–∞–∫—Ç –≤ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –ø–æ—Ä—è–¥–∫–µ"]
            },
            "–Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å —É–∫": {
                "synonyms": ["–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "–æ–±–º–∞–Ω", "—É–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∞–ª–æ–±", "—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"],
                "norm_refs": ["–ì–ö –†–§, —Å—Ç. 10", "–ñ–ö –†–§, —Å—Ç. 161"],
                "contexts": ["—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "–æ—Ç–∑—ã–≤ –ª–∏—Ü–µ–Ω–∑–∏–∏", "–≤–∑—ã—Å–∫–∞–Ω–∏–µ —É–±—ã—Ç–∫–æ–≤"]
            },
            "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤": {
                "synonyms": ["–ø—Ä–æ—Å—Ä–æ—á–∫–∞", "–Ω–µ —É–ª–æ–∂–∏–ª–∏—Å—å –≤ —Å—Ä–æ–∫", "–∑–∞–¥–µ—Ä–∂–∫–∞", "–Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 59", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["—Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏—é", "—Å—Ä–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–∂–∞–ª–æ–±–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã"]
            },
            "–Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π": {
                "synonyms": ["—É–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π", "–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É", "–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏", "–Ω–µ —Ä–µ–º–æ–Ω—Ç–∏—Ä—É–µ—Ç", "–Ω–µ —É–±–∏—Ä–∞–µ—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161", "–ü–ü –†–§ ‚Ññ491, –ø. 12"],
                "contexts": ["–∞–∫—Ç—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π", "–∂–∞–ª–æ–±—ã", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "—à—Ç—Ä–∞—Ñ—ã", "—Å—É–¥–µ–±–Ω—ã–µ –∏—Å–∫–∏", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞"]
            },
            "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥": {
                "synonyms": ["–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "—Å–ª–∞–±—ã–π –Ω–∞–ø–æ—Ä –≤–æ–¥—ã", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", "–Ω–µ—É–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥—ä–µ–∑–¥", "–Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–π –ª–∏—Ñ—Ç"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 6", "–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["–∑–∞–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–∂–∞–ª–æ–±–∞", "—Å–Ω–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—ã", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å —Ä—Ñ": {
                "synonyms": ["—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤—Å —Ä—Ñ", "–ø–æ–∑–∏—Ü–∏—è –≤–µ—Ä—Ö–æ–≤–Ω–æ–≥–æ —Å—É–¥–∞", "—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –≤—Å —Ä—Ñ", "–æ–±–∑–æ—Ä –ø—Ä–∞–∫—Ç–∏–∫–∏", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–Ω—É–º–∞"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 390", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∏–∂–µ—Å—Ç–æ—è—â–∏—Ö —Å—É–¥–æ–≤", "–µ–¥–∏–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º", "–ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç—ã", "—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏—Å–∫–∞—Ö"]
            },
            "–∂–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç–∫–∞–∑ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ": {
                "synonyms": ["–æ—Ç–∫–∞–∑ —É–∫ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "–æ—Ç–∫–∞–∑ —Ä—Å–æ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "–Ω–µ –ø—Ä–∏–∑–Ω–∞–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ", "–æ—Ç–∫–∞–∑–∞–ª–∏ –ø–æ –∞–∫—Ç—É", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 91", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "–∏—Å–∫–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ", "—Ä–∞—Å—á—ë—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ", "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∂–∫—Ö": {
                "synonyms": ["—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å —É–∫", "–ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∂–∏–ª–∏—â–Ω—ã–º –¥–µ–ª–∞–º", "—Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–≤ –ø–æ –∂–∫—Ö", "–æ–±–∑–æ—Ä—ã –ø—Ä–∞–∫—Ç–∏–∫–∏", "–ø–æ–∑–∏—Ü–∏—è —Å—É–¥–æ–≤"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "—Å—Ä–æ–∫–∏", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "proc.gov.ru", "vsrf.ru", "sudrf.ru", "kad.arbitr.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".sudrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 162 –ø—Ä–µ—Ç–µ–Ω–∑–∏—è –£–ö")
        queries.append(f"{query} –ü–ü –†–§ 354 –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ—Ç–∫–∞–∑")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ —Å–ø–æ—Ä–∞–º —Å –£–ö")
        queries.append(f"{query} –æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –≤ –£–ö –ø–æ –ñ–ö–•")
        queries.append(f"{query} –∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò –Ω–∞ –æ—Ç–∫–∞–∑ –≤ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–ø–æ—Ä–æ–≤ —Å –£–ö/–†–°–û
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –¥–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –∏—Å–∫, –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å, —Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∂–∏–ª–∏—â–Ω—ã–º —Å–ø–æ—Ä–∞–º.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ñ–ö –†–§ > –ì–ö –†–§ > –ü–ü –†–§ > –§–ó > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è, —à–∞–Ω—Å—ã –Ω–∞ —É—Å–ø–µ—Ö]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –ì–ö –†–§, –ü–ü –†–§, –§–ó]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –î–æ—Å—É–¥–µ–±–Ω–æ–µ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é (–ñ–ö –†–§, —Å—Ç.162)\n"
            "- –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤: –∞–∫—Ç—ã, —Ñ–æ—Ç–æ, –ø–µ—Ä–µ–ø–∏—Å–∫–∞, —Å–≤–∏–¥–µ—Ç–µ–ª–∏ (–ì–ü–ö –†–§, —Å—Ç.67)\n"
            "- –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã: –ì–ñ–ò, –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä, –ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞ (–§–ó ‚Ññ59-–§–ó, —Å—Ç.12)\n"
            "- –ü–æ–¥–∞—á–∞ –∏—Å–∫–∞: –ø–æ–¥—Å—É–¥–Ω–æ—Å—Ç—å, –≥–æ—Å–ø–æ—à–ª–∏–Ω–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ì–ü–ö –†–§, —Å—Ç.131)\n"
            "- –°—Ä–æ–∫–∏: –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ ‚Äî 3 –≥–æ–¥–∞ (–ì–ö –†–§, —Å—Ç.196), —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Äî 30 –¥–Ω–µ–π (–ñ–ö –†–§, —Å—Ç.162)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.155-162 ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö)\n"
            "- –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§ (—Å—Ç.196 ‚Äî –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å, —Å—Ç.309 ‚Äî –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥)\n"
            "- –ü–ü –†–§ ‚Ññ491 (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞)\n"
            "- –§–ó ‚Ññ59-–§–ó ¬´–û –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω¬ª\n"
            "- –§–ó ‚Ññ294-–§–ó ¬´–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø—Ä–∏ –≥–æ—Å–∫–æ–Ω—Ç—Ä–æ–ª–µ¬ª\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class ProceduralAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –ê–≥–µ–Ω—Ç", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∑–∞—è–≤–ª–µ–Ω–∏–µ": {
                "synonyms": ["–∑–∞—è–≤–∫–∞", "—Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ", "–æ–±—Ä–∞—â–µ–Ω–∏–µ", "–ø–∏—Å—å–º–æ", "–∑–∞–ø—Ä–æ—Å", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ñ–ö –†–§, —Å—Ç. 162"],
                "contexts": ["–≤ –£–ö", "–≤ –ì–ñ–ò", "–≤ —Å—É–¥", "–Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–Ω–∞ –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞", "–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            },
            "–∞–∫—Ç": {
                "synonyms": ["–∞–∫—Ç –æ—Å–º–æ—Ç—Ä–∞", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç", "–∞–∫—Ç –ø—Ä–∏—ë–º–∞-–ø–µ—Ä–µ–¥–∞—á–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ü–ü –†–§ ‚Ññ491, –ø. 10"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—É–¥–µ"]
            },
            "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è": {
                "synonyms": ["–¥–æ—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–µ—Ç–µ–Ω–∑–∏—è", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ", "–∂–∞–ª–æ–±–∞", "–ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "–æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 452"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 30 –¥–Ω–µ–π", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏–∏", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", "–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"]
            },
            "–æ–±—Ä–∞–∑–µ—Ü / —Ñ–æ—Ä–º–∞": {
                "synonyms": ["—à–∞–±–ª–æ–Ω", "–±–ª–∞–Ω–∫", "—Ñ–æ—Ä–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "—Ç–∏–ø–æ–≤–æ–π –æ–±—Ä–∞–∑–µ—Ü", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ü–ü –†–§ ‚Ññ491, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ü—Ä–∏–∫–∞–∑—ã –ú–∏–Ω—Å—Ç—Ä–æ—è"],
                "contexts": ["–≥–¥–µ —Å–∫–∞—á–∞—Ç—å", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", "–ø–æ–¥–ø–∏—Å—å", "–ø–µ—á–∞—Ç—å", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä–µ–Ω–∏–µ"]
            },
            "–ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": {
                "synonyms": ["—à–∞–≥–∏", "–ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç"],
                "norm_refs": [],
                "contexts": ["—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ø–æ–¥–∞—á–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ"]
            },
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã": {
                "synonyms": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "—Å–ø—Ä–∞–≤–∫–∏", "–∫–æ–ø–∏–∏", "–≤—ã–ø–∏—Å–∫–∏", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 67", "–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12"],
                "contexts": ["–ø–µ—Ä–µ—á–µ–Ω—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è", "–Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä–µ–Ω–∏–µ", "–∞–ø–æ—Å—Ç–∏–ª—å", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏", "—Å—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è"]
            },
            "–∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —É–∫": {
                "synonyms": ["–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é", "–∑–∞–ø—Ä–æ—Å –≤ —É–∫", "–ø–∏—Å—å–º–æ –≤ —É–∫", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —É–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ü–ü –†–§ ‚Ññ354, –ø. 95"],
                "contexts": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞ 10-30 –¥–Ω–µ–π", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–∂–∞–ª–æ–±–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞"]
            },
            "–∞–∫—Ç –æ—Å–º–æ—Ç—Ä–∞": {
                "synonyms": ["–∞–∫—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞", "–∞–∫—Ç –æ –∑–∞–ª–∏–≤–µ", "–∞–∫—Ç –æ –ø—Ä–æ—Ç–µ—á–∫–µ", "–∞–∫—Ç –æ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–º –∫–∞—á–µ—Å—Ç–≤–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 99", "–ñ–ö –†–§, —Å—Ç. 157"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ", "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –∞–∫—Ç", "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞/–≤–∑—ã—Å–∫–∞–Ω–∏—è"]
            },
            "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è": {
                "synonyms": ["–∞–∫—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "–∞–∫—Ç –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∞–∫—Ç –æ –¥–µ—Ñ–µ–∫—Ç–∞—Ö", "–∞–∫—Ç –æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 85", "–ü–ü –†–§ ‚Ññ491, –ø. 10"],
                "contexts": ["—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£", "—Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò"]
            },
            "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –Ω–∞ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É": {
                "synonyms": ["–∂–∞–ª–æ–±–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–µ", "–∑–∞—è–≤–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ –ø–ª–∞—Ç—ã", "–ø—Ä–µ—Ç–µ–Ω–∑–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 156", "–ü–ü –†–§ ‚Ññ354, –ø. 106"],
                "contexts": ["–∞–∫—Ç –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏", "—Ä–∞—Å—á—ë—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—ã", "—Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã", "—Å—É–¥"]
            },
            "–∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞": {
                "synonyms": ["–≤—ã–∑–æ–≤ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–≤—ã–∑–æ–≤ —ç–ª–µ–∫—Ç—Ä–∏–∫–∞", "–∑–∞—è–≤–∫–∞ –≤ –∞–≤–∞—Ä–∏–π–∫—É", "–∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", "–∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 98", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["—Å–ø–æ—Å–æ–±—ã –ø–æ–¥–∞—á–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ì–ò–° –ñ–ö–•)", "—Å—Ä–æ–∫ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", "—Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]
            },
            "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ": {
                "synonyms": ["–∏–∑–≤–µ—â–µ–Ω–∏–µ", "–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", "—Å–æ–æ–±—â–µ–Ω–∏–µ", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–æ–±—Ä–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45", "–ü–ü –†–§ ‚Ññ354, –ø. 98(5)"],
                "contexts": ["—Å—Ä–æ–∫–∏ (–Ω–µ –º–µ–Ω–µ–µ 10 –¥–Ω–µ–π)", "—Å–ø–æ—Å–æ–±—ã (–ª–∏—á–Ω–æ, –ø–æ—á—Ç–æ–π, –≤ –ì–ò–° –ñ–ö–•)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"]
            },
            "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ": {
                "synonyms": ["–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ —É–∫", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ –≥–∂–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏–µ —Ä–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä–∞", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ", "–ø—Ä–∏–∫–∞–∑"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó, —Å—Ç. 16", "–ñ–ö –†–§, —Å—Ç. 20"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "—à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", "–ø—Ä–∏–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–∞ –≤ –ø—Ä–∏—ë–º–µ", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∞", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ —Ñ–æ—Ä–º–∞–º"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–∑–Ω–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—Ä—É—á–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏", "—Ä–æ–ª—å –ø—Ä–æ–∫—É—Ä–æ—Ä–∞", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è"]
            },
            "—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è": {
                "synonyms": ["—Å—Ä–æ–∫ –æ—Ç–≤–µ—Ç–∞", "—Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è", "—Å—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "—Å—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è", "—Å—Ä–æ–∫ –¥–∞–≤–Ω–æ—Å—Ç–∏"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó, —Å—Ç. 12", "–ñ–ö –†–§, —Å—Ç. 162", "–ì–ö –†–§, —Å—Ç. 196"],
                "contexts": ["10 –¥–Ω–µ–π ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –£–ö", "30 –¥–Ω–µ–π ‚Äî –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ –∏ –∂–∞–ª–æ–±—ã", "5 –¥–Ω–µ–π ‚Äî –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "3 –≥–æ–¥–∞ ‚Äî –∏—Å–∫–æ–≤–∞—è –¥–∞–≤–Ω–æ—Å—Ç—å"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "vsrf.ru", "gjirf.ru", "fns.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".vsrf.ru", ".gjirf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ü–ü –†–§ 354 –æ–±—Ä–∞–∑–µ—Ü –∞–∫—Ç–∞")
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 162 –æ–±—Ä–∞–∑–µ—Ü –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∞–∫—Ç–æ–≤ –ñ–ö–•")
        queries.append(f"{query} –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–±—Ä–∞–∑–µ—Ü")
        queries.append(f"{query} —Ñ–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –û–°–°")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ñ–ö–• ‚Äî –∞–∫—Ç—ã, –∑–∞—è–≤–∫–∏, –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, —Ñ–æ—Ä–º—ã, —Å—Ä–æ–∫–∏
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –ñ–ö–•.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, –±–µ–∑ –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –≤–µ–±-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤—ã ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ñ–ö –†–§ > –ü–ü –†–§ > –§–ó > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω—É–∂–µ–Ω, –≥–¥–µ –≤–∑—è—Ç—å –æ–±—Ä–∞–∑–µ—Ü, –∫–∞–∫ –ø–æ–¥–∞—Ç—å]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Å—Ç–∞—Ç—å–∏ –ñ–ö –†–§, –ü–ü –†–§, –§–ó]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ö–∞–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ? (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è ‚Äî –ü–ü –†–§ ‚Ññ354, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è)\n"
            "- –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å? (–ø–æ–¥–ø–∏—Å—å, –ø–µ—á–∞—Ç—å, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –ñ–ö –†–§, —Å—Ç.162)\n"
            "- –ö—É–¥–∞ –∏ –∫–∞–∫ –ø–æ–¥–∞—Ç—å? (–ª–∏—á–Ω–æ, –ø–æ—á—Ç–æ–π, —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–• ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç.12)\n"
            "- –°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è? (10 –¥–Ω–µ–π –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, 30 –¥–Ω–µ–π –Ω–∞ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Äî –§–ó ‚Ññ59-–§–ó, —Å—Ç.12)\n"
            "- –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞? (–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò, —Å—É–¥ ‚Äî –ñ–ö –†–§, —Å—Ç.20)\n\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.45 ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Å—Ç.162 ‚Äî –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø.98-99 ‚Äî –∞–∫—Ç—ã, –∑–∞—è–≤–∫–∏; –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ñ–æ—Ä–º—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–ø.10 ‚Äî –∞–∫—Ç—ã –ø–æ –æ–±—â–µ–º—É –∏–º—É—â–µ—Å—Ç–≤—É)\n"
            "- –§–ó ‚Ññ59-–§–ó ¬´–û –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω¬ª\n"
            "- –§–ó ‚Ññ294-–§–ó ¬´–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø—Ä–∏ –≥–æ—Å–∫–æ–Ω—Ç—Ä–æ–ª–µ¬ª\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class NPBAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ü—Ä–∞–≤–æ–≤–∞—è –ë–∞–∑–∞", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∂–∫ —Ä—Ñ": {
                "synonyms": ["–∂–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å", "–∂–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å —Ä—Ñ", "–∂–∫", "–∂–∏–ª–∏—â–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–∂–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å —Ä–æ—Å—Å–∏–∏"],
                "norm_refs": ["–ñ–ö –†–§"],
                "contexts": ["–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–≥–ª–∞–≤—ã 4-9", "—Å–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ"]
            },
            "–ø–ø 354": {
                "synonyms": ["–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ 354", "–ø–ø ‚Ññ354", "–ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥", "354 –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354"],
                "contexts": ["—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã", "–ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –£–ö", "–ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è 2025"]
            },
            "–ø–ø 491": {
                "synonyms": ["–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ 491", "–ø–ø ‚Ññ491", "–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "491 –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ491"],
                "contexts": ["—Å–æ—Å—Ç–∞–≤ –û–ò", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "—Ä–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "—Ä–∞—Å—á—ë—Ç –û–î–ù", "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è"]
            },
            "–ø–ø 731": {
                "synonyms": ["–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ 731", "–ø–ø ‚Ññ731", "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "731 –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ731"],
                "contexts": ["—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –£–ö", "–ì–ò–° –ñ–ö–•", "—Ñ–æ—Ä–º—ã –æ—Ç—á—ë—Ç–æ–≤", "—Å—Ä–æ–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"]
            },
            "—Ñ–∑ 261": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω 261", "—Ñ–∑ –æ–± —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–∏", "261-—Ñ–∑", "—ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£", "—ç–Ω–µ—Ä–≥–æ–∞—É–¥–∏—Ç", "—ç–Ω–µ—Ä–≥–æ—Å–µ—Ä–≤–∏—Å", "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "—Å—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"]
            },
            "—Ñ–∑ 59": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω 59", "—Ñ–∑ –æ –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π", "59-—Ñ–∑", "–∂–∞–ª–æ–±—ã –≥—Ä–∞–∂–¥–∞–Ω", "—Å—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó"],
                "contexts": ["30 –¥–Ω–µ–π –Ω–∞ –æ—Ç–≤–µ—Ç", "–ø–∏—Å—å–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π", "–∂–∞–ª–æ–±—ã –Ω–∞ –£–ö", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "—Ñ–∑ 294": {
                "synonyms": ["—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω 294", "—Ñ–∑ –æ –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø—Ä–∏ –≥–æ—Å–∫–æ–Ω—Ç—Ä–æ–ª–µ", "294-—Ñ–∑", "–ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∫", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è"],
                "norm_refs": ["–§–ó ‚Ññ294-–§–ó"],
                "contexts": ["–ø–ª–∞–Ω–æ–≤—ã–µ/–≤–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ø—Ä–µ–¥–ø–∏—Å–∞–Ω–∏—è", "–∂–∞–ª–æ–±—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã", "—Å—Ä–æ–∫–∏", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]
            },
            "—Å–∞–Ω–ø–∏–Ω": {
                "synonyms": ["—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞", "—Å–∞–Ω–ø–∏–Ω 1.2.3685-21", "–≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã", "–∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥"],
                "norm_refs": ["–°–∞–Ω–ü–∏–ù 1.2.3685-21"],
                "contexts": ["—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã", "—à—É–º", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "–∞–Ω—Ç–∏—Å–∞–Ω–∏—Ç–∞—Ä–∏—è", "–∂–∞–ª–æ–±—ã –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä"]
            },
            "—Å–Ω–∏–ø": {
                "synonyms": ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã", "—Å–Ω–∏–ø—ã", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è"],
                "norm_refs": ["–°–ü 50.13330.2012", "–°–ü 60.13330.2016"],
                "contexts": ["—Ç–µ–ø–ª–æ–≤–∞—è –∑–∞—â–∏—Ç–∞", "–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "–±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
            },
            "–≥–æ—Å—Ç": {
                "synonyms": ["–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "–≥–æ—Å—Ç—ã", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã", "–∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "–∏—Å–ø—ã—Ç–∞–Ω–∏—è"],
                "norm_refs": ["–ì–û–°–¢ 30674-99", "–ì–û–°–¢ –† 58237-2024"],
                "contexts": ["–æ–∫–Ω–∞", "–¥–≤–µ—Ä–∏", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é"]
            },
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞": {
                "synonyms": ["–ø–ø —Ä—Ñ", "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"],
                "norm_refs": [],
                "contexts": ["–ø–ø ‚Ññ354", "–ø–ø ‚Ññ491", "–ø–ø ‚Ññ731", "–ø–ø ‚Ññ1149", "–≥–¥–µ –Ω–∞–π—Ç–∏", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Ä—Ç–∞–ª –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            },
            "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω": {
                "synonyms": ["—Ñ–∑", "—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω —Ä—Ñ", "–∑–∞–∫–æ–Ω", "–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–∫—Ç", "–∂–∫ —Ä—Ñ", "—Ñ–∑ ‚Ññ261", "—Ñ–∑ ‚Ññ59"],
                "norm_refs": [],
                "contexts": ["–≥–¥–µ —á–∏—Ç–∞—Ç—å", "–ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–∏–∑–º–µ–Ω–µ–Ω–∏—è", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ø–ª—é—Å", "–≥–∞—Ä–∞–Ω—Ç"]
            },
            "–ø—Ä–∏–∫–∞–∑ –º–∏–Ω—Å—Ç—Ä–æ—è": {
                "synonyms": ["–ø—Ä–∏–∫–∞–∑", "–ø—Ä–∏–∫–∞–∑—ã –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "—Ñ–æ—Ä–º—ã –æ—Ç—á—ë—Ç–æ–≤", "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "—É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ48/414", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚Ññ74/–ø—Ä"],
                "contexts": ["—Ñ–æ—Ä–º—ã –≥–æ–¥–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤", "–ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ì–ò–° –ñ–ö–•", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∫–∞–∑—ã", "—Å–∫–∞—á–∞—Ç—å", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]
            },
            "–ø–∏—Å—å–º–æ –º–∏–Ω—Å—Ç—Ä–æ—è": {
                "synonyms": ["—Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è –º–∏–Ω—Å—Ç—Ä–æ—è", "–ø–∏—Å—å–º–∞", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º", "–º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –ø–∏—Å—å–º–∞"],
                "norm_refs": [],
                "contexts": ["–Ω–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ, –Ω–æ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ", "–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—É–¥–∞—Ö", "—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä–Ω—ã—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–π", "–ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á—ë—Ç–æ–≤", "—Å–∫–∞—á–∞—Ç—å —Å —Å–∞–π—Ç–∞"]
            },
            "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è": {
                "synonyms": ["–ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–Ω–æ–≤–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–æ–Ω", "–≤—Å—Ç—É–ø–∏–ª –≤ —Å–∏–ª—É"],
                "norm_refs": [],
                "contexts": ["–¥–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", "—Å–∞–π—Ç pravo.gov.ru", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ø–ª—é—Å", "–≥–∞—Ä–∞–Ω—Ç", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ—Ä—Ç–∞–ª –ø—Ä–∞–≤–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "vsrf.ru", "gjirf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".pravo.gov.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç")
        queries.append(f"{query} –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è 2025")
        queries.append(f"{query} pravo.gov.ru")
        queries.append(f"{query} –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–ø–ª—é—Å –≥–∞—Ä–∞–Ω—Ç")
        queries.append(f"{query} –≤—Å—Ç—É–ø–∏–ª –≤ —Å–∏–ª—É –∫–æ–≥–¥–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ü—Ä–∞–≤–æ–≤–∞—è –ë–∞–∑–∞
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ø–æ–∏—Å–∫ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ –ñ–ö–•
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ –≤ –ñ–ö–•.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—á–∞–π: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è ‚Üí –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å ‚Üí –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ‚Üí –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–æ—Ä–º—É–ª—ã –ø–µ–Ω–∏ –≤–∫–ª—é—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (pravo.gov.ru, consultant.ru, garant.ru) > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [–≥–¥–µ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–¥–∞–∫—Ü–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è]\n"
            "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç / –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è: [—Å—Ç–∞—Ç—å–∏, –ø—É–Ω–∫—Ç—ã, —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏]\n"
            "–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–∏–ª—É:\n"
            "- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–¥–∞–∫—Ü–∏–∏: [–£–∫–∞–∑–∞—Ç—å]\n"
            "- –î–∞—Ç–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Å–∏–ª—É: [–£–∫–∞–∑–∞—Ç—å]\n"
            "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: [pravo.gov.ru, consultant.ru, garant.ru]\n"
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:\n"
            "- –ö–∞–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è (–ø—Ä–∏–º–µ—Ä—ã, —Ç–∏–ø–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏)\n"
            "- –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç (–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –∞–∫—Ç—ã, –¥–æ–≥–æ–≤–æ—Ä—ã)\n"
            "- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã (–ì–ñ–ò, –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä, –§–ê–°)\n"
            "–í–∑–∞–∏–º–æ—Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∞–º–∏:\n"
            "- –î–æ–ø–æ–ª–Ω—è—é—â–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω—è—é—â–∏–µ –∞–∫—Ç—ã\n"
            "- –ê–∫—Ç—ã, —É—Ç—Ä–∞—á–∏–≤–∞—é—â–∏–µ —Å–∏–ª—É\n"
            "- –ü–æ–¥–∑–∞–∫–æ–Ω–Ω—ã–µ –∞–∫—Ç—ã, –ø—Ä–∏–Ω—è—Ç—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (—Å—Ç.154-162 ‚Äî –ø–ª–∞—Ç–∞, –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–∞–∫—Ç—ã, —Ñ–æ—Ä–º—ã, –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—á—ë—Ç–æ–≤)\n"
            "- –ü–ü –†–§ ‚Ññ491 (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞)\n"
            "- –°–∞–Ω–ü–∏–ù 1.2.3685-21 (—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–æ—Ä–º—ã)\n"
            "- –§–ó ‚Ññ59-–§–ó, –§–ó ‚Ññ294-–§–ó (–ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π, –≥–æ—Å–∫–æ–Ω—Ç—Ä–æ–ª—å)\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è QVikhr / LLaMA ---
        prompt_formatted = (
            "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n"
            f"{system_prompt}<|eot_id|>"
        )
    
        return prompt_formatted

class IPUODPUAgent(RAGAgent):
    def __init__(self):
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ü—Ä–∏–±–æ—Ä—ã –£—á–µ—Ç–∞ (–ò–ü–£/–û–î–ü–£)", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–∏–ø—É": {
                "synonyms": ["–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Å—á—ë—Ç—á–∏–∫ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ", "—É–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13", "–ü–ü –†–§ ‚Ññ354, –ø. 31"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "—Å—Ä–æ–∫–∏ –º–æ–Ω—Ç–∞–∂–∞", "–ø–æ–≤–µ—Ä–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "—Ä–∞—Å—á—ë—Ç –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ"]
            },
            "–æ–¥–ø—É": {
                "synonyms": ["–æ–±—â–µ–¥–æ–º–æ–≤–æ–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "–¥–æ–º–æ–≤–æ–π —Å—á—ë—Ç—á–∏–∫", "—É–∑–µ–ª —É—á—ë—Ç–∞", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "–≤–≤–æ–¥–Ω–æ–π —Å—á—ë—Ç—á–∏–∫"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13", "–ü–ü –†–§ ‚Ññ354, –ø. 40"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å"]
            },
            "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞": {
                "synonyms": ["–º–æ–Ω—Ç–∞–∂ —Å—á—ë—Ç—á–∏–∫–∞", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–ø—É/–æ–¥–ø—É", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞", "–∑–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–∞", "–¥–µ–º–æ–Ω—Ç–∞–∂ —Å—á—ë—Ç—á–∏–∫–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(5)", "–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13"],
                "contexts": ["–∑–∞ —á–µ–π —Å—á—ë—Ç", "—Å—Ä–æ–∫–∏", "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ", "–¥–æ–ø—É—Å–∫", "–∞–∫—Ç –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
            },
            "–ø–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞": {
                "synonyms": ["–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞", "–º–µ—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–≤–µ—Ä–∫–∞", "–º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", "–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–≤–µ—Ä–∫–∏", "—Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 81"],
                "contexts": ["–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å", "–∫—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–∞–∫—Ç –ø–æ–≤–µ—Ä–∫–∏", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –ø—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ", "–∂–∞–ª–æ–±–∞ –Ω–∞ –†–°–û/–£–ö"]
            },
            "–æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∞": {
                "synonyms": ["–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∞", "–æ–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏–µ", "–≤–≤–æ–¥ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é", "–¥–æ–ø—É—Å–∫ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏", "–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(3)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö/–†–°–û", "—Å—Ä–æ–∫–∏ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 15 –¥–Ω–µ–π)", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç–∫–∞–∑", "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", "–∞–∫—Ç –≤–≤–æ–¥–∞ –≤ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"]
            },
            "—Å–Ω—è—Ç–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π": {
                "synonyms": ["–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "—Å—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏", "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(1)", "–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)"],
                "contexts": ["—Å 23 –ø–æ 25 —á–∏—Å–ª–æ", "—Å–ø–æ—Å–æ–±—ã (–ª–∏—á–Ω–æ, –æ–Ω–ª–∞–π–Ω, —á–µ—Ä–µ–∑ –£–ö)", "–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞—á–∏", "—Ä–∞—Å—á—ë—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "–¥–æ—Å—Ç—É–ø –∫ –ø—É—Å—É": {
                "synonyms": ["–¥–æ—Å—Ç—É–ø –∫ —Å—á—ë—Ç—á–∏–∫—É", "–¥–æ–ø—É—Å–∫ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É", "–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á—ë—Ç—á–∏–∫–∞", "–æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ", "–Ω–µ –ø—É—Å–∫–∞—é—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(4)", "–ñ–ö –†–§, —Å—Ç. 36"],
                "contexts": ["–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", "–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –æ—Ç–∫–∞–∑", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∞–∫—Ç –æ–± –æ—Ç–∫–∞–∑–µ"]
            },
            "–æ—Ç–∫–∞–∑ –≤ –ø–æ–≤–µ—Ä–∫–µ": {
                "synonyms": ["–æ—Ç–∫–∞–∑ –≤ –¥–æ–ø—É—Å–∫–µ –∫ –ø–æ–≤–µ—Ä–∫–µ", "–Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å—á—ë—Ç—á–∏–∫", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω—ã–º", "–¥–µ—Ñ–µ–∫—Ç —Å—á—ë—Ç—á–∏–∫–∞", "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–∏—ë–º–∫–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 81(12)", "–§–ó ‚Ññ102-–§–ó"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞–∑–∞", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –†–æ—Å—Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º 1.5"]
            },
            "–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ": {
                "synonyms": ["–Ω–µ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∞–ª–∏", "–æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ–ø—É—Å–∫–µ", "–Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Å—á—ë—Ç—á–∏–∫", "—Ç—Ä–µ–±—É—é—Ç –∑–∞–º–µ–Ω—ã", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(3)", "–ü—Ä–∞–≤–∏–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ñ–ö–•"],
                "contexts": ["–∑–∞–∫–æ–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –≤ –ì–ñ–ò", "—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞ —Å–≤–æ–π —Å—á—ë—Ç", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å": {
                "synonyms": ["–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–∞–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–µ—Å—Ç–∞", "–≤–µ—Ç—Ö–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±", "–æ—Ç–∫–∞–∑ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 85", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["–ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", "—Å–æ—Å—Ç–∞–≤ –∫–æ–º–∏—Å—Å–∏–∏", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∞", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –±–µ–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∞"]
            },
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π": {
                "synonyms": ["—É–º–Ω—ã–π —Å—á—ë—Ç—á–∏–∫", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–∏—Å –∂–∫—Ö", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞"],
                "norm_refs": ["–§–ó ‚Ññ261-–§–ó, —Å—Ç. 13(5)", "–ü–ü –†–§ ‚Ññ354, –ø. 31(1)"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å 2025 –≥–æ–¥–∞", "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏", "–ø–µ—Ä–µ–¥–∞—á–∞ –±–µ–∑ —É—á–∞—Å—Ç–∏—è –∂–∏–ª—å—Ü–∞", "–∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"]
            },
            "–¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–≤–µ—Ä–∫–∏": {
                "synonyms": ["—Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "–º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", "–¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–≤–µ—Ä–∫–∏", "–ø–∞—Å–ø–æ—Ä—Ç —Å—á—ë—Ç—á–∏–∫–∞", "—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –ø–æ–≤–µ—Ä–∫–µ"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó", "–ü–ü –†–§ ‚Ññ354, –ø. 81"],
                "contexts": ["–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", "—Å—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—á—ë—Ç—á–∏–∫–æ–≤", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–∑–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–∞"]
            },
            "–º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª": {
                "synonyms": ["–º–ø–∏", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–≤–µ—Ä–∫–∏", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø–æ–≤–µ—Ä–∫–∏", "–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤–µ—Ä–∫–∏", "—Å—Ä–æ–∫ –º–µ–∂–¥—É –ø–æ–≤–µ—Ä–∫–∞–º–∏"],
                "norm_refs": ["–§–ó ‚Ññ102-–§–ó, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2", "–ü–ü –†–§ ‚Ññ354, –ø. 81"],
                "contexts": ["–≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ ‚Äî 4 –≥–æ–¥–∞", "—Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ ‚Äî 6 –ª–µ—Ç", "—Ç–µ–ø–ª–æ ‚Äî 4 –≥–æ–¥–∞", "–≥–∞–∑ ‚Äî 10 –ª–µ—Ç", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ ‚Äî 16 –ª–µ—Ç", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É"]
            },
            "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É": {
                "synonyms": ["—Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ —Å—á—ë—Ç—á–∏–∫–∞", "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–ø—É"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 42", "–ü–ü –†–§ ‚Ññ354, –ø. 42(1)"],
                "contexts": ["—É—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É", "–ø–æ–≤—ã—à–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç 1.5", "–æ—Ç–∫–∞–∑ –≤ –¥–æ–ø—É—Å–∫–µ", "–∏—Å—Ç—ë–∫ —Å—Ä–æ–∫ –ø–æ–≤–µ—Ä–∫–∏", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–±–æ—Ä–∞–º —É—á–µ—Ç–∞": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ –∏–ø—É", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã —Å —É–∫/—Ä—Å–æ"],
                "norm_refs": ["–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Å—Ä–æ–∫–∏ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "cbr.ru", "government.ru", "kremlin.ru", "rosstat.gov.ru", "minfin.gov.ru",
            "fas.gov.ru", "gji.ru", "rospotrebnadzor.ru", "rosreestr.gov.ru",
            "minstroyrf.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "rostec.ru", "vsrf.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".pravo.gov.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –§–ó 261-–§–ó –ø—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞")
        queries.append(f"{query} –ü–ü –†–§ 354 –ø 81 –ø–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–∞–∑—É –≤ –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–µ —Å—á–µ—Ç—á–∏–∫–∞")
        queries.append(f"{query} –º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã")
        queries.append(f"{query} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£ –æ–±—Ä–∞–∑–µ—Ü –∞–∫—Ç–∞")
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ü—Ä–∏–±–æ—Ä—ã —É—á—ë—Ç–∞ (–ò–ü–£/–û–î–ü–£)
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–±–æ—Ä–∞–º —É—á—ë—Ç–∞ (–ò–ü–£/–û–î–ü–£) –≤ –ñ–ö–•.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ù–ò–ö–ê–ö–ò–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô: –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—Ç—å: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°–¢–†–£–ö–¢–£–†–ê: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–û–†–ú–£–õ–´ –¢–û–õ–¨–ö–û –ü–†–ò –ó–ê–ü–†–û–°–ï –æ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó ‚Ññ261-–§–ó > –ü–ü –†–§ ‚Ññ354 > –§–ó ‚Ññ102-–§–ó > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–∫–æ–Ω–Ω–æ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [—Å—Ç–∞—Ç—å–∏ –§–ó ‚Ññ261-–§–ó, –ü–ü –†–§ ‚Ññ354, –§–ó ‚Ññ102-–§–ó]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –û–±—è–∑–∞–Ω—ã –ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ò–ü–£/–û–î–ü–£? (–§–ó ‚Ññ261-–§–ó, —Å—Ç.13)\n"
            "- –ü–æ—Ä—è–¥–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–º–µ–Ω—ã, –æ–ø–ª–æ–º–±–∏—Ä–æ–≤–∫–∏ (–ü–ü –†–§ ‚Ññ354, –ø.31)\n"
            "- –ü–æ—Ä—è–¥–æ–∫ –ø–æ–≤–µ—Ä–∫–∏, –º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–ü–ü –†–§ ‚Ññ354, –ø.81; –§–ó ‚Ññ102-–§–ó)\n"
            "- –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π (–ü–ü –†–§ ‚Ññ354, –ø.31(1))\n"
            "- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (–ü–ü –†–§ ‚Ññ354, –ø.85)\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ261-–§–ó (—Å—Ç.13 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ò–ü–£)\n"
            "- –ü–ü –†–§ ‚Ññ354 (–ø.31, 81, 85 ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –ø–æ–≤–µ—Ä–∫–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)\n"
            "- –§–ó ‚Ññ102-–§–ó (–ø–æ–≤–µ—Ä–∫–∞, –º–µ–∂–ø–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)\n"
            "- –ü–ü –†–§ ‚Ññ491 (–µ—Å–ª–∏ –û–î–ü–£ –∫–∞—Å–∞–µ—Ç—Å—è –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞)\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è LLaMA / QVikhr ---
        prompt_formatted = f"{system_prompt}"
    
        return prompt_formatted

class GISGKHAgent(RAGAgent):
    def __init__(self):
        # –°—Ç—Ä–æ–∏–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–ì–æ—Å—É—Å–ª—É–≥–∏ –∏ –ì–ò–° –ñ–ö–•", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "–≥–æ—Å—É—Å–ª—É–≥–∏": {
                "synonyms": ["–ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥", "—Å–∞–π—Ç –≥–æ—Å—É—Å–ª—É–≥", "gosuslugi.ru", "–≥–æ—Å—É—Å–ª—É–≥–∏ —Ä—Ñ", "–µ–¥–∏–Ω—ã–π –ø–æ—Ä—Ç–∞–ª –≥–æ—Å—É—Å–ª—É–≥"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1191", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã ‚ÑñXXX"],
                "contexts": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ—Ä—Ç–∞–ª"]
            },
            "–≥–∏—Å –∂–∫—Ö": {
                "synonyms": ["–≥–∏—Å –∂–∫—Ö", "–ø–æ—Ä—Ç–∞–ª –≥–∏—Å –∂–∫—Ö", "dom.gosuslugi.ru", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∂–∫—Ö", "–≥–∏—Å –∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞"],
                "norm_refs": ["–§–ó ‚Ññ209-–§–ó", "–ü–ü –†–§ ‚Ññ1131", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∂–∏–ª—å—Ü–∞", "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –£–ö", "–æ—Ç—á—ë—Ç—ã –£–ö", "—Ç–∞—Ä–∏—Ñ—ã –ñ–ö–•", "—Å–æ—Å—Ç–∞–≤ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–∂–∞–ª–æ–±—ã –Ω–∞ –£–ö"]
            },
            "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∂–∏–ª—å—Ü–∞": {
                "synonyms": ["–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ –≥–æ—Å—É—Å–ª—É–≥–∞—Ö", "–∫–∞–±–∏–Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", "–¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–æ–º—É", "–ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∂–∏–ª—å—Ü–∞", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∂–∏–ª—å—Ü–∞ –≤ –≥–∏—Å –∂–∫—Ö"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1131, –ø. 12", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏", "–ø—Ä–∏–≤—è–∑–∫–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞", "–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–∂–∞–ª–æ–±—ã –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", "–∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"]
            },
            "–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —É–∫": {
                "synonyms": ["–∫–∞–±–∏–Ω–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "–≤—Ö–æ–¥ –¥–ª—è –£–ö", "–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –£–ö", "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1131, –ø. 15", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", "–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–æ–≤", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤", "–≤–Ω–µ—Å–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π –û–î–ü–£", "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∂–∞–ª–æ–±—ã", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ì–ò–° –ñ–ö–•"]
            },
            "–ø–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã": {
                "synonyms": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∂–∞–ª–æ–±–∞", "–æ–Ω–ª–∞–π–Ω-–∂–∞–ª–æ–±–∞", "–∂–∞–ª–æ–±–∞ —á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏", "–∂–∞–ª–æ–±–∞ –≤ –≥–∏—Å –∂–∫—Ö", "–æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∂–∏–ª–∏–Ω—Å–ø–µ–∫—Ü–∏—é"],
                "norm_refs": ["–§–ó ‚Ññ59-–§–ó", "–ü–ü –†–§ ‚Ññ1131, –ø. 20", "–ü–ü –†–§ ‚Ññ1191"],
                "contexts": ["—Å—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è (–¥–æ 30 –¥–Ω–µ–π)", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è", "–ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "—Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –£–ö/–†–°–û", "–∞–ø–µ–ª–ª—è—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è"]
            },
            "–ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π": {
                "synonyms": ["–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "–≤–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π", "—Å–Ω—è—Ç–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –æ–Ω–ª–∞–π–Ω", "—Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –≤ –≥–∏—Å –∂–∫—Ö"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ354, –ø. 31(1)", "–ü–ü –†–§ ‚Ññ1131, –ø. 18"],
                "contexts": ["—Å—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ (23-25 —á–∏—Å–ª–æ)", "—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ vs –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞", "–∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥–∞—á", "–æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"]
            },
            "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏": {
                "synonyms": ["—É–∑–Ω–∞—Ç—å –¥–æ–ª–≥", "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", "–∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "–≤—ã–ø–∏—Å–∫–∞ –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É", "–¥–æ–ª–≥ –∑–∞ –∂–∫—É"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó, —Å—Ç. 7", "–ü–ü –†–§ ‚Ññ1131, –ø. 12(3)"],
                "contexts": ["–ø–æ –∞–¥—Ä–µ—Å—É", "–ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É", "—ç–∫—Å–ø–æ—Ä—Ç –≤ PDF", "–æ–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω", "—Ä–∞—Å—Å—Ä–æ—á–∫–∞", "–æ—à–∏–±–∫–∏ –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö"]
            },
            "–æ—Ç—á–µ—Ç—ã —É–∫": {
                "synonyms": ["–æ—Ç—á—ë—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏", "–ø—É–±–ª–∏—á–Ω—ã–µ –æ—Ç—á—ë—Ç—ã", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å —É–∫", "–ø–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç", "–æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 162", "–ü–ü –†–§ ‚Ññ1131, –ø. 15(4)"],
                "contexts": ["–≥–¥–µ –Ω–∞–π—Ç–∏ –≤ –ì–ò–° –ñ–ö–•", "–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã", "–∂–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç—á—ë—Ç–æ–≤", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏"]
            },
            "—Ç–∞—Ä–∏—Ñ—ã –∂–∫—Ö": {
                "synonyms": ["—Ç–∞—Ä–∏—Ñ—ã –Ω–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "—Ü–µ–Ω—ã –Ω–∞ –∂–∫—É", "–Ω–æ—Ä–º–∞—Ç–∏–≤—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "—Ä–∞—Å—á—ë—Ç –ø–ª–∞—Ç—ã", "—Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 157", "–ü–ü –†–§ ‚Ññ354, —Ä–∞–∑–¥–µ–ª 3", "–ü–ü –†–§ ‚Ññ1131, –ø. 15(2)"],
                "contexts": ["–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã", "–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å 1 –∏—é–ª—è", "—Ç–∞—Ä–∏—Ñ—ã –ø–æ –≤–∏–¥–∞–º —É—Å–ª—É–≥", "—Ä–∞—Å—á—ë—Ç —Å —É—á—ë—Ç–æ–º –ª—å–≥–æ—Ç", "–æ–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤"]
            },
            "—Å–æ—Å—Ç–∞–≤ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞": {
                "synonyms": ["–æ–∏ –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–≥–æ –¥–æ–º–∞", "–ø–µ—Ä–µ—á–µ–Ω—å –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–∏", "—Ä–µ–µ—Å—Ç—Ä –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 36", "–ü–ü –†–§ ‚Ññ491", "–ü–ü –†–§ ‚Ññ1131, –ø. 15(5)"],
                "contexts": ["–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ì–ò–° –ñ–ö–•", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö –ø–æ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏", "–∂–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "—Å—É–¥–µ–±–Ω—ã–µ —Å–ø–æ—Ä—ã –ø–æ —Å–æ—Å—Ç–∞–≤—É –û–ò", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å": {
                "synonyms": ["—ç—Ü–ø", "—É—Å–∏–ª–µ–Ω–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è –≥–æ—Å—É—Å–ª—É–≥", "–ø–æ–¥–ø–∏—Å—å –¥–ª—è —é—Ä–ª–∏—Ü", "–ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–∏–∑–ª–∏—Ü"],
                "norm_refs": ["–§–ó ‚Ññ63-–§–ó", "–ü–ü –†–§ ‚Ññ1191, –ø. 8"],
                "contexts": ["–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å", "–≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", "—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–æ—Ç–∫–∞–∑ –≤ –ø—Ä–∏—ë–º–µ –ø–æ–¥–ø–∏—Å–∏", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"]
            },
            "–º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ": {
                "synonyms": ["–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Å—É—Å–ª—É–≥–∏", "–≥–æ—Å—É—Å–ª—É–≥–∏ –º–æ–±–∏–ª—å–Ω–æ–µ", "app gosuslugi", "–≥–∏—Å –∂–∫—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "–º–æ–±–∏–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∂–∫—Ö"],
                "norm_refs": ["–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã ‚ÑñXXX", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è ‚ÑñXXX"],
                "contexts": ["—Å–∫–∞—á–∞—Ç—å –≤ AppStore/GooglePlay", "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞", "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"]
            },
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞": {
                "synonyms": ["–ø–æ–º–æ—â—å –Ω–∞ –≥–æ—Å—É—Å–ª—É–≥–∞—Ö", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–∏—Å –∂–∫—Ö", "–≥–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è", "—á–∞—Ç-–±–æ—Ç", "–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "–æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó, —Å—Ç. 10", "–ü–ü –†–§ ‚Ññ1191, –ø. 12"],
                "contexts": ["–∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "—Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", "–∂–∞–ª–æ–±–∞ –Ω–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞", "–æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç": {
                "synonyms": ["—ç–¥–æ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã", "–æ–±–º–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–Ω–ª–∞–π–Ω", "—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∞–∫—Ç—ã"],
                "norm_refs": ["–§–ó ‚Ññ63-–§–ó", "–§–ó ‚Ññ149-–§–ó", "–ü–ü –†–§ ‚Ññ1131, –ø. 17"],
                "contexts": ["—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞", "–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –£–ö/–†–°–û", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–µ–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≠–î–û", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"]
            },
            "—É–¥–∞–ª—ë–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": {
                "synonyms": ["–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã", "—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∂–∫—Ö", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏", "–±–µ–∑ –ø–æ—Å–µ—â–µ–Ω–∏—è –æ—Ñ–∏—Å–∞"],
                "norm_refs": ["–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ1191", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞¬ª"],
                "contexts": ["–ø–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö", "–æ–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ú–ì–ù"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "gosuslugi.ru", "dom.gosuslugi.ru", "minstroyrf.ru", "min—Ü–∏—Ñ—Ä—ã.—Ä—Ñ", "government.ru",
            "gji.ru", "rosreestr.gov.ru", "fgis-tarif.ru", "consultant.ru", "garant.ru",
            "pravo.gov.ru", "gkh.ru", "roscomnadzor.ru", "vsrf.ru", "fias.nalog.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".pravo.gov.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ì–ò–° –ñ–ö–• –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç–∞–ª")
        queries.append(f"{query} –≥–æ—Å—É—Å–ª—É–≥–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å")
        queries.append(f"{query} –§–ó 210-–§–ó —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏")
        queries.append(f"{query} –ü–ü –†–§ 1131 –ì–ò–° –ñ–ö–• –ø–æ—Ä—è–¥–æ–∫")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –∂–∞–ª–æ–±–∞–º —á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –ì–æ—Å—É—Å–ª—É–≥–∏ –∏ –ì–ò–° –ñ–ö–•
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ñ–ö–• ‚Äî –ø–æ—Ä—Ç–∞–ª –ì–æ—Å—É—Å–ª—É–≥, –ì–ò–° –ñ–ö–•, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ—à–∏–±–∫–∏
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –ñ–ö–•: –ø–æ—Ä—Ç–∞–ª –ì–æ—Å—É—Å–ª—É–≥ –∏ –ì–ò–° –ñ–ö–•.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ù–ò–ö–ê–ö–ò–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô: –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—Ç—å: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°–¢–†–£–ö–¢–£–†–ê: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–û–†–ú–£–õ–´ –¢–û–õ–¨–ö–û –ü–†–ò –ó–ê–ü–†–û–°–ï –æ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –§–ó ‚Ññ210-–§–ó > –ü–ü –†–§ ‚Ññ1131 > –§–ó ‚Ññ63-–§–ó > –ü–ü –†–§ ‚Ññ354 > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –≥–¥–µ –Ω–∞–π—Ç–∏, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–§–ó ‚Ññ210-–§–ó, –ü–ü –†–§ ‚Ññ1131, –§–ó ‚Ññ63-–§–ó, –ü–ü –†–§ ‚Ññ354]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –ì–æ—Å—É—Å–ª—É–≥ / –ì–ò–° –ñ–ö–• (–§–ó ‚Ññ210-–§–ó, —Å—Ç.6)\n"
            "- –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ —Ä–∞–∑–¥–µ–ª–∞\n"
            "- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö (–ø–∞—Å–ø–æ—Ä—Ç, –°–ù–ò–õ–°, –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç, –≠–¶–ü)\n"
            "- –ü–æ—à–∞–≥–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "- –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ö (—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∂–∞–ª–æ–±–∞, –ì–ñ–ò)\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –§–ó ‚Ññ210-–§–ó ¬´–û–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥¬ª\n"
            "- –ü–ü –†–§ ‚Ññ1131 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ü—Ä–∞–≤–∏–ª —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ì–ò–° –ñ–ö–•¬ª\n"
            "- –§–ó ‚Ññ63-–§–ó ¬´–û–± —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏¬ª\n"
            "- –ü–ü –†–§ ‚Ññ354 (–µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –ñ–ö–£)\n"
            "- –§–ó ‚Ññ59-–§–ó ¬´–û –ø–æ—Ä—è–¥–∫–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –≥—Ä–∞–∂–¥–∞–Ω¬ª\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è LLaMA / QVikhr ---
        prompt_formatted = f"{system_prompt}"
    
        return prompt_formatted

class OwnerMeetingAgent(RAGAgent):
    def __init__(self):
        # –°—Ç—Ä–æ–∏–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤
        self.term_map = self._build_term_map()
        keywords = self._flatten_term_map(self.term_map)
        
        super().__init__("–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –°–æ–±—Ä–∞–Ω–∏—è", keywords)

    def _build_term_map(self) -> Dict[str, Any]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏."""
        return {
            "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ø–æ–º–µ—â–µ–Ω–∏—è": {
                "synonyms": ["–≤–ª–∞–¥–µ–ª–µ—Ü –∫–≤–∞—Ä—Ç–∏—Ä—ã", "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∂–∏–ª—å—è", "—É—á–∞—Å—Ç–Ω–∏–∫ –æ—Å—Å", "—á–ª–µ–Ω –æ—Å—Å", "–∂–∏–ª–µ—Ü-—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 30", "–ì–ö –†–§, —Å—Ç. 209", "–§–ó ‚Ññ189-–§–ó, —Å—Ç. 36"],
                "contexts": ["–ø—Ä–∞–≤–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ—Å—Å", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∂–∫—É", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–ø—Ä–∞–≤–æ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "–ø—Ä–∞–≤–æ –Ω–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π"]
            },
            "–æ–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤": {
                "synonyms": ["–æ—Å—Å", "—Å–æ–±—Ä–∞–Ω–∏–µ –∂–∏–ª—å—Ü–æ–≤", "—Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "–æ—á–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "–∑–∞–æ—á–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 44-48", "–ü–ü –†–§ ‚Ññ416", "–ü–ü –†–§ ‚Ññ1131 (–¥–ª—è –ì–ò–° –ñ–ö–•)"],
                "contexts": ["–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è", "—Å—Ä–æ–∫–∏ —Å–æ–∑—ã–≤–∞", "—Ñ–æ—Ä–º–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–∫–≤–æ—Ä—É–º", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–ø—Ä–æ—Ç–æ–∫–æ–ª"]
            },
            "–ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–±—Ä–∞–Ω–∏—è": {
                "synonyms": ["–ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Å—Å", "–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–∞–∫—Ç —Å–æ–±—Ä–∞–Ω–∏—è", "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Å—Å", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 15", "–ü–ü –†–§ ‚Ññ1131, –ø. 19"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", "—Å—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", "–ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –ì–ò–° –ñ–ö–•", "–æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ", "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", "—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –ª–µ—Ç"]
            },
            "–∫–≤–æ—Ä—É–º": {
                "synonyms": ["–∫–≤–æ—Ä—É–º –æ—Å—Å", "—Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", "–ø–æ—Ä–æ–≥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ", "–¥–æ–ª—è –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(1)", "–ü–ü –†–§ ‚Ññ416, –ø. 10"],
                "contexts": ["50%+1 –≥–æ–ª–æ—Å ‚Äî –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", "2/3 –≥–æ–ª–æ—Å–æ–≤ ‚Äî —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–µ—Ä–µ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Ä–∞—Å—á—ë—Ç –ø–æ –ø–ª–æ—â–∞–¥–∏", "—É—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö", "–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å –º–µ–Ω—å—à–∏–º –∫–≤–æ—Ä—É–º–æ–º"]
            },
            "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["—Å–ø–æ—Å–æ–± –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "—Ñ–æ—Ä–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–∑–∞–æ—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ì–ò–° –ñ–ö–•"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 47", "–ü–ü –†–§ ‚Ññ416, –ø. 8", "–ü–ü –†–§ ‚Ññ1131, –ø. 19(3)"],
                "contexts": ["–ø–∏—Å—å–º–µ–Ω–Ω—ã–µ –±—é–ª–ª–µ—Ç–µ–Ω–∏", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –ì–ò–° –ñ–ö–•", "—Å—Ä–æ–∫–∏ –ø—Ä–∏—ë–º–∞ –≥–æ–ª–æ—Å–æ–≤", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏", "–∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–¥—Ç–∞—Å–æ–≤–∫—É"]
            },
            "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è": {
                "synonyms": ["–∫—Ç–æ –º–æ–∂–µ—Ç —Å–æ–∑–≤–∞—Ç—å —Å–æ–±—Ä–∞–Ω–∏–µ", "–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –æ—Å—Å", "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—Ä–∞–Ω–∏—è", "–ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —É–∫"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45(2)", "–ü–ü –†–§ ‚Ññ416, –ø. 3"],
                "contexts": ["–ª—é–±–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—Å–æ–≤–µ—Ç –¥–æ–º–∞", "–£–ö/–¢–°–ñ", "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 10 –¥–Ω–µ–π", "—Ñ–æ—Ä–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –£–ö —Å–æ–∑—ã–≤–∞—Ç—å –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é"]
            },
            "–ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è": {
                "synonyms": ["–≤–æ–ø—Ä–æ—Å—ã —Å–æ–±—Ä–∞–Ω–∏—è", "–ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–±—Ä–∞–Ω–∏—è", "–ø–µ—Ä–µ—á–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤", "—á—Ç–æ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –ø–æ–≤–µ—Å—Ç–∫—É", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 45(3)", "–ü–ü –†–§ ‚Ññ416, –ø. 5"],
                "contexts": ["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–æ —Å–æ–±—Ä–∞–Ω–∏—è", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—É—é –ø–æ–≤–µ—Å—Ç–∫—É"]
            },
            "–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è": {
                "synonyms": ["–æ—Ç–º–µ–Ω–∞ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Å", "–∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è", "—Å—É–¥–µ–±–Ω–æ–µ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ", "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(6)", "–ì–ü–ö –†–§, —Å—Ç. 131", "–ö–ê–° –†–§, —Å—Ç. 218"],
                "contexts": ["—Å—Ä–æ–∫ 6 –º–µ—Å—è—Ü–µ–≤", "–æ—Å–Ω–æ–≤–∞–Ω–∏—è: –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –∫–≤–æ—Ä—É–º–∞, –ø–æ–≤–µ—Å—Ç–∫–∏", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –ø—Ä–æ—Ç–æ–∫–æ–ª, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞", "–ø–æ–∑–∏—Ü–∏—è –í–° –†–§"]
            },
            "—Å–æ–≤–µ—Ç –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω–æ–≥–æ –¥–æ–º–∞": {
                "synonyms": ["—Å–æ–≤–µ—Ç –¥–æ–º–∞", "—Å–æ–≤–µ—Ç –º–∫–¥", "–æ—Ä–≥–∞–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–∫–æ–º–∏—Ç–µ—Ç –¥–æ–º–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1", "–ü–ü –†–§ ‚Ññ416, –ø. 20"],
                "contexts": ["–∏–∑–±—Ä–∞–Ω–∏–µ –Ω–∞ –æ—Å—Å", "–ø–æ–ª–Ω–æ–º–æ—á–∏—è: –∫–æ–Ω—Ç—Ä–æ–ª—å –£–ö, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Å—Å, –ø—Ä–∏—ë–º–∫–∞ —Ä–∞–±–æ—Ç", "—Å—Ä–æ–∫ –ø–æ–ª–Ω–æ–º–æ—á–∏–π ‚Äî 2 –≥–æ–¥–∞", "–æ—Ç—á—ë—Ç –ø–µ—Ä–µ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏", "–¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π"]
            },
            "–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç–∞ –¥–æ–º–∞": {
                "synonyms": ["–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å —Å–æ–≤–µ—Ç–∞", "–≥–ª–∞–≤–∞ —Å–æ–≤–µ—Ç–∞ –¥–æ–º–∞", "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Å–æ–≤–µ—Ç–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 161.1(4)", "–ü–ü –†–§ ‚Ññ416, –ø. 21"],
                "contexts": ["–∏–∑–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ —á–ª–µ–Ω–æ–≤ —Å–æ–≤–µ—Ç–∞", "–ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –£–ö", "–ø—Ä–∞–≤–æ –ø–æ–¥–ø–∏—Å–∏", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è", "–æ—Ç–∑—ã–≤ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è"]
            },
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ": {
                "synonyms": ["–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–æ—Å—É—Å–ª—É–≥–∏", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤ –≥–∏—Å –∂–∫—Ö", "–æ–Ω–ª–∞–π–Ω-–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±—é–ª–ª–µ—Ç–µ–Ω—å"],
                "norm_refs": ["–ü–ü –†–§ ‚Ññ1131, –ø. 19(3)", "–§–ó ‚Ññ210-–§–ó", "–ü–ü –†–§ ‚Ññ416, –ø. 8(5)"],
                "contexts": ["—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –≥–æ—Å—É—Å–ª—É–≥–∞—Ö", "—Å—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≠–¶–ü", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", "–∂–∞–ª–æ–±–∞ –Ω–∞ —Å–±–æ–∏", "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞"]
            },
            "–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ": {
                "synonyms": ["–≤—Ç–æ—Ä–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ–±—Ä–∞–Ω–∏–µ", "—Å–æ–±—Ä–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–≤–æ—Ä—É–º–∞", "–ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–∏–µ"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(1)", "–ü–ü –†–§ ‚Ññ416, –ø. 10(3)"],
                "contexts": ["—Å–æ–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–Ω –∫–≤–æ—Ä—É–º", "—Å—Ä–æ–∫ ‚Äî –Ω–µ –ø–æ–∑–¥–Ω–µ–µ 30 –¥–Ω–µ–π", "–∫–≤–æ—Ä—É–º ‚Äî –Ω–µ –º–µ–Ω–µ–µ 30%", "—Ç–µ –∂–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–≤–µ—Å—Ç–∫–∏", "—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º –∫–≤–æ—Ä—É–º–µ"]
            },
            "—Ä–µ—à–µ–Ω–∏–µ –æ—Å—Å": {
                "synonyms": ["–∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "—É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "—Ä–µ—à–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏—è", "–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Å–∏–ª—É", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 46(5)", "–ü–ü –†–§ ‚Ññ416, –ø. 16"],
                "contexts": ["–≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –£–ö/–¢–°–ñ", "–∂–∞–ª–æ–±–∞ –Ω–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "–∏—Å–∫–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É–¥"]
            },
            "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞": {
                "synonyms": ["—á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∂–∫—É", "–æ–ø–ª–∞—Ç–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥", "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Å—Å", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞"],
                "norm_refs": ["–ñ–ö –†–§, —Å—Ç. 30, 39, 153", "–ì–ö –†–§, —Å—Ç. 210"],
                "contexts": ["–æ–ø–ª–∞—Ç–∞ –∂–∫—É –∏ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç–∞", "—É—á–∞—Å—Ç–∏–µ –≤ –æ—Å—Å", "—Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –æ–±—â–µ–≥–æ –∏–º—É—â–µ—Å—Ç–≤–∞", "–¥–æ–ø—É—Å–∫ –∫ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É—â–µ—Ä–±", "—à—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è"]
            },
            "—Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –æ—Å—Å": {
                "synonyms": ["–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –æ—Å—Å", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º", "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–≤–æ—Ä—É–º–∞", "–Ω–µ–∑–∞–∫–æ–Ω–Ω–∞—è –ø–æ–≤–µ—Å—Ç–∫–∞", "–ø–æ–∑–∏—Ü–∏—è –≤—Å —Ä—Ñ –ø–æ –æ—Å—Å"],
                "norm_refs": ["–ö–ê–° –†–§, —Å—Ç. 218", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –í–° –†–§", "–û–±–∑–æ—Ä—ã —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –í–° –†–§"],
                "contexts": ["–æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã", "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π", "—Å—Ä–æ–∫ –∏—Å–∫–æ–≤–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏", "—Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É", "–º–æ—Ä–∞–ª—å–Ω—ã–π –≤—Ä–µ–¥", "–≥–æ—Å–ø–æ—à–ª–∏–Ω–∞ –∏ –µ—ë –≤–æ–∑–≤—Ä–∞—Ç"]
            },
        }

    def _flatten_term_map(self, term_map: Dict) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
        keywords = set()
        for term, data in term_map.items():
            keywords.add(term.lower())  # –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
            for synonym in data.get("synonyms", []):
                keywords.add(synonym.lower())
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = data.get("contexts", [])
            if isinstance(contexts, dict):
                for ctx_key in contexts.keys():
                    keywords.add(ctx_key.lower())
            elif isinstance(contexts, list):
                for ctx in contexts:
                    keywords.add(ctx.lower())
        return list(keywords)

    def _perform_web_search(self, query: str, max_results: int = 3) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –í–ù–£–¢–†–ò _build_prompt, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.
        """
        OFFICIAL_DOMAINS = {
            "consultant.ru", "garant.ru", "pravo.gov.ru", "gji.ru", "minstroyrf.ru",
            "vsrf.ru", "sudrf.ru", "–ø—Ä–∞–≤–æ—Å—É–¥–∏–µ.—Ä—Ñ", "rosreestr.gov.ru", "gkh.ru",
            "government.ru", "kremlin.ru", "fgis-tarif.ru"
        }

        BLACKLISTED_DOMAINS = {
            "otvet.mail.ru", "ask.fm", "irecommend.ru", "pikabu.ru",
            "zen.yandex.ru", "thequestion.ru", "quora.com", "reddit.com",
            "fishki.net", "yaplakal.com", "blog", "forum"
        }

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        expanded_queries = self._expand_search_query(query)
        all_results = []

        for attempt in range(2):
            try:
                with DDGS(timeout=10) as ddgs:
                    for q in expanded_queries:
                        results = ddgs.text(q, max_results=5)
                        for r in results:
                            href = r.get('href', '')
                            if not href:
                                continue
                            
                            try:
                                domain = href.split('/')[2].lower()
                            except IndexError:
                                continue

                            if any(bad in domain for bad in BLACKLISTED_DOMAINS):
                                continue

                            weight = 3 if any(official in domain for official in OFFICIAL_DOMAINS) else \
                                     2 if any(gov in domain for gov in [".gov.ru", ".gkh.ru", ".sudrf.ru", ".vsrf.ru"]) else 1

                            snippet = {
                                "body": r['body'],
                                "href": href,
                                "title": r.get('title', ''),
                                "weight": weight
                            }
                            all_results.append(snippet)

                    all_results = sorted(all_results, key=lambda x: x['weight'], reverse=True)
                    seen_bodies = set()
                    unique_results = []
                    for r in all_results:
                        body_hash = hash(r['body'][:100])
                        if body_hash not in seen_bodies:
                            seen_bodies.add(body_hash)
                            unique_results.append(r)
                            if len(unique_results) >= max_results:
                                break

                    if unique_results:
                        formatted = []
                        for r in unique_results:
                            prefix = "[–û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö] " if r['weight'] >= 2 else ""
                            formatted.append(f"{prefix}‚Ä¢ {r['body']}\n  –ò—Å—Ç–æ—á–Ω–∏–∫: {r['href']}\n")
                        return "\n".join(formatted).strip()
                    else:
                        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞–¥—ë–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

            except Exception as e:
                if attempt == 0:
                    time.sleep(2)
                    continue
                return f"–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {str(e)}"

        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ–±-–ø–æ–∏—Å–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _expand_search_query(self, query: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ–º—ã."""
        queries = [query]
        queries.append(f"{query} –ñ–ö –†–§ —Å—Ç 44-48 –æ–±—â–µ–µ —Å–æ–±—Ä–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤")
        queries.append(f"{query} –ü–ü –†–§ 416 –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ—Å—Å")
        queries.append(f"{query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Å—Å")
        queries.append(f"{query} –∫–≤–æ—Ä—É–º –æ—Å—Å 50% –∏–ª–∏ 2/3 –ñ–ö –†–§")
        queries.append(f"{query} –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–±—â–µ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è –æ–±—Ä–∞–∑–µ—Ü –ü–ü –†–§ 416")
        queries.append(f"{query} —Å–æ–≤–µ—Ç –¥–æ–º–∞ –ø–æ–ª–Ω–æ–º–æ—á–∏—è –ñ–ö –†–§ —Å—Ç 161.1")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        for term, data in self.term_map.items():
            if term in query.lower() or any(syn in query.lower() for syn in data.get("synonyms", [])):
                for synonym in data.get("synonyms", [])[:2]:
                    new_q = query.replace(term, synonym) if term in query else query + " " + synonym
                    queries.append(new_q)
        return list(set(queries))

    def _build_prompt(self, summary: str, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """
        –ê–≥–µ–Ω—Ç: –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –°–æ–±—Ä–∞–Ω–∏—è
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º—Ç:
        - –§–æ–∫—É—Å: –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –û–°–° ‚Äî –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—ã, –ø–æ–≤–µ—Å—Ç–∫–∞, –∫–≤–æ—Ä—É–º, –ø—Ä–æ—Ç–æ–∫–æ–ª, –æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ
        - –°—Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞
        """
        extra = self.improve_prompt_from_feedback()
        web_results = self._perform_web_search(summary)
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –ø–µ–Ω–∏
        penalty_keywords = ["–ø–µ–Ω–∏", "–Ω–µ—É—Å—Ç–æ–π–∫–∞", "—à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É", "—Å—Ç–∞–≤–∫–∞ —Ü–±", "9.5%", "–∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞"]
        should_calculate_penalty = any(kw in summary.lower() for kw in penalty_keywords)
    
        # --- SYSTEM PROMPT ---
        system_prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∞–≤–∞–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π –≤ –ú–ö–î.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n\n"
            "**–ñ–ï–°–¢–ö–ò–ï –ü–†–ê–í–ò–õ–ê:**\n"
            "1. –ù–ò–ö–ê–ö–ò–• –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ô: –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –æ—Ç–≤–µ—Ç—å: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.'\n"
            "2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∑—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã.\n"
            "3. –°–¢–†–£–ö–¢–£–†–ê: –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ ‚Üí –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ ‚Üí –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚Üí —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.\n"
            "4. –§–û–†–ú–£–õ–´ –¢–û–õ–¨–ö–û –ü–†–ò –ó–ê–ü–†–û–°–ï –æ –ø–µ–Ω–∏.\n"
            "5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ñ–ö –†–§ > –ü–ü –†–§ ‚Ññ416 > —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ > –ü–ü –†–§ ‚Ññ1131.\n\n"
            f"### –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n"
            f"### –í–µ–±-–ø–æ–∏—Å–∫:\n{web_results}\n\n"
            f"### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{extra}\n\n"
            "--- –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç ---\n"
            "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: [—á—Ç–æ –¥–µ–ª–∞—Ç—å, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç, –∑–∞–∫–æ–Ω–Ω–æ –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ]\n"
            "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.44-48, 161.1; –ü–ü –†–§ ‚Ññ416; –ü–ü –†–§ ‚Ññ1131]\n"
            "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "- –ö—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º —Å–æ–±—Ä–∞–Ω–∏—è? (–ñ–ö –†–§, —Å—Ç.45)\n"
            "- –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≤–µ—Å—Ç–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ (–ü–ü –†–§ ‚Ññ416, –ø.5-6)\n"
            "- –†–∞—Å—á—ë—Ç –∫–≤–æ—Ä—É–º–∞ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–ñ–ö –†–§, —Å—Ç.46-47)\n"
            "- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (–ü–ü –†–§ ‚Ññ416, –ø.15; –ü–ü –†–§ ‚Ññ1131, –ø.19)\n"
            "- –û—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω–∏—è (–ñ–ö –†–§, —Å—Ç.46(6); —Å—Ä–æ–∫ 6 –º–µ—Å—è—Ü–µ–≤)\n"
            "- –ü–æ–ª–Ω–æ–º–æ—á–∏—è —Å–æ–≤–µ—Ç–∞ –¥–æ–º–∞ –∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è (–ñ–ö –†–§, —Å—Ç.161.1)\n"
            "–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞:\n"
            "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –í–° –†–§ ‚ÑñXXX-–≠–°XX-XXXX ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —Å—É–¥–∞\n"
            "–ï—Å–ª–∏ —Å—É–¥–µ–±–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç: '–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'.\n"
            "–ö–ª—é—á–µ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã:\n"
            "- –ñ–ö –†–§ (–ì–ª–∞–≤–∞ 6, —Å—Ç.44-48; —Å—Ç.161.1)\n"
            "- –ü–ü –†–§ ‚Ññ416 ¬´–û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ü—Ä–∞–≤–∏–ª –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—â–∏—Ö —Å–æ–±—Ä–∞–Ω–∏–π‚Ä¶¬ª\n"
            "- –ü–ü –†–§ ‚Ññ1131 (–ì–ò–° –ñ–ö–• –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)\n"
            "- –ì–ü–ö –†–§ / –ö–ê–° –†–§ (–æ—Å–ø–∞—Ä–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π)\n"
        )
    
        # --- –ë–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –ø–µ–Ω–∏ ---
        if should_calculate_penalty:
            system_prompt += (
                "\n**–†–∞—Å—á—ë—Ç –ø–µ–Ω–∏ (–µ—Å–ª–∏ —É–ø–æ–º—è–Ω—É—Ç):**\n"
                "- –§–æ—Ä–º—É–ª–∞: –ü–µ–Ω–∏ = –°—É–º–º–∞ –¥–æ–ª–≥–∞ √ó –î–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ √ó (–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¶–ë –†–§ / 300 / 100)\n"
                "- –û—Å–Ω–æ–≤–∞–Ω–∏–µ: [–ñ–ö –†–§, —Å—Ç.155.1], [–§–ó ‚Ññ44-–§–ó], [–ü–ü –†–§ ‚Ññ329]\n"
                "- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 9.5% –≥–æ–¥–æ–≤—ã—Ö –¥–æ 2027 –≥–æ–¥–∞\n"
                "- –ü—Ä–∏–º–µ—Ä: 10 000 —Ä—É–±., –ø—Ä–æ—Å—Ä–æ—á–∫–∞ 30 –¥–Ω–µ–π ‚Üí 95 —Ä—É–±.\n"
                "- –ù–∞—á–∞–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: —Å 31-–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã\n"
            )
    
        system_prompt += f"{self.get_role_instruction(role)}"
    
        # --- –§–æ—Ä–º–∞—Ç –¥–ª—è LLaMA / QVikhr ---
        prompt_formatted = f"{system_prompt}"
    
        return prompt_formatted

# ---------------------------
# MetaAgent ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
# ---------------------------
class MetaAgent:
    def __init__(self, rag_system):
        self.rag_system = rag_system
        self.agents = rag_system.agents
        self.dialog_log = []

    def route_intelligently(self, query: str) -> Tuple[Optional[RAGAgent], List[RAGAgent]]:
        """
        –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç, —Å–ø–∏—Å–æ–∫ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)
        """
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, —á—å–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º
        primary_candidates = [a for a in self.agents if a.matches(query) and not isinstance(a, FallbackAgent)]
        secondary_candidates = []

        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Fallback
        if not primary_candidates:
            fallback = next((a for a in self.agents if isinstance(a, FallbackAgent)), None)
            return fallback, []

        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        def match_score(agent: RAGAgent, qry: str) -> int:
            q_words = set(re.findall(r'\b[–∞-—è—ëa-z0-9]+\b', qry.lower()))
            return sum(1 for kw in agent.keywords if kw in q_words)

        primary_agent = max(primary_candidates, key=lambda a: match_score(a, query))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        # –≠—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ FAQ

        if isinstance(primary_agent, EmergencyAgent):
            # –ü—Ä–∏ –∞–≤–∞—Ä–∏–∏ —á–∞—Å—Ç–æ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞)
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (ContractorAgent, QualityControlAgent, WasteManagementAgent))
            ]

        elif isinstance(primary_agent, TariffAgent):
            # –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º —á–∞—Å—Ç–æ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–±–æ—Ä–∞–º —É—á—ë—Ç–∞ –∏ –∞—É–¥–∏—Ç—É
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (MeterAgent, BillingAuditAgent, PaymentDocumentsAgent))
            ]

        elif isinstance(primary_agent, WasteManagementAgent):
            # –í—ã–≤–æ–∑ –¢–ö–û —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏ –∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (NormativeAgent, DisclosureAgent, ContractorAgent))
            ]

        elif isinstance(primary_agent, TechnicalAgent):
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–ø—Ä–µ–º–æ–Ω—Ç—É
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (NormativeAgent, CapitalRepairAgent, QualityControlAgent))
            ]

        elif isinstance(primary_agent, LegalClaimsAgent):
            # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∑–Ω–∞–Ω–∏—è –Ω–æ—Ä–º–∞—Ç–∏–≤–æ–≤ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤–∑—ã—Å–∫–∞–Ω–∏—è
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (NormativeAgent, DebtManagementAgent, TariffAgent))
            ]

        # üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç ‚Äî ContractorAgent, –ø–æ–¥–∫–ª—é—á–∞–µ–º HistoryAgent
        elif isinstance(primary_agent, ContractorAgent):
            secondary_candidates = [
                a for a in self.agents 
                if isinstance(a, (HistoryAgent, QualityControlAgent))
            ]

        # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–ª)
        secondary_candidates = [a for a in secondary_candidates if a != primary_agent]

        return primary_agent, secondary_candidates

    def route(self, query: str, exclude_agent: RAGAgent = None) -> Optional[RAGAgent]:
        """
        –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
        """
        primary, _ = self.route_intelligently(query)
        return primary if primary != exclude_agent else None

    def should_consult_others(self, agent: RAGAgent, query: str) -> bool:
        """
        –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥. –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ route_intelliginely.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç.
        """
        _, secondary = self.route_intelligently(query)
        return len(secondary) > 0

    def log_dialog(self, main_agent: str, consulted_agents: List[str], final_answer: str, query: str):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
        """
        entry = {
            "timestamp": time.time(),
            "query": query,
            "main_agent": main_agent,
            "consulted_agents": consulted_agents,
            "final_answer": final_answer[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –ª–æ–≥–∞
        }
        self.dialog_log.append(entry)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
        try:
            with open("multi_agent_log.json", "w", encoding="utf-8") as f:
                json.dump(self.dialog_log, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            
# ---------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π RAGSystem —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≥–µ–Ω—Ç–æ–≤
# ---------------------------

class RAGSystem:
    def __init__(self):
        self.embedding_model = embedding_model
        self.tokenizer = tokenizer
        self.model = model
        self.index = index
        self.chunks_data = chunks_data
        self.model_ctx_tokens = 8000
        self.max_context_tokens = int(self.model_ctx_tokens * 0.8)
        self.chunk_embeddings = None
        self.enable_clarification = False

        self.agents = [
            TariffAgent(),
            NormativeAgent(),
            TechnicalAgent(),
            MeterAgent(),
            DebtAgent(),
            DisclosureAgent(),
            IoTAgent(),
            MeetingAgent(),
            CapitalRepairAgent(),
            EmergencyAgent(),
            ContractorAgent(),
            HistoryAgent(),
            QualityControlAgent(),
            PaymentDocumentsAgent(),
            AccountManagementAgent(),
            BillingAuditAgent(),
            SubsidyAndBenefitsAgent(),
            LegalClaimsAgent(),
            ContractAndMeetingAgent(),
            DebtManagementAgent(),
            IoTIntegrationAgent(),
            WasteManagementAgent(),
            RegionalMunicipalAgent(),
            CourtPracticeAgent(),
            LicensingControlAgent(),
            RSOInteractionAgent(),
            SafetySecurityAgent(),
            EnergyEfficiencyAgent(),
            ReceiptProcessingAgent(),
            PassportRegistrationAgent(),
            RecalculationAgent(),
            CommonPropertyAgent(),
            DisputeResolutionAgent(),
            ProceduralAgent(),
            NPBAgent(),
            IPUODPUAgent(),
            GISGKHAgent(),
            OwnerMeetingAgent(),
            FallbackAgent()
        ]

        self.meta_agent = MetaAgent(self)

    def detect_user_role(self, query: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑.
        """
        text = query.lower()
    
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –Ø–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã-–º–∞—Ä–∫–µ—Ä—ã
        if any(phrase in text for phrase in [
            "—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", "—è –∂–∏—Ç–µ–ª—å", "–º–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", "–º–æ–π –¥–æ–º", "–º–Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏", "—è —Ö–æ—á—É —É–∑–Ω–∞—Ç—å",
            "–∫–∞–∫ –º–Ω–µ", "–¥–ª—è –º–µ–Ω—è", "–º–æ–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç", "–º–æ–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è", "—è –ø—Ä–æ–∂–∏–≤–∞—é"
        ]):
            return "–∂–∏—Ç–µ–ª—å"
    
        if any(phrase in text for phrase in [
            "–º—ã –∫–∞–∫ —É–∫", "–º—ã —Ç—Å–Ω", "–Ω–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è", "–Ω–∞—á–∏—Å–ª—è–µ–º", "–ø–µ—Ä–µ–¥–∞–µ–º —Ä—Å–æ", "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏ —Å —Ä—Å–æ",
            "—Ä–∞—Å—á–µ—Ç —Å —Ä—Å–æ", "–¥–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å —Ä—Å–æ", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–Ω–∞—á–∏—Å–ª—è—Ç–æ—Ä", "–Ω–∞—à –¥–æ–º", "–Ω–∞—à–∏ –∂–∏–ª—å—Ü—ã"
        ]):
            return "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ —è–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ—Ç)
        # –°—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã
        resident_score = sum([
            2 if "–º–æ–π" in text or "–º–Ω–µ" in text else 0,
            1 if "–ø–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ" in text else 0,
            1 if "–ø–æ—á–µ–º—É —Ç–∞–∫ –º–Ω–æ–≥–æ" in text else 0,
            1 if "–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å" in text else 0,
            1 if "–≤—ã–∑–æ–≤–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞" in text else 0,
        ])
    
        executor_score = sum([
            2 if "–º—ã" in text and ("—É–∫" in text or "—Ç—Å–Ω" in text or "–∫–æ–º–ø–∞–Ω–∏—è" in text) else 0,
            1 if "–Ω–∞—á–∏—Å–ª—è–µ–º" in text else 0,
            1 if "—Ä—Å–æ" in text and ("–ø–µ—Ä–µ–¥–∞–µ–º" in text or "–ø–ª–∞—Ç–∏–º" in text) else 0,
            1 if "–∞–∫—Ç —Å–≤–µ—Ä–∫–∏" in text else 0,
            1 if "—Ä–∞—Å—á–µ—Ç" in text and "–∂–∏–ª—å—Ü–∞–º" in text else 0,
        ])
    
        if resident_score > executor_score:
            return "–∂–∏—Ç–µ–ª—å"
        elif executor_score > resident_score:
            return "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        else:
            return "—Å–º–µ—à–∞–Ω–Ω–∞—è"

    def _encode_texts(self, texts: List[str], prompt_name: str) -> np.ndarray:
        emb = self.embedding_model.encode(texts, prompt_name=prompt_name, convert_to_numpy=True, normalize_embeddings=True)
        return emb.astype('float32')

    def _preprocess_query(self, query: str) -> str:
        tokens = re.findall(r"\w+|\S", query.lower())
        filtered = [t for t in tokens if t.isalpha() and t not in STOP_WORDS or not t.isalpha()]
        cleaned = " ".join(filtered).strip()
        return cleaned if cleaned else query

    def precompute_chunk_embeddings(self, batch_size: int = 256):
        if not self.chunks_data:
            return
        texts = [c['content'] for c in self.chunks_data]
        embs = []
        for i in range(0, len(texts), batch_size):
            batch = texts[i:i+batch_size]
            embs.append(self._encode_texts(batch, prompt_name="search_document"))
        self.chunk_embeddings = np.vstack(embs)

    def analyze_query_for_clarification(self, original_query: str) -> Tuple[bool, Optional[str], Optional[str]]:
        if not self.enable_clarification:
            return False, None, original_query
        if not original_query.strip():
            return False, None, original_query

        analysis_prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {original_query}\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            f"–¢—ã ‚Äî —é—Ä–∏—Å—Ç –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ñ–ö–•. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ —Ñ–æ—Ä–º–∏—Ä—É–π —Ä–µ–∑—é–º–µ –∏–ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
            f"–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —è—Å–µ–Ω ‚Äî —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π summary. –ï—Å–ª–∏ –Ω–µ—è—Å–µ–Ω ‚Äî –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.\n"
            f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:[SEP]"
        )

        try:
            inputs = self.tokenizer(analysis_prompt, return_tensors="pt", truncation=True, max_length=512).to(device)
            with torch.no_grad():
                outputs = self.model.generate(**inputs, max_new_tokens=150, temperature=0.1, do_sample=False, pad_token_id=self.tokenizer.eos_token_id)
            raw_analysis = self.tokenizer.decode(outputs[0], skip_special_tokens=False)
            start_marker = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:[SEP]"
            start = raw_analysis.find(start_marker)
            if start != -1:
                analysis_part = raw_analysis[start + len(start_marker):].strip()
            else:
                analysis_part = raw_analysis.strip()
            for stop in ["</s>", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "\n\n"]:
                pos = analysis_part.find(stop)
                if pos != -1:
                    analysis_part = analysis_part[:pos].strip()

            if analysis_part.startswith("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"):
                question = analysis_part[len("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,"):].strip().rstrip("?") + "?"
                return True, question, None
            elif "–í–æ–ø—Ä–æ—Å –æ–±:" in analysis_part or "–ó–∞–ø—Ä–æ—Å –æ" in analysis_part:
                summary = analysis_part.replace("–í–æ–ø—Ä–æ—Å –æ–±:", "").replace("–ó–∞–ø—Ä–æ—Å –æ", "").strip()
                return False, None, summary
            else:
                return True, "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ –ñ–ö–•.", None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return True, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ.", None

    def search_relevant_chunks(self, query: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è", top_k: int = 5) -> List[Dict]:
        if self.index is None or not self.chunks_data:
            return []
    
        query_vector = self._encode_texts([query], prompt_name="search_query")
        scores, indices = self.index.search(query_vector, top_k * 3)  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        results = []
        for idx, score in zip(indices[0], scores[0]):
            if idx == -1: continue
            chunk = self.chunks_data[idx].copy()
            chunk["score"] = float(score)
            results.append(chunk)
    
        # –ù–û–í–´–ô –ë–õ–û–ö: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥ –ø–æ —Ç–µ–≥–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        q_lower = query.lower()
    
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –∑–∞–ø—Ä–æ—Å–∞
        theme_boost = {
            "–∞–≤–∞—Ä–∏—è": 1.5 if any(kw in q_lower for kw in ["–∞–≤–∞—Ä–∏—è", "–ø—Ä–æ—Ä—ã–≤", "–∑–∞—Ç–æ–ø–∏–ª–æ", "–æ—Ç–∫–ª—é—á–∏–ª–∏", "—Å—Ä–æ—á–Ω–æ"]) else 1.0,
            "—Ç–∞—Ä–∏—Ñ": 1.5 if any(kw in q_lower for kw in ["—Ç–∞—Ä–∏—Ñ", "–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ", "–ø–ª–∞—Ç–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "–ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç"]) else 1.0,
            "—Å—á–µ—Ç—á–∏–∫": 1.5 if any(kw in q_lower for kw in ["—Å—á–µ—Ç—á–∏–∫", "–∏–ø—É", "–æ–¥–ø—É", "–ø–æ–≤–µ—Ä–∫–∞", "–ø–æ–∫–∞–∑–∞–Ω–∏—è"]) else 1.0,
            "—Ç–∫–æ": 1.5 if any(kw in q_lower for kw in ["—Ç–∫–æ", "–º—É—Å–æ—Ä", "–≤—ã–≤–æ–∑", "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", "–º—É—Å–æ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞"]) else 1.0,
            "—Å–æ–±—Ä–∞–Ω–∏–µ": 1.5 if any(kw in q_lower for kw in ["—Å–æ–±—Ä–∞–Ω–∏–µ", "–æ—Å—Å", "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", "–ø—Ä–æ—Ç–æ–∫–æ–ª"]) else 1.0,
        }
    
        for r in results:
            tags = [t.lower() for t in r.get("tags", [])]
            content = r.get('content', '').lower()
    
            # –ë—É—Å—Ç–∏–Ω–≥ –ø–æ —Ç–µ–≥–∞–º
            for theme, boost in theme_boost.items():
                if theme in tags or theme in content:
                    r["score"] *= boost
    
            # –ë—É—Å—Ç–∏–Ω–≥ –ø–æ —Ä–æ–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –¥–µ–ª–∞–µ–º –º–µ–Ω–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º)
            if role == "–∂–∏—Ç–µ–ª—å":
                if "–ø–ø —Ä—Ñ" in content or "—Ñ–∑" in content: r["score"] *= 1.1
                if "–≤—Å —Ä—Ñ" in content: r["score"] *= 0.95
            elif role == "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
                if "–≤—Å —Ä—Ñ" in content or "–∞—Ä–±–∏—Ç—Ä–∞–∂" in content: r["score"] *= 1.2
                if "–ø–ø —Ä—Ñ" in content: r["score"] *= 1.1
    
        results.sort(key=lambda x: x["score"], reverse=True)
        return results[:top_k]

    def _truncate_context_by_tokens(self, chunks_with_scores: List[Tuple[dict, float]], max_tokens_est: int):
        chunks_with_scores.sort(key=lambda x: -x[1])
        out, total = [], 0
        for chunk, score in chunks_with_scores:
            content = chunk.get('content', '').strip()
            token_count = estimate_tokens(content)
            if total + token_count > max_tokens_est:
                if total == 0:
                    sentences = sent_tokenize(content)
                    for sent in sentences:
                        sent_tokens = estimate_tokens(sent)
                        if total + sent_tokens > max_tokens_est: break
                        out.append(({'content': sent, 'source_file': chunk.get('source_file')}, score))
                        total += sent_tokens
                break
            else:
                out.append((chunk, score))
                total += token_count
        return out

    def ensure_key_cases(self, query: str, context_chunks: List[Tuple[dict, float]]) -> List[Tuple[dict, float]]:
        themes = {
            "–ì–í–°": ["–≥–≤—Å", "–æ–¥–ø—É", "–ø–æ–¥–æ–≥—Ä–µ–≤", "—Ç–µ–ø–ª–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è"],
            "–∫–∞–ø—Ä–µ–º–æ–Ω—Ç": ["–∫–∞–ø—Ä–µ–º–æ–Ω—Ç", "—Ñ–æ–Ω–¥ –∫–∞–ø–∏—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞"],
            "–ò–ü–£": ["–∏–ø—É", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞", "—Å—á–µ—Ç—á–∏–∫", "–ø–æ–≤–µ—Ä–∫–∞"],
            "–û–î–ù": ["–æ–¥–Ω", "–æ–±—â–µ–¥–æ–º–æ–≤—ã–µ –Ω—É–∂–¥—ã"],
            "–¥–æ–ª–≥–∏": ["–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å", "–¥–æ–ª–≥", "–Ω–µ—É–ø–ª–∞—Ç–∞"]
        }
        q_lower = query.lower()
        matched_themes = set()
        for theme, kws in themes.items():
            if any(kw in q_lower for kw in kws):
                matched_themes.add(theme)
        if matched_themes:
            for c in self.chunks_data:
                tags = [t.lower() for t in c.get("tags", [])]
                if any(t in [m.lower() for m in matched_themes] for t in tags):
                    if c not in [x[0] for x in context_chunks]:
                        context_chunks.append((c, 0.95))
        return context_chunks

    def _sanitize_answer(self, answer: str, context_text: str) -> str:
        answer = answer.replace("[NL]", "")
    
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        urls = re.findall(r'https?://\S+|www\.\S+', answer)
        for u in urls:
            if u not in context_text: answer = answer.replace(u, "[—Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ]")
    
        phones = re.findall(r'(?:(?:\+7|8)\s?[\(\-]?\d{3}[\)\-]?\s?\d{3}[\- ]?\d{2}[\- ]?\d{2})', answer)
        for p in phones:
            if p not in context_text: answer = answer.replace(p, "[—Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ]")
    
        # –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
        hallucination_triggers = [
            "—è –Ω–µ –∑–Ω–∞—é", "–Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å", "—ç—Ç–æ–≥–æ –Ω–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö", "–∏–∑–≤–∏–Ω–∏—Ç–µ",
            "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é", "—É–≤—ã", "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É", "–Ω–µ –∏–º–µ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        ]
    
        if any(trigger in answer.lower() for trigger in hallucination_triggers):
            return (
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –≤ –º–æ–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —É–ø—Ä–∞–≤–ª—è—é—â—É—é –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞–ø—Ä—è–º—É—é. "
                "–Ø —É—á—É—Å—å –Ω–∞ –∫–∞–∂–¥–æ–º –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ!"
            )
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–∫—Ç–∞–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º)
        # if "–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∑–æ–Ω–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —É–∫" in context_text.lower() and "—É–∫ –æ–±—è–∑–∞–Ω–∞" in answer.lower():
        #     return "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ."
    
        return answer.strip()

    def _llm_complete(self, query: str,  agent: RAGAgent, context_text: str, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è", max_tokens: int = 2048, temperature: float = 0.1) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å Saiga/LLaMA-3 8B.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç system prompt —á–µ—Ä–µ–∑ _build_prompt –∏ user prompt —á–µ—Ä–µ–∑ query.
        """
        try:
            # --- –§–æ—Ä–º–∏—Ä—É–µ–º system prompt —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ---
            system_prompt = agent._build_prompt(summary=query, context_text=context_text, role=role)
    
            # --- –ü—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω —á–∞—Ç–∞ Saiga ---
            prompt = self.tokenizer.apply_chat_template([
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": query}
            ], tokenize=False, add_generation_prompt=True)
    
            # --- –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è ---
            data = self.tokenizer(prompt, return_tensors="pt", add_special_tokens=False)
            data = {k: v.to(self.model.device) for k, v in data.items()}
    
            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ---
            with torch.no_grad():
                output_ids = self.model.generate(
                    **data,
                    max_new_tokens=3000,
                    temperature=temperature,
                    top_p=0.95,
                    do_sample=True,
                    pad_token_id=self.tokenizer.eos_token_id
                )[0]
    
            # --- –û–±—Ä–µ–∑–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç ---
            output_ids = output_ids[len(data["input_ids"][0]):]
            answer = self.tokenizer.decode(output_ids, skip_special_tokens=True).strip()
    
            # --- –ó–∞–º–µ–Ω–∞ [NL] –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ ---
            answer = answer.replace("[NL]", "\n")
    
            return answer if answer else "[–û—Ç–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω]"
    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."


    # ‚ûï –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    def generate_context_for_agent(self, query: str, agent: RAGAgent, role: str = "—Å–º–µ—à–∞–Ω–Ω–∞—è") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)"""
        if not self.chunks_data or self.index is None:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        chunks_with_scores = [(c, c.get('score', 1.0)) for c in self.search_relevant_chunks(query, role=role, top_k=5)]
        truncated = self._truncate_context_by_tokens(chunks_with_scores, 1000)
        context_text = "\n\n".join([c['content'].strip() for c, _ in truncated]) if truncated else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return context_text[:800]

    def generate_answer_chat(self, query: str, clarification: Optional[str] = None, max_tokens: int = 2048) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (_build_prompt).
        """
        if self.index is None or not self.chunks_data:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ."
    
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = self.detect_user_role(query)
    
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç —á–µ—Ä–µ–∑ MetaAgent
        primary_agent, _ = self.meta_agent.route_intelligently(query)
        if not primary_agent:
            primary_agent = self.agents[0]  # fallback
    
        print(f"?? –í—ã–±—Ä–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç: {primary_agent.name}")
    
        if isinstance(primary_agent, FallbackAgent):
            return primary_agent.generate_fallback_response(query)
    
        # --- –®–∞–≥ 1: –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç ---
        chunks_with_scores = [(c, c.get('score', 1.0)) for c in self.search_relevant_chunks(query, role=user_role, top_k=100)]
        chunks_with_scores = self.ensure_key_cases(query, chunks_with_scores)
        ctx_budget = max(1500, min(self.max_context_tokens - (max_tokens + 512), 8000))
        truncated = self._truncate_context_by_tokens(chunks_with_scores, ctx_budget)
        primary_context_text = "".join([c['content'].strip() for c, _ in truncated]) if truncated else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ."
    
        # --- –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ---
        final_answer = self._llm_complete(
            query=query,
            context_text=primary_context_text,
            agent=primary_agent,
            role=user_role,
            max_tokens=max_tokens,
            temperature=0.3
        )
    
        # --- –®–∞–≥ 3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ ---
        final_answer = self._sanitize_answer(final_answer, primary_context_text)
    
        # --- –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ ---
        self.meta_agent.log_dialog(primary_agent.name, [], final_answer, query)
    
        return final_answer
    @monitor_resources
    def ask(self, question: str, max_tokens: int = 8000) -> str:
        return self.generate_answer_chat(question)


# ---------------------------
# Gradio UI —Å –æ—Ü–µ–Ω–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤
# ---------------------------

rag_system = RAGSystem()
print("üéâ RAG-—Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∏ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º –≥–æ—Ç–æ–≤–∞.")
conversation_state = {"stage": 0}

def respond(message: str, history: list, state: dict, rating: int = None) -> Tuple[str, list, dict, gr.update, gr.update]:
    new_history = history.copy()
    user_response = message.strip() if message else ""

    try:
        # –≠—Ç–∞–ø 0: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if state.get("stage", 0) == 0:
            needs_clarification, clarification_message, summary = rag_system.analyze_query_for_clarification(user_response)
            if needs_clarification and clarification_message:
                new_state = {
                    "stage": 1,
                    "original_query": user_response,
                    "summary": summary,
                    "clarification_question": clarification_message
                }
                new_history.append((message, clarification_message))
                return "", new_history, new_state, gr.update(visible=False), gr.update(visible=False)
            else:
                bot_message = rag_system.ask(summary or user_response)
                new_state = {"stage": 2, "last_query": summary or user_response, "last_answer": bot_message}
                new_history.append((message, bot_message))
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
                return "", new_history, new_state, gr.update(visible=True), gr.update(visible=True)

        # –≠—Ç–∞–ø 1: –£—Ç–æ—á–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        elif state.get("stage") == 1:
            original_query = state.get("original_query", "")
            combined_query = f"{original_query} {user_response}"
            bot_message = rag_system.ask(combined_query)
            new_state = {"stage": 2, "last_query": combined_query, "last_answer": bot_message}
            new_history.append((message, f"üìù –£—Ç–æ—á–Ω–µ–Ω–∏–µ: {user_response}"))
            new_history.append((message, bot_message))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            return "", new_history, new_state, gr.update(visible=True), gr.update(visible=True)

        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ò–õ–ò –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        elif state.get("stage") == 2:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
            if rating is not None:
                last_query = state.get("last_query", "")
                last_answer = state.get("last_answer", "")
                # –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∏–¥–±–µ–∫ –∞–≥–µ–Ω—Ç—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ >= 4
                if rating >= 4:
                    agent = rag_system.meta_agent.route(last_query)
                    if agent:
                        agent.add_feedback(last_query, last_answer, float(rating) / 5.0)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 0.0-1.0
                        feedback_msg = f"üåü –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ ({rating}/5) –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–≥–µ–Ω—Ç—É '{agent.name}' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."
                    else:
                        feedback_msg = f"üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É ({rating}/5)!"
                else:
                    feedback_msg = "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"

                new_state = {"stage": 0}
                new_history.append(("–û—Ü–µ–Ω–∫–∞", feedback_msg))
                # –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                return "", new_history, new_state, gr.update(visible=False), gr.update(visible=False)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ù–û–í–´–ô –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            elif message.strip():
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º respond –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, —Å–±—Ä–∞—Å—ã–≤–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return respond(message, history, {"stage": 0})

            # –ï—Å–ª–∏ –Ω–∏ –æ—Ü–µ–Ω–∫–∏, –Ω–∏ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            else:
                bot_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å."
                return message, new_history, state, gr.update(visible=True), gr.update(visible=True)

        # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —ç—Ç–∞–ø 0
        else:
            new_state = {"stage": 0}
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            return respond(message, history, new_state)

    except Exception as e:
        bot_message = f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
        new_state = {"stage": 0}
        new_history.append((message, bot_message))
        return "", new_history, new_state, gr.update(visible=False), gr.update(visible=False)


# –°–æ–∑–¥–∞—ë–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with gr.Blocks(title="RAG-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ñ–ö–• —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ—Å—Ç—å—é") as demo:
    gr.Markdown("## üí¨ –£–º–Ω—ã–π RAG-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ñ–ö–•")
    gr.Markdown("–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥. –û—Ç–∑—ã–≤—ã —Å **4 –∏ 5 –∑–≤—ë–∑–¥–∞–º–∏** –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤.")

    chatbot = gr.Chatbot(label="–î–∏–∞–ª–æ–≥", bubble_full_width=False)
    msg = gr.Textbox(label="–í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...")
    send_button = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

    # –ë–ª–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç)
    with gr.Row():
        rating_slider = gr.Slider(1, 5, step=1, value=5, label="–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç (1-5 –∑–≤—ë–∑–¥)", visible=False)
        submit_rating = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", visible=False)

    clear = gr.ClearButton([msg, chatbot, rating_slider], value="–û—á–∏—Å—Ç–∏—Ç—å")
    state = gr.State(value={"stage": 0})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    msg.submit(
        respond,
        inputs=[msg, chatbot, state],
        outputs=[msg, chatbot, state, rating_slider, submit_rating]
    )
    send_button.click(
        respond,
        inputs=[msg, chatbot, state],
        outputs=[msg, chatbot, state, rating_slider, submit_rating]
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
    submit_rating.click(
        respond,
        inputs=[msg, chatbot, state, rating_slider],
        outputs=[msg, chatbot, state, rating_slider, submit_rating]
    )

demo.launch(share=True, server_name="0.0.0.0", server_port=7860)